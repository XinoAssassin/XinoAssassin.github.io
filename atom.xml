<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>随写 - XinoAssassin&#39;s Blog</title>
  
  <subtitle>Write Everything</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xinoassasssin.github.io/"/>
  <updated>2017-11-21T19:36:21.395Z</updated>
  <id>https://xinoassasssin.github.io/</id>
  
  <author>
    <name>XinoAssassin Ni</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>AC十周年，以及其他(一)</title>
    <link href="https://xinoassasssin.github.io/2017/11/AC-10-year/"/>
    <id>https://xinoassasssin.github.io/2017/11/AC-10-year/</id>
    <published>2017-11-21T19:36:21.000Z</published>
    <updated>2017-11-21T19:36:21.395Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/Assassin's_Creed_Logo.png" width="30%"></p><h2 id="十年"><a href="#十年" class="headerlink" title="十年"></a>十年</h2><p>大家——对于关注游戏界的大家——应该都知道，今年是    <span style="font-family:'Assassin';font-size:24px;">        Assassin’s Creed</span> 系列的十周年。从2007年11月13日初代发售，到今年10月27日的 Origin 发售，已经整整过去了十年。期间系列一共发布了正好十部正作，两部外传以及各种手游甚至 Facebook 的页游也有涉及。2016年系列电影的上映也代表着 Ubi 将其影视化的探索——尽管有些失败——和其他媒体端如小说、漫画甚至有消息称，AC系列将搬上电视机。<img src="/images/acseries.jpg" width="50%" height="50%"></p><h2 id="起"><a href="#起" class="headerlink" title="起"></a>起</h2><h3 id="初见"><a href="#初见" class="headerlink" title="初见"></a>初见</h3><p>第一次看到“刺客信条”这个名字，应该是在《微型计算机》这杂志上，初代 PC 版发售时正好赶上 DX10.1 更新，而这游戏也就成了首批支持 DX10.1 的游戏。</p><blockquote><p>这里有个轶闻，就是初代在1.02版本之后移除了对于 DX10.1 的支持，后来再也没有加回来过，而当时正值 ATI 支持 DX10.1 的 RV600/700 系列与 NV 家不支持 DX10.1 的 G8x/G9x 系列竞争，DX10.1 对于 A 家有很大的加成。</p></blockquote><p>当然了，当年的我自然是玩不上这类大作的，当时家里的机器还是 ATI 690G 上集成的 X1250, 当时也就是停留在这游戏好像不错的印象上，并没有深入地去了解。</p><p>时至今日，我也并没有回头去补这部开山之作。但不可否认，初代给整个系列开了一个不错的头，打下了一定的口碑基础，虽然初代被人诟病比较多的主线任务重复度较高等问题确实一定程度上影响到了玩家体验，但从另一个角度看，这作是当年育碧对于开放世界游戏的一个较为成功的探索，也影响到了后续作品，尤其是二代三部曲的游戏世界构成。</p><h3 id="上手"><a href="#上手" class="headerlink" title="上手"></a>上手</h3><p>AC2 是09年11月在主机平台发售的，登陆 PC 平台是10年3月份的事情。巧得很，09年小学毕业之后我就拥有了一部在当年播放能力很不错的 MP4——蓝魔 T10RK, 当时正值国内几大网络视频平台爆发式增加期，我也接触到了T仔这位魔兽解说同时也是主机游戏视频攻略作者，他当时正好在做 AC2 的游戏攻略视频。“咦，这游戏出2了呀？”我疑惑的同时点开了视频，不得不承认，2代的起头非常能抓住玩家，我就一下子被这游戏抓住了。当时只玩过 COD 124 的我对于这种没接触过的游戏类型产生了浓厚的兴趣。主角 Ezio 流畅的爬墙跑酷和打斗动作，帅气的刺杀动画，都让我非常痴迷。看完整个系列攻略视频之后我就一个想法，我要玩。</p><p><del>这里提一句，AC2 是 DX9 做的，但是各种因素综合起来使它的画面看上去甚至要比 DX10 模式下的初代更好一些。</del></p><p>时间到了10年暑假，家里添购了新的笔记本，虽然显卡是很弱的 GeForce 310M, 但是好歹能玩了。各种原因一直拖到11年的寒假，新年里我终于玩上了刺客信条2, 在 360p 画面里见到的和从 1366x768 的画面里见到的，完全是两个级别的世界<del>虽然只有二十帧不到</del>，只有自己上手玩过了才会懂得游戏的魅力。总而言之，我沉迷于 Ubi 构造出来的这个虚拟世界中，沉迷于扮演 Ezio 进行他的复仇。</p><p>刚开学不久后我得知最新作的兄弟会刚发布，于是找机会偷偷地给电脑挂上了下载，在一个家长会的晚上安装完了兄弟会并领略了一番最新剧情。</p><p>游戏还是得一点点玩的，先是花了一个月时间每周玩一点玩一点的把二代给通关了，然后兄弟会却一直拖着，原因是帧数不够玩着真的吃力。</p><p>2011年的11月份是一个值得写入历史的月份，当然主要原因是 COD8 的发售，伟大的现代战争系列终于完结，IW 在动视的最后遗产好歹给这个系列画上了也许看上去不太完美但足够给粉丝们一个交代的那个句号。而就在这个11月，启示录也上市了，作为 Ezio 三部曲的终结之作，大家都翘首以待 Ubi 这次会写一个怎么样的故事，打造怎么样的一个城市供人游玩。剧情上这作的完成度相当不错，但从游戏性来看，启示录无疑是有赶工的嫌疑的，部分系统甚至较兄弟会退化了或者说可玩度差了，而新加入的塔防元素因为强制进行、拖沓节奏的原因被人诟病。</p><h2 id="承"><a href="#承" class="headerlink" title="承"></a>承</h2><p>有人说 Ezio 三部曲之后再无刺客信条，其实作为二代入坑反复玩了这三部曲的我来说，曾经我也是带有一点这种观点的，直到我玩上了后续作品。</p><p>比较惨的是，陪我一起玩 AC 系列的笔记本在我升上高中开学后不久就被我妈一杯水给消灭了<del>最可气的是她当时水浇上面了还强行当没事把表面水擦干净了继续开机用着，导致最后南桥烧了带着我的 500GB 硬盘一起没了</del>，家里只剩一台我爹二手收来的 ThinkPad X61t, 没办法，不玩就不玩吧也不会死人，我也只能从别的渠道来了解游戏相关的消息。幸好高中的书店一直有 UGC 和各种杂七杂八的杂志出售，没让我陷入信息的荒野。</p><p>回到正题，下面我们从三代讲起。</p><h3 id="Goodbye-Desmond"><a href="#Goodbye-Desmond" class="headerlink" title="Goodbye Desmond"></a>Goodbye Desmond</h3><p>时间来到2012年，曾经预言中的世界末日的年份。    十月末，AC3 在无数粉丝的翘首以待中终于面市，因为新的改良版引擎的关系，刚上市的三代 bug 不少，但也没到 Unity 那种程度。</p><p>三代是存有一定争议的一作，列举一下这作发生了什么：</p><ul><li>开头给你扮演了很久的圣殿骑士但是行事方式跟刺客几乎一致要不是不断的小细节给你提醒这是圣殿骑士可能有玩家直到宣誓那里才吓一跳：“我艹这他妈我玩了几个章节的圣殿骑士”</li><li>戴斯蒙为了拯救地球以及人类自愿牺牲了<del>主角死了！！！这他妈现代主角死了故事怎么写下去？？？</del></li><li>杀了爹</li><li>对于一些历史人物消极化塑造<del>不我们的国父不是这样的育碧你骗人！</del></li></ul><p>但是三代确实是非常棒的一部作品，不论是剧情上还是游戏性上。剧情自不用多说了，虽然后期故事有一些赶但完整性还是比较强的<del>比某大革命强几倍</del>；而在游戏性上，三代保留了前作大部分受到好评的元素，去掉了饱受批评的东西，还加入了新的元素，也就是在后作中占“主要地位”的海战元素，而战斗则爽快不少，更是有一定的 RPG 收集升级系统。这些让三代的可玩性相比于 Ezio 三部曲提升不少。</p><p>AC 系列做到主线第五部，所有现代剧情的目的是什么？我们来回顾一下。</p><p>第一部中戴斯蒙被抓捕强行拉进 Animus 里去进行记忆探索，而当时圣殿手中已经拿到了二太爷的那枚 Apple(当时已经被毁), 如果是想从戴斯蒙的 DNA 记忆中获得更多的关于 Apple 的信息，那为什么不直接从 Ezio 开始呢？<del>同步率不够直接从 Ezio 开始的？</del>而在二代结尾处，育碧给出了新的信息：世界末日要到来了，这给主人公进行 DNA 记忆探索增加了新的理由：“拯救世界”。在兄弟会最后拿到 Ezio 的 Apple 并杀掉了间谍 Lucy 之后，戴斯蒙被引导去找出大圣殿的位置。来到三代，众人来到大圣殿之后发现在“拯救地球装置”前有一道锁，需要钥匙，在提示下戴斯蒙开始体验肯威家族的记忆，这也就是三代的古代线剧情。</p><p>也就是说，这五部以来，目的已经从寻找 Apple 变成了拯救世界，戴斯蒙一直在扮演着那个第一文明信息的接收者。而他却在最后面临着第一文明没有提前告知的巨大的选择——是牺牲自己拯救人类并释放 Juno, 还是让人类文明再次毁灭自己扮演领导者的角色来重建文明。我们的戴斯蒙不愿意让人类因为他的选择而重蹈覆辙，所以最终，他牺牲自己拯救了世界。</p><h3 id="盗亦有道"><a href="#盗亦有道" class="headerlink" title="盗亦有道"></a>盗亦有道</h3><p>紧接着三代，康纳的爷爷，爱德华·肯威，曾经是一名海盗，凭自己的本事横行于加勒比地区的海域，并最终加入了刺客组织（虽然说是最不像刺客的）。这代打造了一个巨大的开放世界，虽然很大部分都是海洋，但玩家就是对海战乐此不疲</p><h2 id="折"><a href="#折" class="headerlink" title="折"></a>折</h2><p>说到这个折，当然是 Unity 这作公认的刺客信条的滑铁卢，也是我继兄弟会之后第三部通关的刺客信条<del>没想到吧！</del></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/Assassin&#39;s_Creed_Logo.png&quot; width=&quot;30%&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;十年&quot;&gt;&lt;a href=&quot;#十年&quot; class=&quot;headerlink&quot; title=&quot;十年&quot;&gt;&lt;/a&gt;十年&lt;/h2&gt;&lt;p&gt;大家——对
      
    
    </summary>
    
    
      <category term="Everything" scheme="https://xinoassasssin.github.io/tags/Everything/"/>
    
      <category term="Game" scheme="https://xinoassasssin.github.io/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>一场因为使用 Git Submodule 引发的血案</title>
    <link href="https://xinoassasssin.github.io/2017/11/hexo-with-submodule/"/>
    <id>https://xinoassasssin.github.io/2017/11/hexo-with-submodule/</id>
    <published>2017-11-14T07:45:59.000Z</published>
    <updated>2017-11-14T14:38:33.642Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前略</strong><br>今天继续对 Blog 进行一些更新，上午先是将目前暂挂于 Github Page 的本博客链接上了<a href="http://blog.xinoassassin.com" target="_blank" rel="external">自定义域名</a>，但是这样一来就不能强制启用 HTTPS 让我略感不爽，有空解决之。<br>中午的时候突然冒出来的念头：把 Blog 的主题用 Git Submodule 来进行管理，原因也是用这种形式管理非常适合 Hexo 的结构，遂动手。</p><p>我的 _config.yml 中是将 public_dir 挂在 Hexo 目录之外，所以不用动它。而原本就在的 themes/hexo-theme-typescript 已经是一个 Git Repo 了，先将它之中的改动 push 上去，然后删了它。</p><p><del>将原本 themes 文件夹中的内容清空后，我同时删除了该文件夹，这也是之后二十分钟让我不知道错在何处的原因。</del></p><p>删去 themes 文件夹之后我们来添加 submodule, 命令很简单，一句 <code>git submodule add</code>就可以搞定，然后会自动帮你 clone 下来并且在根目录下生成 .gitmodules 保存 submodule 信息。</p><p>搞定之后尝试跑跑看有没有问题，hexo g 之后发现警告信息：”No Layout: index.html”. 我心想，不对啊，文件没缺啊，你怎么就找不到 Index 的 Layout 信息了呢？首先想到的是，Git 的 Submodule 是不是用了某种 link, 以至于 hexo 读不到这个文件夹的内容，于是用 ls 查看之，ls 告诉我 theme 和 hexo-theme-typescript 都是实打实的文件夹而不是软链接，百思不得其解，Google 之，发现这个警告代表的文件百分之百是由于文件缺失。然而我的文件都在啊，没缺啊，就认为是 submodule 的问题，参考了别人的 hexo 用 submodule 方式管理的文章之后，我突然想到，会不会是原本文件目录是 “themes” 而我建 submodule 时候用的是 “theme”, 缺了个 ‘s’ 导致的文件缺失呢？于是我新建了一个文件夹跑了一下 hexo init 看看文件目录结构，果不其然，用的确实是 “themes”, 重新把 submodule 建好，用对文件夹名字，运行 hexo s, 打开本地页面，熟悉的主页终于回来了。</p><p><code>&gt;&gt;endl;</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;前略&lt;/strong&gt;&lt;br&gt;今天继续对 Blog 进行一些更新，上午先是将目前暂挂于 Github Page 的本博客链接上了&lt;a href=&quot;http://blog.xinoassassin.com&quot; target=&quot;_blank&quot; rel=&quot;exter
      
    
    </summary>
    
    
      <category term="Everything" scheme="https://xinoassasssin.github.io/tags/Everything/"/>
    
      <category term="Blog" scheme="https://xinoassasssin.github.io/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>GBF2Weibo 开发记</title>
    <link href="https://xinoassasssin.github.io/2017/11/GBF2Weibo/"/>
    <id>https://xinoassasssin.github.io/2017/11/GBF2Weibo/</id>
    <published>2017-11-11T09:01:14.000Z</published>
    <updated>2017-11-14T07:53:15.022Z</updated>
    
    <content type="html"><![CDATA[<p>上周末和这周头上都一直在写那个 GBF 自动发 PO 到微博的工具(<a href="https://github.com/XinoAssassin/GBF2weibo" target="_blank" rel="external">github</a>)，到目前为止也就实现了一半，后半部分自动发 PO 的功能因为新浪的限制，已经没办法做到以前 FaWave 那种形式的发送微博了。我的想法是绕路，通过在 weibo.com, 也就是网页版微博中插脚本，实现将文本插入到发送框，同时图片也插入进去，然后模拟点击发送按钮。上周日下午研究了一小时的微博首页，文本插入到发送框和模拟点击发送是能够做到的，但是就是不知道如何插入图片。在这里我又产生了一种绕路想法，就是模拟 Ctrl + C/V 的键盘操作来进行复制粘贴工作，然后，坑了。</p><p>写这玩意儿的过程中，因为需要自己获取当前的 RaidCode, 也就是那个八位参战码。GBF 页面加载完存在一个 “stage” object, 其中 .pJsnData.twitter.battle_id 就是我需要的码。那么就需要将这个码传递出来，而 Chrome 对于 Extension 是有非常严格的限制的，Extension 的 Content Script 和 Extension 本体是处于不同的沙盒之内的，所以就不能直接用 <code>var raidCode = stage.pJsnData.twitter.battle_id</code> 这种形式，而是要通过 Chrome 的 Message Passing API 来传递信息。苦学了好几天的消息传递都不能达到目的的时候，我想起来 Viramate 提供了外部获取数据的 API, 那我直接调用 API 来得到整理过的信息不是更方便吗？说是这么说，看了半天源码之后发现它没提供现成的 RaidCode 直接返回，发邮件询问作者之后得知，原来有提供战场数据的返回，但没有直接的 RaidCode 返回，不过已经能满足我的需求了。</p><p><del>其实作者在说明文档中有写这个 API, 但他写返回内容的时候写了”a bunch of shit”，所以我当时看文档的时候也就忽视掉了这个 API.</del></p><p>有了现成的数据源，我只需要将其解析就行了。随后遇到了一些奇奇怪怪的小问题，大部分都是新手常见问题，值得一提的是，JS 的执行时间点与其在页面里的加载位置有关系，比如说，放在<code>&lt;head&gt;</code>里的要比<code>&lt;body&gt;</code>中的早执行（表意可能有问题）。</p><p>文本生成成功了，那么就是 Boss 图片的问题了。这里又出现了新的问题，GBF 这么多 Boss, 我一个个去下图片写信息要花太多时间。于是想到 GBF RaidFinder 有提供 Boss 数据导出的 json, 那么我写一个从这个 json 中获取信息并自动下载图片的程序来自动化不就行了。请出我们的 Visual Studio 和 C#.</p><p>自动化程序的大体思路是这样的：读 json 产生对象数组 -&gt; 数组排序去重 -&gt; 将原数组数据根据自己需求导入自己定义的对象数组中 -&gt; 读自己定义的对象数组中的图片 URL 并进行下载。</p><p>在写排序的时候发现自己把以前学过的排序算法都忘记了，使劲回忆了不少时间才写出了一个冒泡排序。然后是去重的问题，我并没有学习过去重算法，Google 之，众说纷纭，我选择了一个使用 List 的方案，最后以一句精简的 Lambda: <code>if (list.Exists(x=&gt;x.Name_EN==_mb.Name_EN) == false){ list.Add(_mb); }</code>搞定之。现在想来原理很简单，一个条件判断——“如果 List 中不存在同名（对象属性）对象，则添加之。</p><p>对了，C# 中还有个设计就是对象数组申明之后需要进行每个数组元素的初始化即创建对象，不然会运行时报错。</p><p>感叹一句，C# 是真的方便实用，MS 已经几乎给好了你所有需要的轮子，你只需要将这些东西拼起来，自己写点胶水就可以了。对于一个 Windows 平台上的小工具来说，C# 是特别方便的。</p><p>大体上这整一套开始有实用的代码写入是周日下午，最后写完半成品是在周一晚上，第一次写一个“能用”的小玩意儿还是很开心的。</p><p><code>&gt;&gt; endl;</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上周末和这周头上都一直在写那个 GBF 自动发 PO 到微博的工具(&lt;a href=&quot;https://github.com/XinoAssassin/GBF2weibo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt;)，到目前为止也就实
      
    
    </summary>
    
    
      <category term="Game" scheme="https://xinoassasssin.github.io/tags/Game/"/>
    
      <category term="Programming" scheme="https://xinoassasssin.github.io/tags/Programming/"/>
    
  </entry>
  
  <entry>
    <title>Hello,World.\n</title>
    <link href="https://xinoassasssin.github.io/2017/11/Hello-World-n/"/>
    <id>https://xinoassasssin.github.io/2017/11/Hello-World-n/</id>
    <published>2017-11-11T08:38:26.000Z</published>
    <updated>2017-11-14T07:53:19.109Z</updated>
    
    <content type="html"><![CDATA[<p>想自己架个 Blog 好几个月了，开始用了 Jekyll，在 Windows 上做本地生成不太方便，扔远程机器上有时候自己会忘记目录结构也很麻烦。</p><p>很早就听说过几个著名的博客框架，什么 WordPress, Ghost, Hexo, Jekyll. 最后我还是选择了 Hexo, 原因有几个：</p><ul><li>我需要静态文件</li><li>我得看得懂</li><li>可以在 Windows 平台上进行静态文件生成</li><li>简洁</li></ul><p>那么最后试用了一下 Hexo, 感觉不错，Windows 上跑的挺欢快，主题也挺多，修改起来自己也看得懂点。</p><p><del>还是要感谢 Node.js 这玩意儿</del></p><p>那么架好了，写些什么呢？</p><p>上上礼拜刚 Uninstall 了 PUBG, 给自己的理由是挂太多了不想玩，其实主要的一点是一开游戏一晚上就没了，大学时间已经不多了，还是多留给学各种各样的东西。</p><p>所以上礼拜写了 GBF2Weibo 这个半成品，学了点 JavaScript. 同时因为需要，写了个 C# 小工具来进行 Boss 数据的转化，具体过程写在之后的文章。</p><p>想了想，开篇文确实没什么能多说的，我就只能鞭策自己以后把玩游戏的时间多用来学习，没事的时候多写点文字随便记录一下，大概这也是我把 Blog 的 Title 设置为“随写”的原因吧。</p><p><code>&gt;&gt; endl;</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;想自己架个 Blog 好几个月了，开始用了 Jekyll，在 Windows 上做本地生成不太方便，扔远程机器上有时候自己会忘记目录结构也很麻烦。&lt;/p&gt;
&lt;p&gt;很早就听说过几个著名的博客框架，什么 WordPress, Ghost, Hexo, Jekyll. 最后我还是
      
    
    </summary>
    
    
      <category term="Everything" scheme="https://xinoassasssin.github.io/tags/Everything/"/>
    
      <category term="Blog" scheme="https://xinoassasssin.github.io/tags/Blog/"/>
    
  </entry>
  
</feed>
