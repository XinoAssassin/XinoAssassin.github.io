<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>随写 - XinoAssassin&#39;s Blog</title>
  
  <subtitle>Write Everything</subtitle>
  <link href="//atom.xml" rel="self"/>
  
  <link href="https://blog.xinoassassin.me/"/>
  <updated>2019-11-03T11:01:08.029Z</updated>
  <id>https://blog.xinoassassin.me/</id>
  
  <author>
    <name>XinoAssassin Ni</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《天气之子》：新海诚的回归</title>
    <link href="https://blog.xinoassassin.me/2019/11/weathering-with-you/"/>
    <id>https://blog.xinoassassin.me/2019/11/weathering-with-you/</id>
    <published>2019-11-03T11:00:20.000Z</published>
    <updated>2019-11-03T11:01:08.029Z</updated>
    
    <content type="html"><![CDATA[<p>不整那些虚的介绍，直接开始讲这电影。简单地说就是新海诚用这部电影告诉所有人，《你的名字。》只是一个意外，《天气之子》才是他自己真实想做的电影。</p><p> <img src="/images/Weathering_with_You_Movie_(Wordmark)Logo.png" style="zoom:40%;"> </p><p>相比起《你的名字。》中前半部分还用了时间错位的手法留了个小小悬念稍微让观众要转一下弯，《天气之子》根本就是平铺直叙，开篇就按照时间顺序直接把阳菜如何成为“晴女”的过程给放出来了。</p><p><del>然后镜头一转到男主出场，没有对开头的场景进行任何的解释，女主似乎也不见了一样。本来以为男主会有什么奇特的本事或是什么生存的本领，可没想到他只是离家出走，只身一人来到东京想在大城市中活下去的普通乡下高中生，而同样没有想到新海诚会这么安排这两人的相见——在M记打工的女主看男主多次来餐厅只敢喝汤就送了个汉堡给他。也没有想到女主也同样是社会的弱势群体——她和自己的弟弟一起生活，没有父母只能靠自己去努力挣钱养活自己和弟弟。本来这两人也就是一面之缘的关系，按照现实生活的剧情发展他们俩也不会再有什么交集了，可这是电影。女主被M记辞退之后因为生活所迫在马上要踏入风俗业大门的时候，男主出现把她拐走了，这俩人的命运由此交织在了一起。</del></p><p>我不知道为什么这么多人都喊着对这次的新海诚电影失望了，在我看来，新海诚就应该做出这样的作品——他就想写少男少女之间相遇相离的感情故事，从很久以前开始就一直是，《你的名字。》只不过是在最后又加了一个相遇罢了，然后对于电影整体的把控上面表现得出色，其实它本质上也就是一个浪漫的恋爱故事而已。</p><p>当然可能观众会觉得，电影结构太松散，逻辑太不严谨。是，这些在这个大型罗曼蒂克故事里面是问题吗？不是。新海诚就真的只是想写一个爱的意义可以超越拯救世界的故事，拯救世界是什么？能吃吗？有阳菜重要吗？没有。所以男主当然是决定不论如何都要去找到女主，而另一边在女主那边，她肯定是后悔了，所以在天空中醒来见到帆高的那一刻她就开始奔跑了，毫不犹豫跟着帆高一起跳了下去。</p><p>其实故事就是这么简单，只不过是插了一些别的元素在里面然后被观众放大了看而已。然后因为存在有这些额外的元素，但并没有处理好，就会被抓着批评了。那干嘛要对新海诚有这么高的期待值呢？如果只是因为《你的名字。》就对这部电影产生了莫大的期待，那还是算了吧，新海诚其实仍然不是完全的商业化，就做观众喜欢看的、没有什么短板的电影这种情况没有在他身上发生，他还是想做自己的东西，他想画天空与云朵，好那干脆把场景主舞台放到天空中、放在云层之上。他想写为了爱拯救世界又算得上是什么，好男主冲破层层阻碍来到天上将女主唤醒并一起跳下，让暴雨尽情释放淹没半个东京。但是前作的成功已经裹挟了他，于是我们看到了那些似曾相识的桥段，在整部电影中多次看MV。但是你仍然能够感受到那种带着淡淡忧伤的小文艺气息，这就是新海诚的风格。</p><p>当然电影将很大的篇幅花在了帆高如何脱身来到简易鸟居的过程，途中还顺带塑造了一下桂介和夏美这对叔侄的人物形象，我觉得这段是稍显过长了，尤其是在山手线轨道上跑那段，当然这也可能有他自己的独特用意，这里还是不多加揣摩了。</p><p>至少于我而言，在一个半小时的时间里，我看完了一个浪漫到极致的故事，还有非常舒服的视觉和听觉体验，这不就足够了吗，我们为什么还要对着这么一部浪漫文艺片做“阅读理解”呢？这就是新海诚写的一个梦，一个关于浪漫恋爱的梦，你难道没有梦见过自己和喜欢的女孩一起经历一段极其不平凡的冒险吗？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;不整那些虚的介绍，直接开始讲这电影。简单地说就是新海诚用这部电影告诉所有人，《你的名字。》只是一个意外，《天气之子》才是他自己真实想做的电影。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;/images/Weathering_with_You_Movie_(Wordmark)Log
      
    
    </summary>
    
    
      <category term="ACG" scheme="https://blog.xinoassassin.me/tags/ACG/"/>
    
      <category term="Comment" scheme="https://blog.xinoassassin.me/tags/Comment/"/>
    
  </entry>
  
  <entry>
    <title>一个加钱就完事儿了的故事：9600KF超5.1GHz小记</title>
    <link href="https://blog.xinoassassin.me/2019/09/9600kf-5GHz/"/>
    <id>https://blog.xinoassassin.me/2019/09/9600kf-5GHz/</id>
    <published>2019-09-29T02:21:43.000Z</published>
    <updated>2019-10-06T07:32:16.641Z</updated>
    
    <content type="html"><![CDATA[<p>最近最火的CPU应该莫过于i5-9600KF，这周一的时候，这枚处理器突然在Intel的京东自营旗舰店理开始降价促销，1399的价格做到了比618还要低的史低，让一直想更换成9700K的我不禁心动，都这个价位了还要啥自行车？于是想到正好在上周六的时候收了朋友的一块Z170，魔改一下应该能上9600KF，低成本换平台，买了！于是当天看到优惠信息后不到半小时就下单了。</p><p><img src="/images/1569724371107.png" alt></p><p><img src="/images/1569716281622.png" alt></p><p>这批货应该是新到的，所以都还没有进京东各地的仓库，我的这枚处理器是上海发过来的，沙包的Z170先到了，用笔记本上面的i3-8100试了试，恩，兼容性不错，除了USB会报资源不够和内存兼容性有点小问题不能超手上的双面16GB内存之外其他一切正常，这让我对它能作为9600KF的座驾充满了信心。结果……（其实因为内存兼容性问题还下单了两条威刚金色威龙3600）</p><p>周三的时候，9600KF终于到了，上手贴好护舒宝，其实放在华擎华硕等一票除技嘉外的板子上都可以只屏蔽2点+短接2点（微星和蓝天这两家甚至只用屏蔽2点）。上板子，正当我兴冲冲地等着它进系统的时候，又开始卡Windows启动加载的第二个圈了。</p><p><img src="/images/IMG_6650_900.JPG" alt="IMG_6650_900"></p><p><img src="/images/IMG_6652_900.JPG" alt="IMG_6652_900"></p><p>无奈，先换回8100检查主板BIOS，用afuwin把当前BIOS备份出来，然后用MMTool查看里面含有的微码信息，发现缺少了针对R0步进的新微码，遂根据网上教程，找来同厂商的Z390板子BIOS，将微码移植过去，然后再用afuwin给刷上，一切看似很顺利应该是没有毛病了，结果仍然开机卡加载。</p><p><img src="/images/EA4cFgXU4AALSL_.jpg" alt="img"></p><p>9代处理器步进情况，注意从9600KF和9600K基本都是8核屏蔽而来的，而且还分R0和P0两种步进，其中R0步进可以硬件免疫Spectre。</p><p>一头雾水之下只能认为是BIOS有问题，但在网上基本找不到解决办法，因为R0步进太新了，很少有人把新的R0步进处理器放在老主板上面用，无奈第二天还要跑上海，遂睡觉。</p><p>睡了可能只有三个钟就爬起来赶飞机了，地铁上面刷了下什么值得买发现京东上微星的Z390系列板子稍微有点优惠，考虑了一下觉得自己是没有能力解决那块Z170的BIOS问题了，于是直接下单MPG Z390 GAMING EDGE AC。</p><p>在广州和上海间当天来回还是有点累的，但是挡不住我用上新主板的兴奋之情。没几分钟把CPU显卡内存两块SSD和风扇全部搞定，然后插上电源开机，顺利点亮。然后直接进BIOS，先测试内存能不能上3200，打开XMP重启，很顺利就跳上3200了，然后再把处理器倍频拉到50，电压先开了自动。很顺利地直接进了系统，打开CPU-Z，看到了从来没见过的5GHz。</p><p><img src="/images/MSI_SnapShot_900.jpg" alt="MSI_SnapShot_00_900"></p><p>然后打开AIDA64单拷FPU，观察到电压为1.34V，体感稍微有点高，想降一点，因为稍微降一点可以让CPU温度更低，散热器更好压，于是安装了Intel XTU，在Windows下面开始降电压，到1.3V的时候我感觉差不多了就没往下降，此时倍频其实可以再往上拉一档，5.1GHz单拷FPU过关，4热管的利民刺灵AS120可以把满载功耗120W的9600KF压在75度，很满意了。</p><p>进《刺客信条：奥德赛》简单benchmark了一下，同样显示配置的情况下，平均帧数上升了有10多帧，而高频CPU最大的优势——电子竞技游戏不掉最低帧我还没测过，但是想来这块5GHz的9600KF比我原本超频至3.8GHz的E3-1231V3肯定是要强得多了。</p><p><img src="/images/IMG_6779.PNG" alt="IMG_6779"></p><p>然后就是把BIOS各种选项都开起来，我是不喜欢CPU没负载的时候还加着一个1.32V这么高的电压的，所以在设置里面把电压控制改成了自适应+Offset，手动给了+0.08V的Offset，这样主板的电压在满载的时候最高可以达到1.32V，而在没有负载的时候也会自动降压。</p><p><img src="/images/1569722542854.png" alt="1569722542854"></p><p>而内存，因为从朋友那儿借了闲置的两根单条16GB的DDR4-3200内存，自己又下单买了一组8GBx2的套装，所以想着能不能插一块搞个48GB内存系统，事实证明是可以的，只要两个通道的内存容量相等、频率和时序设定一致即可开启，手动在BIOS里面把时序改成差的那一套内存上自带XMP信息中的就可以把频率调至3200，并且十分稳定。</p><p><img src="/images/1569723402197.png" alt="1569723402197"></p><p><img src="/images/MSI_SnapShot_02_900.jpg" alt="MSI_SnapShot_02_900"></p><p><img src="/images/1569722895569.png" alt="1569722895569"></p><p>这次时间几乎长达一周的折腾让我明白了，有些问题，加钱真的就完事儿了……</p><p><img src="/images/IMG_6780.PNG" alt="IMG_6780"></p><p>另外值得一提的是，想摸CJR颗粒的朋友可以买威刚的金色威龙，我推荐别人、自己、还有朋友那儿一共四套金色威龙，频率从3000到3600全部都摸到了CJR颗粒。</p><p><img src="/images/IMG_6655_900.JPG" alt="IMG_6655_900"></p><p>老平台：</p><p><img src="/images/IMG_6642_900.JPG" alt="IMG_6642_900"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近最火的CPU应该莫过于i5-9600KF，这周一的时候，这枚处理器突然在Intel的京东自营旗舰店理开始降价促销，1399的价格做到了比618还要低的史低，让一直想更换成9700K的我不禁心动，都这个价位了还要啥自行车？于是想到正好在上周六的时候收了朋友的一块Z170，
      
    
    </summary>
    
    
      <category term="Hardware" scheme="https://blog.xinoassassin.me/tags/Hardware/"/>
    
      <category term="DIY" scheme="https://blog.xinoassassin.me/tags/DIY/"/>
    
  </entry>
  
  <entry>
    <title>一场因为BIOS版本太老而引发的无法进入系统悬案</title>
    <link href="https://blog.xinoassassin.me/2019/09/bios-cant-boot-into-system/"/>
    <id>https://blog.xinoassassin.me/2019/09/bios-cant-boot-into-system/</id>
    <published>2019-09-11T06:24:10.000Z</published>
    <updated>2019-09-11T12:35:06.355Z</updated>
    
    <content type="html"><![CDATA[<p>前几天朋友的老平台主板坏了，他也正好打算要换一套平台，于是找我写了个配置单，随后在京东上面下单了，京东发货速度很快，没两天东西全都到了，配置单就不晒了，我随手写的，免得被评论吐槽哪里哪里有问题，就用了9700K+Z390+2060SUPER。也正好因为是在新一轮促销开始前夕，所以整套平台的价格买贵了有个小一千，不过早买早享受嘛。</p><p>这周日，我过去朋友家里装机。装机我虽然不是很熟练，但是大部分细节我都是注意到了。装箱走线又多花了半小时，搞定之后一次就点亮了，随后在 BIOS 设定里面把内存的 XMP 开起来，频率上到 DDR4-3200 也没出现内存不兼容的现象，看上去一切都挺顺利的，然后我掏出做好的 Windows 10 原厂安装 U 盘准备安装系统。</p><p>插U盘，开机，按 F12 选择 U 盘启动！正当我等着 Windows 10 安装那个偏紫色的界面出现的时候，突然，Windows 启动界面那个用来提示正在加载系统的滚动圆卡住了。</p><p>我有点懵，心想，不应该啊，这镜像我验过 SHA-1 没有完整性问题啊。出于对微软品质的不放心，我马上重新下了一个稍老版本的 Windows 10 1903 安装镜像准备重新做安装盘，心想，嘿，这个版本我用过的，肯定没问题。</p><p>下好镜像打开 Rufus（极力推荐用这个开源免费软件来写镜像）打开镜像写入，很顺利。</p><p>插 U 盘，开机，按 F12 选择 U 盘启动，又卡住了！重新尝试了几次，每次都卡在这个地方。我把安装 U 盘插到自己的笔记本上面，很顺利地进入了 Windows 10 安装界面，看来不是镜像的问题。思索了一番，可能是内存超频的问题，于是进 BIOS 还原到默认设置，再重启，还是卡。</p><p>难道是我装机的时候哪里出问题了？于是把机箱两侧版再次打开，检查了一番发现没有问题啊，我装的100%没有问题。于是只能进入 BIOS 寻找问题可能所在之处，同时搜索这块板子，看看网上有没有遇到相似问题的人。</p><p>还真有，在搜索结果的第一位就是该主板的官方论坛中一个报告自己遇到无法启动错误的用户，简单看了下， 是 BIOS 版本的问题。</p><p>难不成到手的主板上面默认的 BIOS 还能让你进不去系统，进不去系统安装盘的？我留意了一下 BIOS 的版本，然后上官网找了主板的驱动下载页面，发现 BIOS 确实比较老，落后最新的已经有三个版本了。于是下载最新的 BIOS，刷入，再插启动盘，很流畅地进入了熟悉的 Windows 10 安装界面。</p><p>这里就不点名是哪块板子了，这次装机的经历让我明白了出厂 BIOS 并不是像网上很多人说的“最稳定”“可靠性最高”，而是很可能就问题百出，还是推荐大家上手就直接更新到最新稳定版的 BIOS，甚至一些 beta 版的 BIOS 版本都是可以尝试的，很多疑难杂症和平台小毛病通过 BIOS 的更新都是可以解决的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前几天朋友的老平台主板坏了，他也正好打算要换一套平台，于是找我写了个配置单，随后在京东上面下单了，京东发货速度很快，没两天东西全都到了，配置单就不晒了，我随手写的，免得被评论吐槽哪里哪里有问题，就用了9700K+Z390+2060SUPER。也正好因为是在新一轮促销开始前夕
      
    
    </summary>
    
    
      <category term="Hardware" scheme="https://blog.xinoassassin.me/tags/Hardware/"/>
    
  </entry>
  
  <entry>
    <title>怎样在境外网站上进行推流</title>
    <link href="https://blog.xinoassassin.me/2019/08/how-to-streaming-on-youtube/"/>
    <id>https://blog.xinoassassin.me/2019/08/how-to-streaming-on-youtube/</id>
    <published>2019-08-06T09:07:15.000Z</published>
    <updated>2019-08-06T09:10:57.324Z</updated>
    
    <content type="html"><![CDATA[<p>其实很简单，只需要将obs的网络连接引向代理，但是Shadowsocks中直接挂全局模式不太好，因为会将本来能够直连的网站也会通过代理连接，而且应该是不能代理到obs的（我从来不用全局）。</p><p>那么要怎么做到这点呢？我常用的是<a href="https://www.proxifier.com/" target="_blank" rel="noopener">Proxifier</a>，使用教程网上很多，这边不再赘述，只要在规则里面把obs的执行文件加入需代理列表即可，各种使用RTMP协议的直播网站应该都是直接可以这样搞定。</p><p><img src="/images/proxifier-rule.png" width="50%"></p><p>当然，一个高带宽的代理是必须条件。</p><p>题外话，无论是Youtube还是Twitch，其直播后台都比Bilibili强太多了。</p><p><img src="/images/youtube-back.png" width="70%"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;其实很简单，只需要将obs的网络连接引向代理，但是Shadowsocks中直接挂全局模式不太好，因为会将本来能够直连的网站也会通过代理连接，而且应该是不能代理到obs的（我从来不用全局）。&lt;/p&gt;
&lt;p&gt;那么要怎么做到这点呢？我常用的是&lt;a href=&quot;https://ww
      
    
    </summary>
    
    
      <category term="Tutorial" scheme="https://blog.xinoassassin.me/tags/Tutorial/"/>
    
  </entry>
  
  <entry>
    <title>用youtube-dl在直播进行中同时下载</title>
    <link href="https://blog.xinoassassin.me/2019/08/Download-Youtube-Steaming-while-Streaming/"/>
    <id>https://blog.xinoassassin.me/2019/08/Download-Youtube-Steaming-while-Streaming/</id>
    <published>2019-08-01T16:21:00.000Z</published>
    <updated>2019-08-01T16:21:00.340Z</updated>
    
    <content type="html"><![CDATA[<p>基于今天花谱Live的下载失败，一怒之下又翻了翻youtube-dl的文档，发现可以在直播的同时直接截流保存成文件，用这种方法可以大大加快海盗效率。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>良好的网络环境</li><li>空闲的CPU资源</li><li><a href="https://ytdl-org.github.io/youtube-dl/index.html" target="_blank" rel="noopener">youtube-dl</a></li><li><a href="https://ffmpeg.org/" target="_blank" rel="noopener">FFmpeg</a></li><li>一点点命令行基础</li></ul><p>这里建议将youtube-dl和FFmpeg所在的目录加入环境变量中，用户或者系统的均可。另外你还要搞清楚自己的本地代理端口号，一般为1080。</p><h2 id="配置文件与命令"><a href="#配置文件与命令" class="headerlink" title="配置文件与命令"></a>配置文件与命令</h2><p>youtube-dl支持配置文件，可以免去每次手动输一长串命令的麻烦，在Windows下其默认读取的配置文件位于用户目录下的<code>youtube-dl.conf</code>，即<code>%userprofile%\youtube-dl.conf</code>。</p><p>这边准备好了两份配置文件，一份是直播同时下载，另一份是平常下载视频。两份配置文件都需要手动更改里面的代理端口号，和自己环境所匹配，其他不需要进行更改。</p><p>普通下载：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">--proxy socks5://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">1081</span></span><br><span class="line">-f <span class="string">'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best'</span></span><br><span class="line">-o <span class="string">'%(uploader)s/%(title)s.%(ext)s'</span></span><br><span class="line">--add-metadata</span><br><span class="line">--write-thumbnail</span><br><span class="line">--ignore-errors</span><br><span class="line">--extract-audio</span><br><span class="line">--audio-format best</span><br><span class="line">--audio-quality <span class="number">0</span></span><br><span class="line">--keep-video</span><br><span class="line">--embed-thumbnail</span><br></pre></td></tr></table></figure><p>直播的同时进行下载：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--proxy http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">1081</span></span><br><span class="line">-f <span class="string">'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best'</span></span><br></pre></td></tr></table></figure><p>分别将这两块命令行保存成两个文件，修改Proxy行的端口为自己使用的，建议一个命名为<code>youtube-dl.conf</code>放置在<code>%userprofile%</code>目录下，另一个换个名字也存<code>%userprofile%</code>目录下方便调用。</p><p>以上工作完成之后打开命令提示符，注意是cmd不是PowerShell，因为后者在管道操作上面有一些不同，这边是用最简单的cmd来完成。命令：</p><p><code>youtube-dl -o - U2B-LINK|ffmpeg -i - -vcodec copy -acodec copy &quot;OUTPUT.mp4&quot;</code></p><p>如果你默认的配置文件不是用于直播时同时下载的，那么请指定配置文件：</p><p><code>youtube-dl -o - --config-location PATH\TO\CONFIG U2B-LINK|ffmpeg -i - -vcodec copy -acodec copy &quot;OUTPUT.mp4&quot;</code></p><p>注意，<code>-o</code>之后的<code>-</code>和<code>-i</code>之后的<code>-</code>均不能遗漏，这是管道操作最重要的两点之一，还有一点是管道操作符<code>|</code>，跟反斜杠<code>\</code>同一个键。命令中的<code>U2B-LINK</code>就是油管链接、<code>PATH\TO\CONFIG</code>就是youtube-dl的配置文件具体位置，<code>OUTPUT.mp4</code>是输出的文件名。</p><p><code>&gt;&gt;endl;</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;基于今天花谱Live的下载失败，一怒之下又翻了翻youtube-dl的文档，发现可以在直播的同时直接截流保存成文件，用这种方法可以大大加快海盗效率。&lt;/p&gt;
&lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备
      
    
    </summary>
    
    
      <category term="Tutorial" scheme="https://blog.xinoassassin.me/tags/Tutorial/"/>
    
  </entry>
  
  <entry>
    <title>PC 硬件史话（三）</title>
    <link href="https://blog.xinoassassin.me/2019/05/pc-hardware-history-3/"/>
    <id>https://blog.xinoassassin.me/2019/05/pc-hardware-history-3/</id>
    <published>2019-05-30T06:34:06.000Z</published>
    <updated>2019-06-03T02:38:24.874Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>上回我们说到上世纪七十年代末期，由 Altair 8800 引发的微型计算机普及浪潮以及各种公司各种机型间的大战。让我们继续顺着时间线前行，来到激动人心的八九十年代，首先登场的，便是 IBM PC。</p><h2 id="IBM-Personal-Computer"><a href="#IBM-Personal-Computer" class="headerlink" title="IBM Personal Computer"></a>IBM Personal Computer</h2><p>新兴的个人计算机市场发展之迅猛是大公司们都始料未及的，据统计，1979年 PC 市场的销售额就达到了1.5亿美元，并且这个数字还在以每年超过 40% 的增速发展。如此具有前景的市场很难不吸引大公司们的眼球，随着 IBM 的一批同级别的竞争对手，如惠普和德州仪器等大厂的入场，IBM 也开始了自己的个人计算机设计之路。时任总裁约翰·欧宝和 CEO 法兰克·卡里在公司内部设立了很多有半自主性质的“独立业务单元”以鼓励创新，而后来的 IBM PC 缔造者之一，威廉姆·罗威，被任命为入门级分部的负责人，准备开发一款面向个人的微型计算机。</p><p><img src="/images/william_lowe.jpg" width="30%"></p><h3 id="IBM-5150"><a href="#IBM-5150" class="headerlink" title="IBM 5150"></a>IBM 5150</h3><p>首先，他们展开了市场调查。经销商们普遍回应对 IBM 的 PC 十分有兴趣，但是新的产品不能以 IBM 以前的那种风格来设计、售卖，他们要求 IBM 必须使用标准的元器件，以方便维修服务。鉴于 Apple Ⅱ 的畅销，就算是经销商们不喜欢苹果公司的做法，他们也没有办法。然而他们更加不指望 IBM 会改变以往的风格和官僚作风，去推出一款符合市场需求的微型计算机。</p><p>急于推出自家微机打入市场的 IBM 想到了走 OEM 的路子，正巧雅达利有成为 OEM 制造商的意愿。于是，罗威在 1980 年七月份的一次高层会议上提议用基于雅达利 800 的平台来打造第一款 PC，同时还提议收购雅达利，原因是“因为在 IBM 的文化基因中，我们没法做成这件事”。CEO 卡里也承认了罗威对于企业文化的描述，在当时的 IBM，需要四年和 300 人的团队才能打造出一款个人电脑。作为收购雅达利的替代方案，高层给予了罗威尝试的机会——允许他组建一支独立的开发团队，而罗威保证，在不用 IBM 传统方式的情况下，他可以在 30 天内给出原型，在一年的期限中做出成品。</p><p>当时世人都不相信 IBM 可以如此之快的推出自家的 PC，甚至于有分析师说：“要让 IBM 推出一台个人电脑就好像要教会一直大象跳踢踏舞”。事实上，在 1980 年八月份的展示中，他给出的原型机还仅仅处于勉强能运行起来的阶段。不过，雄心勃勃的罗威在当时已经制定了一份详细的商业计划，其中对于新型计算机的描述是一个开放式架构，可以采用非专有的软硬件，同时在实体店中售卖，而这些全部有违于 IBM 的传统。</p><p>不过高层却十分看好罗威的计划，在总裁欧宝的强力支持下，罗威组建了一个仅有 12 人组成的独立团队，这其中就有 PC 之父——唐·埃斯特利奇，当时他刚从一个失败的小型机项目中退出来。唐·埃斯特利奇主动请缨担任团队的领导人物，为了在一年之内端上成品，他们决定采用市场上已经成熟化了的标准方案。到了四月份，整台机器的硬件配置被确定了下来。在核心的 CPU 选择上，他们采用了已经在 IBM 别的产品线上使用过的，有着不错软件适配基础的 Intel 8088，而不是等自家更强的新处理器完工。另外，他们在硬件上还预留了可以让用户自行扩展的接口。而在操作系统方面，他们与当时并不知名的 Microsoft 合作，将 DOS 搬上了自家的 PC 平台，命名为 PC DOS，同时新产品也兼容流行的 CP/M 系统，意味着上市即有非常多的软件不用重新改写编译即可在 IBM PC 上面运行。</p><p><img src="/images/don_estridge_and_steve_jobs.jpg" width="50%"></p><p>经过一年的紧张开发，1981 年 8 月 12 日，IBM 正式发售了 Personal Computer，型号为 5150，定价 1565 美元，包含主机和键盘，可选配显示器和打印机。他们还请来了默剧大师卓别林的经典角色——小流浪汉，来主演一系列的电视广告。</p><p><img src="/images/ibm5150.jpg" width="50%"></p><iframe width="896" height="672" src="https://www.youtube.com/embed/kQT_YCBb9ao" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>得益于优秀的设计和侧重“个人化”的广告宣传，IBM PC 一上市就取得了巨大的成功，到 1984 年，系列已经占据了整个 PC 市场三分之一的份额。IBM PC 接过了由前辈传过来的计算机普及化大旗，引领了这场一直持续到二十一世纪的信息化革命。1982 年年末，《时代》周刊把“年度人物”更改成了“年度机器”，将 IBM 5150 搬到了自己的封面上。</p><p><img src="/images/IBM_5150_on_time_cover.jpg"></p><h3 id="成为行业标准"><a href="#成为行业标准" class="headerlink" title="成为行业标准"></a>成为行业标准</h3><p>成功的不仅仅是 IBM 5150 这么一款机型那么简单，它如同当初罗威计划的那样，使用了开放的硬件架构，还预留了可扩展接口。团队还将 PC 的设计公知于众，每台 PC 都附带了一本技术参考手册。标准、通用的组件和预留的可扩展接口使得用户可以自行安装相兼容配件，比如可以把内存从 64k 扩展为 128k 等等。开放标准也使得 PC 拥有了一大批为其制造配件的厂商，大大促进了微机行业的整体发展。</p><p>硬件上用了通用组件，而细节又都公布在外，这不是给“山寨”留了非常大的口子吗？很快，其他的一些公司开始模仿 IBM PC 推出自家的 PC 产品，这其中大部分都是直接复刻了 PC 的设计。不过尽管 IBM 几乎公开了全部细节，但唯独保留了 PC 的一个基础软件模块——基本输入输出系统也就是 BIOS——没有完全公开。这难不倒人，一些大厂通过逆向工程分析并成功的以不侵犯著作权的形式重新实现了与 IBM PC 兼容的 BIOS，随后顺利推出了自己的 PC，这其中大部分都与 IBM 的 PC 相兼容，也就是说在 IBM PC 上能够运行的程序都可以直接拿来跑，可以用在 IBM PC 上的配件组件可以直接插在自家的机器上用，中文的兼容机最早可能就是指代这些与 IBM PC 相兼容的机型。随着 IBM PC 的热卖以及市场上与其相似的机型日益增多，IBM PC 开始成为个人电脑行业的事实标准，兼容这个标准就可以得到几乎是整个市场的配件以及软件支持，而且并不需要任何的授权费用，何乐而不为呢？</p><p>后来，随着行业不断推出升级的机型，PC 标准也在不断地升级进化，在经历了与苹果的麦金塔（Macintosh）等挑战者的竞争并最终取胜之后，它一直被行业延续使用到了今天，可以说，如果没有当年 PC 研发团队的明智决定，现在我们可能就使用不到如此平价、多种多样的个人计算机设备了。</p><h2 id="Intel-的崛起"><a href="#Intel-的崛起" class="headerlink" title="Intel 的崛起"></a>Intel 的崛起</h2><p>讲完了 PC 标准一统江湖的故事之后，让我们重新把目光转回到我们本系列文章第一章的主角——Intel 的身上。</p><h3 id="从-286-到-386"><a href="#从-286-到-386" class="headerlink" title="从 286 到 386"></a>从 286 到 386</h3><p>1982 年，Intel 发布了 80286，这是一枚在 8086 基础上的改进型处理器，从图中我们可以看到，80286 的外形已经开始靠近我们现在常见的处理器长的那样子了。它仍然是一枚 16 位处理器，但是加入了保护模式（简单来说就是可以保护程序实际内存地址不为人所知），并且完全兼容针对 8086 系列编写的程序，不久之后它被 IBM 采纳用于 PC 的升级型号——IBM PC/AT 上面，随着 PC 市场的火热，它也广销世界。</p><p><img src="/images/intel_80286.jpg" width="30%"></p><p>伴随着计算机行业的飞速发展，内存也在不断变大，但是一枚 16 位（内存寻址总线宽度）的处理器能够直接访问的内存只有 2 的 16 次方字节，也就是 64 KiB 的空间，这大大制约了程序员的发挥，于是一枚基于 x86 架构并且能访问更大的内存空间的 CPU 便应运而生了。</p><p>1985 年，Intel 推出了 80386，在提供 32 位内存寻址能力的基础上保留了对以前处理器的完全兼容，这只是它的一部分新功能，80386 对后世影响更为深远的，便是将首次出现在 80286 中的保护模式进行了升级改造，使处理器能够支持更为现代的多任务操作系统。80386 给现代 x86 处理器打下了基本框架，而之后在 1989 年发布的 80486 将原本外置的缓存和浮点运算单元搬入到 CPU 内部，至此，现代 x86 处理器彻底定型。</p><p><img src="/images/intel_80386.jpg" width="30%"></p><h3 id="爱恨情仇"><a href="#爱恨情仇" class="headerlink" title="爱恨情仇"></a>爱恨情仇</h3><p>前文提到过，x86 指令集的前身本来是 CTC 公司用来充当 8008 的开发费用“支付”给 Intel 的，也就是说 Intel 拥有其所有权。那么为什么至今世界上都还有第二家公司可以设计生产使用 x86 指令集的处理器呢？这还得从本系列文章的第一章最后留下的伏笔说起，那是 Intel 与 IBM、AMD 的两段爱恨纠葛。</p><p>IBM 当年在采用 8088 作为第一代 PC 的 CPU 时，根据当时半导体行业“第二供应商”的行规，向 Intel 施压，要求其与另一家公司合作供货，后者找到 AMD，签下了一份长期合作的协议，还有不少芯片生产厂商同时也获得了 Intel 的授权，所以当时的市场上可以见到来自不同厂商的 80x86 芯片。不过到了 80386 推出的时候，Intel 已经决心将主营业务由生产存储芯片转移到中央处理器的设计生产上面去，为了保护自家的知识产权和盈利，他们不想让别的公司成为 80386 的第二供应商。而 IBM 此时有了自己的小心思，可能是觉得用自家都可以造的 286 比较靠谱，可能是不想让 Intel 独占自己的货源，抑或是别的什么不可说的原因，总之不想用 386，而 Intel 的做法正好给了 IBM 一个不用 386 的借口，于是我们没能见到 386 被率先应用在 PC/XT 的后续机型上。</p><p>那么 386 该卖给谁呢？康柏（就是后来被惠普收购的那个）伸出了橄榄枝，最先与 Intel 合作推出了新的机型，市场反响热烈，很多生产商开始克隆康柏家的新机器。而 Intel 靠着 386 的先进设计和强大性能，一时间风头无两。但是 AMD 不乐意了，几年前签下的长期授权协议就被你这么单方面撕毁了？那么法庭见。现在有的说法是 Intel 将 AMD 状告上法院，有的说是 AMD 为原告，总之这对本是同根生的“兄弟”走上了法庭，这场官司一直打到 1990 年以 AMD 的胜利而告终。期间 AMD 也没闲着，逆向完了 386，在 1991 年的时候就推出了自家 100% 克隆出来的 Am386，以低廉的价格和比原版更高的主频打下了不少市场份额。</p><p><img src="/images/am386.jpg" width="30%"></p><p>不过这都没有妨碍 Intel 在 1992 年的时候成为世界范围内半导体行业排行第一的领军者，不幸的是，创始人之一的罗伯特·诺伊斯没能等到如同他儿子一般的公司登顶的那一天。1990 年 6 月 3 日，诺伊斯因为心脏病发作去世，享年 62 岁。</p><h3 id="Intel-Inside"><a href="#Intel-Inside" class="headerlink" title="Intel Inside"></a>Intel Inside</h3><p>就在人们纷纷认定 Intel 下一代的 CPU 会被命名为 80586 之时，Intel 却在 1993 年 3 月 22 日发布了全新的奔腾（Pentium）处理器。这个新造出来的单词由希腊语中的五”penta”与拉丁语中用于命名元素的词尾”ium”组成。奔腾处理器是 Intel 首次用商标命名自家的处理器，从此，Intel 家的处理器受到了商标权的保护。</p><p>奔腾带来的不止是新的名字，还有新的架构。在被内部命名为“P5”的微架构中，Intel 首次引入了超标量体系，简单说来就是可以使处理器内部的多个执行单元并行化执行指令，提升效率；另一个重大改变发生在 486 转移进处理器内部的高速缓存上，从原先的通用（可以同时存放指令和数据）缓存分成了专用缓存，一半存指令，一半存数据，这种缓存设计至今仍然被保留着。</p><p><img src="/images/L1_cache_2_parts.png" width="40%"></p><p>同时，Intel 开始大力推进品牌宣传，那段由五个音符组成的短旋律搭配上”Intel Inside”成为了 Intel 后来用了二十多年的经典宣传组合，深入人心。</p><iframe width="800" height="450" src="https://www.youtube.com/embed/cW8LLhHq9_c" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h3 id="Wintel"><a href="#Wintel" class="headerlink" title="Wintel"></a>Wintel</h3><p>上世纪九十年代中期，Intel 俨然已经成为了 PC 行业的领头羊，由它参与主导制定了多种业界标准，比如用到今天的 USB 就是典型的例子。那么为什么 IBM 没能保持住自己在 PC 市场中的标准制定者的地位呢？让我们把时间倒回到八十年代。</p><p>上文提到，PC 标准是根据 IBM PC 来的，但它更是一种开放标准，想要以一己之力控制一个有数百家企业参与的开放标准，是一种妄想，而 IBM，正好就是这个做白日梦的人。1987 年，IBM 推出了 PS/2 系列机型，其中使用的扩展总线为 IBM 新设计并专有的 MSA 总线，这与市面上已经大量存在的 ISA 卡不兼容。而数量众多的制造商也不愿意使用新的 MSA 标准，首先，用新的总线制造扩展卡要向 IBM 缴纳一笔专利使用费，这与之前 ISA 总线的开放态度截然相反；其次，新的卡只能用在新的 IBM PS/2 系列机型上面，无法与市场主流所相容。所以最终妄想通过新机型来重获 PC 标准主导权的 IBM 并没有得逞，反而逐渐被时代所抛弃。</p><p><img src="/images/creative_sound_card_ISA.jpg" width="40%"></p><p>但是业界还是需要一个领导者，需要有人出来振臂一呼建立规范行业标准，这个位置，由全面占有 PC 处理器市场的 Intel 来坐，最为合适不过了。</p><p>Intel 也当仁不让，1992 年，它开始将自家的 PCI 标准随着处理器一起推向市场，同时联合 PC 市场中几个占有率比较高的厂商，成立了 PCI-SIG 联盟，以开放共赢的态度推广 PCI 标准，最终 PCI 成功取代了之前的 ISA 等总线，成为了行业通用标准，甚至连使用 IBM PowerPC 架构的苹果麦金塔系列电脑都开始使用它。而后来的 USB 也是相似的发展历程：Intel 联合了许多业界巨头一起制定标准，并且不收取授权费用，而也正是因为这些原因，USB 在九十年代与 IEEE 1394 的战争中获胜，一直沿用到了今天。</p><p>而另一边的软件行业，微软的 Windows 逐渐占据了桌面端操作系统的领先地位。不出乎意料的，两个行业巨头走到了一起，Wintel 联盟顺利成为了整个 PC 行业的主导者，一直到二十年后的今天，仍然没有人能够撼动这个地位。一台使用着 Intel 的 CPU 和微软的 Windows 操作系统的个人计算机，就是人们口中最常说的电脑。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>PC 已经统治了人们的桌面电脑，CPU 行业也被 Intel 所把持着，但对于游戏玩家而言最为重要的显卡，我们一点都没有涉及到。事实上，在九十年代初期，桌面端的图形显示也就是刚刚才起步的样子，下一章，我们将把重点转向显卡领域，感受一下那些经典的老游戏们和在它们背后工作着的老显卡们。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h2&gt;&lt;p&gt;上回我们说到上世纪七十年代末期，由 Altair 8800 引发的微型计算机普及浪潮以及各种公司各种机型间的大战。让我们继续顺着时间线前行，
      
    
    </summary>
    
    
      <category term="Hardware-History" scheme="https://blog.xinoassassin.me/tags/Hardware-History/"/>
    
  </entry>
  
  <entry>
    <title>PC 硬件史话（二）</title>
    <link href="https://blog.xinoassassin.me/2019/03/pc-hardware-history-2/"/>
    <id>https://blog.xinoassassin.me/2019/03/pc-hardware-history-2/</id>
    <published>2019-03-31T14:55:23.000Z</published>
    <updated>2019-05-30T07:45:42.696Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h2><p>这期史话笔者将视点从 CPU 这个单一元件转移开，来讲讲 PC 标准出现前的那些故事。</p><h2 id="DEC-与小型机"><a href="#DEC-与小型机" class="headerlink" title="DEC 与小型机"></a>DEC 与小型机</h2><p>Minicomputer，中文中多称为小型机，用今天的眼光来看，小型机其实并不小，大多数都还是有个立柜那么大。不过在微型计算机出现之前，小型机占据了计算机市场的大半江山，而要说起小型机，不得不提的就是影响了整个计算机历史的 PDP 系列和它背后的创造者—— DEC 公司。</p><h3 id="从-TX-0-到-PDP-1"><a href="#从-TX-0-到-PDP-1" class="headerlink" title="从 TX-0 到 PDP-1"></a>从 TX-0 到 PDP-1</h3><p>让我们把时间倒回到上世纪四五十年代，现代计算机刚诞生不久的时候。那时的计算机动辄几个书柜的大小，更大的可能占据几个房间，并且造价普遍十分昂贵。而从六十年代开始，随着晶体管和集成电路的大规模应用，计算机开始了小型化之路。首先出现的，是 1956 年由麻省理工学院林肯实验室<em>（MIT Lincoln Laboratory）</em>研发出的首台全晶体管计算机—— TX-0，这台计算机不久之后被 MIT “借走”拿去当教学仪器了。</p><p><img src="/images/tx-0.jpg" width="40%"></p><p style="text-align: center;">TX-0</p><p>随后，两名 TX-0 的工程师肯·奥尔森（Ken Olsen） 和 Harlan Anderson 在 MIT 注意到了一个奇怪的现象：明明学院里有同样提供给学生用并且更快的 IBM 的大型计算机，但学生就是喜欢在 TX-0 那儿排长长的队伍来尝试一下它。思索之后，他们认为小型计算机是有市场前景的，并且不是所有人都需要大型机那么强的性能，对于某些特定用途，低成本的解决方案就可以满足需求了；还有些用户往往更在意机器的图形输出或是实时可操作性而非机器的性能。</p><p>于是在 1957 年，TX-2 项目遇到严重困难之后，他们便离开了实验室，想用自己的理念拉到投资来推出产品。然而当时业界并不景气，小公司不断成立又破产，而诸如 RCA 和通用电气之类的大公司在计算机市场也讨不到好处。他们千辛万苦才拉到美国研究发展公司<em>（American Research and Development Corporation）</em>公司的投资，不过投资人 Georges Doriot 出于对市场的担心，要求他们变更原来的商业计划，把重心少放在计算机业务上一点，甚至还要求他们把公司的名字从原来的「数字计算机公司<em>（Digital Computer Corporation）</em>」改成了「数字装备公司<em>（Digital Equipment Corporation）</em>」（后文简称 DEC）。</p><p>没有办法，公司开头只能听投资人的，DEC 开始生产名为「数字实验室模块」的系列产品，这是一种集成了电子元件和晶体管的电路板，可以用来组建计算机。结果推出之后还挺受其他计算机公司欢迎的，他们买来组建测试自己系统的设备，在不景气的五十年代末期，这个产品线让刚成立的 DEC 开始盈利了。</p><p><img src="/images/dec-digital-laboratory-module-hp-computerhistory.jpg" alt="DEC Digital Laboratory Modules"></p><p style="text-align: center;">数字实验室模块</p><p>有了成功的产品线之后，DEC 开始将重心重新转回他们最初想做的小型机上。很快，在 1959 年末，采用新设计的计算机诞生了，同样为了规避风险，新的计算机的命名避开了 Computer 一词，新造了「可编程数据处理器<em>（Programmed Data Processor）</em>」这样一个有些拗口的名词。新的机器是系列第一台，即为 PDP-1，比起它需要占用半个房间的祖先 TX-0 来说，它小了很多，而性能却更强。它还拥有一块配套的 CRT 显示器，具有高速显示点阵的能力，用特殊的指令就可以让上面显示图片，这也是最早具有图形显示能力的机型之一。后来在 1961 年 9 月，DEC 向 MIT 捐赠了一台 PDP-1，就摆在 TX-0 的旁边。</p><p>PDP-1 的特殊意义不仅仅在于它的小型化上，更在于更深远的文化层面上。这款机型不但推动了黑客文化的发展，还孕育出了最早的电脑游戏——《太空大战<em>（Spacewar!）</em>》。对于软件领域来说，它更是意义非凡——一系列直到如今我们都仍在使用的软件类型的开山鼻祖就是在 PDP-1 上开发运行的，比如最早的文本编辑器（Notepad 记事本类），最早的文字处理器（文字排版类软件），最早的可交互式调试工具和最早可稳定运行的国际象棋程序等。</p><p><img src="/images/Steve_Russell_and_PDP-1.png" alt="PDP-1"></p><p style="text-align: center;">计算机历史博物馆中的 PDP-1 和《太空大战》的创造者史蒂夫·拉塞尔</p><h3 id="PDP-8-和-PDP-11"><a href="#PDP-8-和-PDP-11" class="headerlink" title="PDP-8 和 PDP-11"></a>PDP-8 和 PDP-11</h3><p>在 PDP-1 推出之后 DEC 没有停歇，用今天的话来说就是疯狂刷机型，1960 年 PDP-3，1962年 PDP-4，1963 年 PDP-5，1964 年 PDP-7。这其中有的销售不佳，如 PDP-4 就非常惨淡，而 PDP-6 项目则直接因为市场反映不佳而直接搁浅；但继续走小型化之路的 PDP-5 却非常受市场欢迎。于是，秉承着 PDP-5 的理念，在此基础上进行大幅度改进的 PDP-8 被刷出来了。</p><p><img src="/images/pdp-8.jpg" alt="pdp-8"></p><p style="text-align: center;">PDP-8</p><p>1965 年 3 月 22 日，PDP-8 发布，这是一台可以放在桌上使用的小型机，比起它的前辈们，在性能上可能有所不足，但是它足够“小”，而且更便宜：它标价 18500 美元，是首台售价低于两万美元的小型机，后续的 PDP-8/S 甚至卖到了一万美元之下，这在当时的市场如同一颗价格炸弹一般。而市场的反映也证明了人们对它的喜爱：PDP-8 系列产品一共卖出去了 30 万台，直接推动了 DEC 在上世纪六十年代中后期到七十年代中期称霸小型机市场。</p><p>之后在 1970 年，DEC 推出了 PDP 系列中销量最高的机型——PDP-11，这同样也是一台无论在硬件还是软件方面都对后世有着深远影响的机器：硬件方面，PDP-11 的架构设计影响了整个后七十年代的微处理器的设计，包括 Intel 的 x86 系列处理器和摩托罗拉那著名的 68k 系列处理器；而在软件上，今天互联网世界的基石之一——Unix 系统的首次正式出现，就是在 PDP-11 上面；还有后来流行的 CP/M 及其后继者 DOS 系统等，均受到了 PDP-11 原生系统的启发。正是因为 PDP-11 优秀的、满足时代需求并有些超前的设计，使得 PDP-11 从 1970 年问世一直卖到了九十年代，总共销售六十多万台，被不少评论家誉为“最受欢迎的小型机”，比尔·盖茨曾在他的简历里着重提到过有 PDP-11 的编程经验。</p><p><img src="/images/PDP-11.jpg" alt="PDP-11"></p><p style="text-align: center;">PDP-11</p><h3 id="DEC-与今世"><a href="#DEC-与今世" class="headerlink" title="DEC 与今世"></a>DEC 与今世</h3><p>说到这里，让我们回头看看 DEC 创始人在 TX-0 前做出的思考，他们对于计算机小型化趋势的判断是多么的精准，而除了这点之外，DEC 还对今世有着非常重大的间接贡献，比如：</p><ul><li>与 C 语言的渊源<br>Unix 最早是用 PDP-7 的汇编语言写成的（当时还没有一个正式名字），为了移植到 PDP-11 上面，核心开发人员不断开发改进新的编程语言，而 C 语言就是这一阶段性完成产物，直到今天 C 语言标准中仍残留有 PDP-11 指令的痕迹。</li><li>与 Windows NT 的渊源<br>在 PDP 系列之后，DEC 继续推出了 VAX 系列，他们将其称之为超级小型机（Superminicomputer）。VAX 系列上运行的系统是重新设计编写的 VMS，其核心设计师戴夫·卡特勒（Dave Cutler）后来被微软招入麾下并领导了 Windows NT 的开发，他把 VMS 的不少理念带入到了 NT 上，甚至后来有说法称 Windows NT 是 VMS 的重新改进版本，而 NT 内核也一直被微软沿用至今。值得一提的是，戴夫·卡特勒后来还领导开发了 Azure 平台，再后来设计了 Xbox One 的系统架构。</li></ul><p><img src="/images/VAX-11-750.jpg" width="60%"></p><h3 id="巅峰与衰亡"><a href="#巅峰与衰亡" class="headerlink" title="巅峰与衰亡"></a>巅峰与衰亡</h3><p>不过有句话说的好：“王权没有永恒”，这句话同样可以套用在 DEC 身上。回首上一篇文章，PDP-11 推出之后不久，Intel 的 8008 就登上了舞台，单片式微处理器技术的成熟使得计算机行业掀起了一波更加汹涌的微型（Micro）化浪潮，其结果直接导致了微型计算机（Microcomputer），也就是我们现在使用的这代计算机的成熟和普及。而 DEC 作为小型化的先锋，却抗拒着新的浪潮。</p><p>1974 年，公司的研发组已经证明了微机的可行性，甚至给出了两台原型机，然而奥尔森却选择中断了这项企划。1977 年，DEC 又同样拒绝了开发个人电脑的提案，奥尔森甚至说「个人没有理由在家里放台计算机<em>（There is no reason for any individual to have a computer in his home.）</em>（后来他澄清他说的 Computer 指代的不是现代意义上的 PC）」。</p><p>历史证明了 DEC 选择了一条错误的道路。八十年代初期，在看到 IBM PC 大获成功之后，他们才迟迟推出自家类似的系统，但 PC 业界最经典的定律已经开始生效了——不兼容就会死。DEC 的新品不兼容 IBM PC 标准，没办法直接运行当时需求最猛的电子表格软件 Lotus 1-2-3，他们的新系列叫好不叫座，这也为日后 DEC 的衰败埋下了伏笔。</p><p>八十年代中期，PDP-11 以及后继者 VAX 系列的畅销将 DEC 带上了巅峰，市值超过 2 亿美元，拥有十万雇员，是计算机业界仅次于 IBM 的巨擘，甚至可以撼动它的位置。不过巅峰之后便是下坡路，微机市场打不过 PC，小型机市场也开始被新入场的对手蚕食，管理层昏招频出，大量资金竹篮打水一场空，而原有的不少合作伙伴纷纷离去。</p><p>九十年代开始，DEC 已经尽显颓势，经历了各种分拆之后的公司最终于 1998 年 6 月份被当时业界最牛的康柏（Compaq）收购了。</p><h2 id="IBM-PC-出现前的洪荒年代"><a href="#IBM-PC-出现前的洪荒年代" class="headerlink" title="IBM PC 出现前的洪荒年代"></a>IBM PC 出现前的洪荒年代</h2><p>愈演愈烈的微型化革命年代里，可谓是群雄四起。1972 年末，一家法国公司用 Intel 8008 为核心开发出了一款计算机，并用了 “Micro-ordinateur” 作为它的注册商标，在英语中，这个词等价于 Microcomputer。不过发明这个词的人并不是他们，而是大名鼎鼎的艾萨克·阿西莫夫（Isaac Asimov），他在 1956 年的短篇小说 <em>The Dying Night</em> 就已经使用了这个词。</p><p>Intel 8008 似乎特别受欢迎，早期的微机大多采用了 8008 作为他们机型的中央处理器。1974 年 4 月，Intel 发布了 8008 的加强版——8080。就是这枚处理器，真正拉开了微机普及的序幕。</p><h3 id="Altair-8800"><a href="#Altair-8800" class="headerlink" title="Altair 8800"></a>Altair 8800</h3><p>现在一般认为的首台商业成功的微型计算机就是 MITS 公司在 1974 年出品的 Altair 8800，而且这是 MITS 转型做计算机之后的第一个产品，在这之前 MITS 的主营产品是计算器。1972 年，由于 TI 的强势介入，计算器市场不好混了，MITS 的老板艾德·罗伯茨（Ed Roberts）决定转型去做计算机。1974 年他选定了当时刚发布不久的 Intel 8080 作为中央处理器，不过因为 8080 的官方定价略高，决心做平价计算机的罗伯茨跑去跟 Intel 砍价，他有着多年的 OEM 采购经验，谈价很厉害；而 Intel 那时候主营业务还是存储芯片，不懂小批量微处理器的定价。所以最终罗伯茨成功地把单片价格从 360 美元谈到了 75 美元。</p><p>十月份，他们完成了第一台原型机，并快递给了《大众电子<em>（Popular Electronics)</em>》杂志社，结果不巧的是，他们撞上了快递公司的罢工潮，杂志社并没有收到这台原型机。幸好，他们提前联系的杂志编辑手上已经有了不少这台机器的照片，于是在当年年末出版的杂志封面上，Altair 8800 正式登场了，这是一台可扩展的实用微型计算机，整台机器只需 439 美元！<br><img src="/images/Popular_Electronics_Cover_Jan_1975.jpg" alt="Popular_Electronics_Cover_Jan_1975"></p><p>七十年代初，计算器和电子游戏的普及让大众认知了计算机的威力，而数字化产品也吸引着越来越多的电子爱好者。于是这么一台平价但是实用，而且扩展性还不赖的机器一上市就火了。这是罗伯茨自己也没想到的事情，原本他预想能卖 800 台已经很不错了，结果一个月内他们就收到了一千份订单，五月末的时候这个数字已经变成了 2500 台，到了八月，这个数字又翻了一番，还有不少订单是直接买组装好的机器。</p><p>而在 Altair 8800 身上最出名的故事可能已经为很多人所熟知了：我们亲爱的比尔·盖茨和他的好友保罗·艾伦为它开发了一套 BASIC 语言解译器，并察觉到了软件行业存在的巨大机遇，随后便创立了 Micro-Soft。<br><img src="/images/altair-8800.jpg" alt="img"></p><p>在 Altair 8800 之后，许多公司察觉到了新的商机，于是乎类似的微型计算机如雨后春笋般开始出现，它们大多采用一块 8bit 的处理器比如 Intel 的 8080 或者 Zilog 的 Z80，采用了兼容 Altair 8800 的 S-100 总线，运行着 CP/M 之类的操作系统。在这波创业大潮中，就有苹果电脑公司，他们的 Apple II 获得了巨大的成功。也是摆这股潮流所赐，越来越多小公司也能用得起计算机来做数据库管理、会计还有文字排版之类的活。</p><p><img src="/images/Apple_II.jpg" width="60%"></p><p>不过最终使得微机走入千家万户的，还是有请我们的主角——PC。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>所谓合久必分，分久必合，微型计算机野蛮生长了足够长的时间了，是时候该有人出来一统江湖了！</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://www.computerhistory.org/pdp-1" target="_blank" rel="noopener">PDP-1 Restoration Project</a></li><li><a href="http://www.computer-history.info/Page4.dir/pages/PDP.1.dir/index.html" target="_blank" rel="noopener">The PDP-1</a></li><li><a href="https://www.bell-labs.com/usr/dmr/www/chist.html" target="_blank" rel="noopener">The Development of the C Language</a></li><li><a href="https://xueqiu.com/3993902801/83078596" target="_blank" rel="noopener">DEC创始人、小型机之父：肯·奥尔森</a></li><li><a href="https://www.computerhistory.org/revolution/minicomputers/11/331" target="_blank" rel="noopener">DEC’s Blockbuster: The PDP-8 - CHM Revolution</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h2&gt;&lt;p&gt;这期史话笔者将视点从 CPU 这个单一元件转移开，来讲讲 PC 标准出现前的那些故事。&lt;/p&gt;
&lt;h2 id=&quot;DEC-与小型机&quot;&gt;&lt;a h
      
    
    </summary>
    
    
      <category term="Hardware History" scheme="https://blog.xinoassassin.me/tags/Hardware-History/"/>
    
  </entry>
  
  <entry>
    <title>我的 Tools 文件夹中都有什么</title>
    <link href="https://blog.xinoassassin.me/2019/03/what-my-tools-folder-contains/"/>
    <id>https://blog.xinoassassin.me/2019/03/what-my-tools-folder-contains/</id>
    <published>2019-03-23T07:59:06.000Z</published>
    <updated>2019-05-30T07:45:42.696Z</updated>
    
    <content type="html"><![CDATA[<p>写点白开水文，这次介绍一下我存续最久的工具目录中都有些啥，按字母排序</p><h2 id="AcDown"><a href="#AcDown" class="headerlink" title="AcDown"></a><a href="https://archive.codeplex.com/?p=acdown" target="_blank" rel="noopener">AcDown</a></h2><p>充满时代感的名字，早已经没有后续更新，作者 <a href="https://weibo.com/kaedei" target="_blank" rel="noopener">Kaedei</a> 后来去做了弹弹Play</p><h2 id="Aegisub"><a href="#Aegisub" class="headerlink" title="Aegisub"></a><a href="http://www.aegisub.org/" target="_blank" rel="noopener">Aegisub</a></h2><p>老牌的字幕打轴制作软件</p><h2 id="AIDA64"><a href="#AIDA64" class="headerlink" title="AIDA64"></a><a href="https://www.aida64.com/" target="_blank" rel="noopener">AIDA64</a></h2><p>老牌的 PC 整体检测软件</p><h2 id="aMule"><a href="#aMule" class="headerlink" title="aMule"></a><a href="http://www.amule.org" target="_blank" rel="noopener">aMule</a></h2><p>开源 ED2K 协议下载器<br>其实国内的 ED2K 网络并没彻底死，还是有人在用的</p><h2 id="aria2"><a href="#aria2" class="headerlink" title="aria2"></a><a href="https://aria2.github.io/" target="_blank" rel="noopener">aria2</a></h2><p>全平台命令行下载器，配合图形化前端食用更佳</p><h2 id="AS-SSD-Benchmark"><a href="#AS-SSD-Benchmark" class="headerlink" title="AS SSD Benchmark"></a><a href="https://www.alex-is.de" target="_blank" rel="noopener">AS SSD Benchmark</a></h2><p>SSD 跑分软件</p><h2 id="BDinfo"><a href="#BDinfo" class="headerlink" title="BDinfo"></a><a href="https://www.videohelp.com/software/BDInfo" target="_blank" rel="noopener">BDinfo</a></h2><p>BD 原盘信息查看工具</p><h2 id="BIND"><a href="#BIND" class="headerlink" title="BIND"></a><a href="https://www.isc.org/downloads/bind/" target="_blank" rel="noopener">BIND</a></h2><p>一套关于 DNS 的工具集，其中我常用 dig</p><h2 id="CascView"><a href="#CascView" class="headerlink" title="CascView"></a><a href="http://www.zezula.net/en/casc/main.html" target="_blank" rel="noopener">CascView</a></h2><p>暴雪目前常用的 .casc 格式文件查看器</p><h2 id="Cinebench"><a href="#Cinebench" class="headerlink" title="Cinebench"></a><a href="https://www.maxon.net/en/products/cinebench-r20-overview/" target="_blank" rel="noopener">Cinebench</a></h2><p>跑分</p><h2 id="Cisco-TFTP-Server"><a href="#Cisco-TFTP-Server" class="headerlink" title="Cisco TFTP Server"></a>Cisco TFTP Server</h2><p>思科出品的 TFTP 服务器</p><h2 id="CPU-Z"><a href="#CPU-Z" class="headerlink" title="CPU-Z"></a><a href="https://www.cpuid.com/softwares/cpu-z.html" target="_blank" rel="noopener">CPU-Z</a></h2><p>老牌 CPU 检测工具</p><h2 id="Crass"><a href="#Crass" class="headerlink" title="Crass"></a><a href="http://galcrass.blog124.fc2blog.us/" target="_blank" rel="noopener">Crass</a></h2><p>痴汉公贼开发的通用 GALGAME 资源提取器，已停止更新</p><h2 id="CriPackTools"><a href="#CriPackTools" class="headerlink" title="CriPackTools"></a><a href="https://github.com/esperknight/CriPakTools" target="_blank" rel="noopener">CriPackTools</a></h2><p>CRIWARE 的 CPK 格式文件解压器</p><h2 id="CrystalDiskInfo"><a href="#CrystalDiskInfo" class="headerlink" title="CrystalDiskInfo"></a><a href="https://crystalmark.info/en/software/crystaldiskinfo/" target="_blank" rel="noopener">CrystalDiskInfo</a></h2><p>老牌硬盘状态查看器，S.M.A.R.T. 查看好手</p><h2 id="CrystalDiskMark"><a href="#CrystalDiskMark" class="headerlink" title="CrystalDiskMark"></a><a href="https://crystalmark.info/en/software/crystaldiskmark/" target="_blank" rel="noopener">CrystalDiskMark</a></h2><p>老牌硬盘跑分工具</p><h2 id="CTF-Tool"><a href="#CTF-Tool" class="headerlink" title="CTF Tool"></a><a href="http://wololo.net/talk/viewtopic.php?t=39000" target="_blank" rel="noopener">CTF Tool</a></h2><p>PSP 主题文件修改器</p><h2 id="Display-Driver-Uninstaller"><a href="#Display-Driver-Uninstaller" class="headerlink" title="Display Driver Uninstaller"></a><a href="https://www.wagnardsoft.com/forums/viewforum.php?f=5" target="_blank" rel="noopener">Display Driver Uninstaller</a></h2><p>Windows 的显卡驱动完整清除工具</p><h2 id="de4dot"><a href="#de4dot" class="headerlink" title="de4dot"></a><a href="https://github.com/0xd4d/de4dot" target="_blank" rel="noopener">de4dot</a></h2><p>.NET 程序反混淆和解包工具</p><h2 id="Detect-It-Easy"><a href="#Detect-It-Easy" class="headerlink" title="Detect It Easy"></a><a href="http://ntinfo.biz/index.html" target="_blank" rel="noopener">Detect It Easy</a></h2><p>程序包识别工具</p><h2 id="DiskGenius"><a href="#DiskGenius" class="headerlink" title="DiskGenius"></a><a href="http://www.diskgenius.cn/" target="_blank" rel="noopener">DiskGenius</a></h2><p>磁盘操作工具，该有的都有，不该有的也有</p><h2 id="Dism"><a href="#Dism" class="headerlink" title="Dism++"></a><a href="https://www.chuyu.me/zh-Hans/index.html" target="_blank" rel="noopener">Dism++</a></h2><p>原本是一个类似 Dism 前端的工具，现在有了很多其他实用功能</p><h2 id="DXVA-Checker"><a href="#DXVA-Checker" class="headerlink" title="DXVA Checker"></a><a href="https://bluesky23.yukishigure.com/en/DXVAChecker.html" target="_blank" rel="noopener">DXVA Checker</a></h2><p>DXVA 的检测工具</p><h2 id="Everything"><a href="#Everything" class="headerlink" title="Everything"></a><a href="https://www.voidtools.com" target="_blank" rel="noopener">Everything</a></h2><p>文件搜索器</p><h2 id="FastCopy"><a href="#FastCopy" class="headerlink" title="FastCopy"></a><a href="https://fastcopy.jp" target="_blank" rel="noopener">FastCopy</a></h2><p>文件拷贝器</p><h2 id="FFmpeg"><a href="#FFmpeg" class="headerlink" title="FFmpeg"></a><a href="https://ffmpeg.org" target="_blank" rel="noopener">FFmpeg</a></h2><h2 id="FLV-Extract"><a href="#FLV-Extract" class="headerlink" title="FLV Extract"></a><a href="https://www.moitah.net/" target="_blank" rel="noopener">FLV Extract</a></h2><p>FLV 文件的分离小工具</p><h2 id="GCFScape"><a href="#GCFScape" class="headerlink" title="GCFScape"></a><a href="http://nemesis.thewavelength.net/?p=26" target="_blank" rel="noopener">GCFScape</a></h2><p>Valve 的各种包格式查看器</p><h2 id="GPU-Z"><a href="#GPU-Z" class="headerlink" title="GPU-Z"></a><a href="https://www.techpowerup.com/gpuz/" target="_blank" rel="noopener">GPU-Z</a></h2><p>老牌 GPU 检测工具</p><h2 id="HD-Tune-Pro"><a href="#HD-Tune-Pro" class="headerlink" title="HD Tune Pro"></a><a href="https://www.hdtune.com/index.html" target="_blank" rel="noopener">HD Tune Pro</a></h2><p>老牌硬盘测试工具</p><h2 id="HWMonitor"><a href="#HWMonitor" class="headerlink" title="HWMonitor"></a><a href="https://www.cpuid.com/softwares/hwmonitor.html" target="_blank" rel="noopener">HWMonitor</a></h2><p>跟 CPU-Z 同门的硬件状态监视工具</p><h2 id="ILSpy"><a href="#ILSpy" class="headerlink" title="ILSpy"></a><a href="https://github.com/icsharpcode/ILSpy" target="_blank" rel="noopener">ILSpy</a></h2><p>.NET 程序集查看和反编译器</p><h2 id="inSSIDer"><a href="#inSSIDer" class="headerlink" title="inSSIDer"></a><a href="https://www.metageek.com/products/inssider/" target="_blank" rel="noopener">inSSIDer</a></h2><p>WiFi 网络环境查看器</p><h2 id="JSON-C-Class-Generator"><a href="#JSON-C-Class-Generator" class="headerlink" title="JSON C# Class Generator"></a><a href="http://www.xamasoft.com/json-class-generator/" target="_blank" rel="noopener">JSON C# Class Generator</a></h2><p>根据 JSON 文本生成 C# 类的小工具</p><h2 id="LAV-Filters"><a href="#LAV-Filters" class="headerlink" title="LAV Filters"></a><a href="https://github.com/Nevcairiel/LAVFilters" target="_blank" rel="noopener">LAV Filters</a></h2><p>一组应该是目前最牛逼的视频分离解码器</p><h2 id="libwebp"><a href="#libwebp" class="headerlink" title="libwebp"></a><a href="https://developers.google.com/speed/webp/download" target="_blank" rel="noopener">libwebp</a></h2><p>WebP 格式工具集</p><h2 id="Locale-Emulator"><a href="#Locale-Emulator" class="headerlink" title="Locale Emulator"></a><a href="https://pooi.moe/Locale-Emulator/" target="_blank" rel="noopener">Locale Emulator</a></h2><p>Locale 模拟器，作者后来写了 <a href="https://pooi.moe/QuickLook/" target="_blank" rel="noopener">QuickLook</a></p><h2 id="MadVR"><a href="#MadVR" class="headerlink" title="MadVR"></a><a href="http://madvr.com/" target="_blank" rel="noopener">MadVR</a></h2><p>目前最牛逼的视频渲染滤镜</p><h2 id="MD5Tool"><a href="#MD5Tool" class="headerlink" title="MD5Tool"></a><a href="https://github.com/XinoAssassin/md5tool" target="_blank" rel="noopener">MD5Tool</a></h2><p>自己写的 MD5 和 SHA-1 查看小工具</p><h2 id="MediaController"><a href="#MediaController" class="headerlink" title="MediaController"></a><a href="https://github.com/XinoAssassin/MediaController" target="_blank" rel="noopener">MediaController</a></h2><p>自己写的远程音乐播放状态控制器</p><h2 id="MediaInfo"><a href="#MediaInfo" class="headerlink" title="MediaInfo"></a><a href="https://mediaarea.net/en/MediaInfo" target="_blank" rel="noopener">MediaInfo</a></h2><p>媒体文件信息查看器</p><h2 id="MeGUI"><a href="#MeGUI" class="headerlink" title="MeGUI"></a><a href="https://sourceforge.net/projects/megui/" target="_blank" rel="noopener">MeGUI</a></h2><p>一套视频媒体编码工具图形前端</p><h2 id="MKVToolNix"><a href="#MKVToolNix" class="headerlink" title="MKVToolNix"></a><a href="https://mkvtoolnix.download/" target="_blank" rel="noopener">MKVToolNix</a></h2><p>MKV 文件处理工具集</p><h2 id="MonaTiny"><a href="#MonaTiny" class="headerlink" title="MonaTiny"></a><a href="https://sourceforge.net/projects/monaserver/files/MonaTiny/" target="_blank" rel="noopener">MonaTiny</a></h2><p>简易的视频流服务器，支持 RTMP、HTTP(S)、WS 等协议</p><h2 id="Mp3tag"><a href="#Mp3tag" class="headerlink" title="Mp3tag"></a><a href="https://www.mp3tag.de/en/" target="_blank" rel="noopener">Mp3tag</a></h2><p>音频文件元数据工具</p><h2 id="Notepad"><a href="#Notepad" class="headerlink" title="Notepad++"></a><a href="https://notepad-plus-plus.org/" target="_blank" rel="noopener">Notepad++</a></h2><h2 id="Ntlea"><a href="#Ntlea" class="headerlink" title="Ntlea"></a><a href="https://archive.codeplex.com/?p=ntlea" target="_blank" rel="noopener">Ntlea</a></h2><p><a href="https://weibo.com/galstars" target="_blank" rel="noopener">辣个男人</a>写的 Locale 模拟器</p><h2 id="NVIDIA-Inspector"><a href="#NVIDIA-Inspector" class="headerlink" title="NVIDIA Inspector"></a><a href="https://www.techpowerup.com/download/nvidia-inspector/" target="_blank" rel="noopener">NVIDIA Inspector</a></h2><p>N 卡驱动配置文件修改器</p><h2 id="PPSSPP"><a href="#PPSSPP" class="headerlink" title="PPSSPP"></a><a href="https://www.ppsspp.org/" target="_blank" rel="noopener">PPSSPP</a></h2><p>PSP 模拟器</p><h2 id="Privoxy"><a href="#Privoxy" class="headerlink" title="Privoxy"></a><a href="https://www.privoxy.org/" target="_blank" rel="noopener">Privoxy</a></h2><p>Web 代理</p><h2 id="Proxifier"><a href="#Proxifier" class="headerlink" title="Proxifier"></a><a href="https://www.proxifier.com/" target="_blank" rel="noopener">Proxifier</a></h2><p>Proxy Everything</p><h2 id="Putty"><a href="#Putty" class="headerlink" title="Putty"></a><a href="https://www.putty.org/" target="_blank" rel="noopener">Putty</a></h2><h2 id="Rufus"><a href="#Rufus" class="headerlink" title="Rufus"></a><a href="https://rufus.ie/" target="_blank" rel="noopener">Rufus</a></h2><p>目前最好用的 USB 启动介质制作器</p><h2 id="SysinternalsSuite"><a href="#SysinternalsSuite" class="headerlink" title="SysinternalsSuite"></a><a href="https://docs.microsoft.com/en-us/sysinternals/downloads/sysinternals-suite" target="_blank" rel="noopener">SysinternalsSuite</a></h2><p>针对 Windows 系统的工具集</p><h2 id="Universal-Extractor"><a href="#Universal-Extractor" class="headerlink" title="Universal Extractor"></a><a href="https://www.legroom.net/software/uniextract" target="_blank" rel="noopener">Universal Extractor</a></h2><p>从各种压缩包和安装程序中解压提取文件的工具</p><h2 id="UsbEAm-Hosts-Editor"><a href="#UsbEAm-Hosts-Editor" class="headerlink" title="UsbEAm Hosts Editor"></a><a href="https://www.dogfight360.com/blog/475/" target="_blank" rel="noopener">UsbEAm Hosts Editor</a></h2><p>针对各大游戏平台的 Hosts 修改工具</p><h2 id="Valve-Resource-Format"><a href="#Valve-Resource-Format" class="headerlink" title="Valve Resource Format"></a><a href="https://github.com/SteamDatabase/ValveResourceFormat" target="_blank" rel="noopener">Valve Resource Format</a></h2><p>V社各种类型文件的查看、反编译器</p><h2 id="VTFEdit"><a href="#VTFEdit" class="headerlink" title="VTFEdit"></a><a href="http://nemesis.thewavelength.net/index.php?c=238" target="_blank" rel="noopener">VTFEdit</a></h2><p>VTF 文件编辑器</p><h2 id="WinHex"><a href="#WinHex" class="headerlink" title="WinHex"></a><a href="https://www.x-ways.net/winhex/" target="_blank" rel="noopener">WinHex</a></h2><p>居家必备的编辑器</p><h2 id="WinMTR"><a href="#WinMTR" class="headerlink" title="WinMTR"></a><a href="https://sourceforge.net/projects/winmtr/" target="_blank" rel="noopener">WinMTR</a></h2><p>Windows 下的图形化 MTR 工具</p><h2 id="WinSCP"><a href="#WinSCP" class="headerlink" title="WinSCP"></a><a href="https://winscp.net" target="_blank" rel="noopener">WinSCP</a></h2><h2 id="WiX-Toolset"><a href="#WiX-Toolset" class="headerlink" title="WiX Toolset"></a><a href="http://wixtoolset.org/" target="_blank" rel="noopener">WiX Toolset</a></h2><p>针对 Windows 安装包(.msi等格式)的工具集</p><h2 id="WizTree"><a href="#WizTree" class="headerlink" title="WizTree"></a><a href="https://antibody-software.com/web/software/software/wiztree-finds-the-files-and-folders-using-the-most-disk-space-on-your-hard-drive/" target="_blank" rel="noopener">WizTree</a></h2><p>磁盘空间占用可视化查看器</p><h2 id="x264-amp-x265"><a href="#x264-amp-x265" class="headerlink" title="x264 &amp; x265"></a>x264 &amp; x265</h2><p>开源 AVC 和 HEVC 编码器</p><h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><p>还有一些过于硬核的工具没有列出来，诸如 BIOS 修改之类的工具。</p><p><code>&gt;&gt;endl;</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;写点白开水文，这次介绍一下我存续最久的工具目录中都有些啥，按字母排序&lt;/p&gt;
&lt;h2 id=&quot;AcDown&quot;&gt;&lt;a href=&quot;#AcDown&quot; class=&quot;headerlink&quot; title=&quot;AcDown&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://archive.c
      
    
    </summary>
    
    
      <category term="杂" scheme="https://blog.xinoassassin.me/tags/%E6%9D%82/"/>
    
  </entry>
  
  <entry>
    <title>PC 硬件史话</title>
    <link href="https://blog.xinoassassin.me/2019/03/pc-hardware-history-1/"/>
    <id>https://blog.xinoassassin.me/2019/03/pc-hardware-history-1/</id>
    <published>2019-03-04T05:34:00.000Z</published>
    <updated>2019-05-30T07:45:42.696Z</updated>
    
    <content type="html"><![CDATA[<h2 id="成立之初的-Intel-和-AMD"><a href="#成立之初的-Intel-和-AMD" class="headerlink" title="成立之初的 Intel 和 AMD"></a>成立之初的 Intel 和 AMD</h2><h3 id="Intel-篇"><a href="#Intel-篇" class="headerlink" title="Intel 篇"></a>Intel 篇</h3><p>书接上文，NM Electronics，在创立的头个月底改名成 Intel。据称，Intel 这个名字是启发自 <em>int</em>egrated 和 <em>el</em>ectronics 的整合。</p><p><img src="/images/Intel_old_logo.png" width="30%"></p><p>Intel 成立初期的主要业务并不是微处理器的开发与制造，而是瞄准半导体存储器市场，公司的首款产品便是 SRAM（静态随机存取存储器，现多见于 CPU 内部）—— Intel 3101。</p><p><img src="/images/Intel-3101.jpg" width="40%"></p><p>3101 推出于 1969 年，比当时市场上的同类产品快了接近一倍。同年，Intel 还推出了 1101 和 3301 两款产品，前者是创新性地将 MOSFET 工艺运用于存储器制造的产物，后者则是一款只读存储器（<strong>R</strong>ead-<strong>O</strong>nly <strong>M</strong>emory）。虽然 3101 和 1101 这两款产品都颇具创新意义，但是影响并不大。真正使 Intel 开始出名的，是 1970 年发售的 1103——世界上第一款商用的 DRAM（动态随机存取存储器，也就是今天最常见的内存类型）。1103 在 1972 年成为了最为畅销的半导体存储芯片，并成功地在许多应用场合完成了 Intel 原本的设想——取代当时最流行的磁芯存储器（Magnetic-core memory）。</p><h3 id="AMD-篇"><a href="#AMD-篇" class="headerlink" title="AMD 篇"></a>AMD 篇</h3><p>与 Intel 不同的是，AMD 在成立之初原本是仙童半导体和国家半导体（National Semiconductor）第二供货商，专注于制造芯片，并引入了美国军方标准作为质量管理标准。要知道，在早期的计算机工业里，微芯片不可靠的质量是各大客户都极力想避免的问题，所以 AMD 靠这个赢得了一些优势。</p><p>在 1969 年 11 月，AMD 推出了它自己的首款产品：Am9300，一款移位寄存器。之后陆续推出了一系列畅销的元器件。</p><p>在 1971 年，AMD 进入了内存芯片市场，同年公司的销售额就已经达到了四百六十万美元。</p><p>到 1975 年，AMD 一共生产着 212 种产品，其中 49 种是自主研发的。</p><h2 id="4004-与-8008"><a href="#4004-与-8008" class="headerlink" title="4004 与 8008"></a>4004 与 8008</h2><h3 id="Intel-4004"><a href="#Intel-4004" class="headerlink" title="Intel 4004"></a>Intel 4004</h3><p>终于讲到 Intel 的第一颗微处理器（Microprocessor），4004 的故事了。</p><p>1969 年，Busicom，一家日本的计算器公司拿着自己设计的一套由 12 枚 IC 组成的计算器引擎方案找到了刚成立不久的 Intel（其实是 Intel 主动去接触的），想让他们完善并生产这套引擎。然而 Intel 方面给出了一套更加优雅的方案，1971 年初，由 Federico Faggin 领导的开发团队设计出了一套只需要 4 枚芯片就可以取代原来的 12 枚芯片的芯片组，也就是后来的 MCS-4 芯片组，其中的核心便是大名鼎鼎的 4004。</p><p><img src="/images/intel-4004.jpg" width="40%"></p><p>4004 使用了 10 微米的制程，一共集成了约 2300 个晶体管，最高主频为 740 kHz，数据位宽为 4 bit，每秒最多能执行约 92000 条指令。这些参数在当时虽然并不是最强的，但因为它是市场上首款通用可编程处理器，又是全球首款商用单片微处理器，所以就像 1971 年 11 月 15 日 Intel 在 Electronic News 上刊登的广告语说的那样，它在集成电子领域开创了一个新的纪元。</p><p><img src="/images/intel-4004-ad.jpg" width="40%"></p><p>4004 直到 1981 年才停产，期间推出了 4040 作为它的加强版。这里有一段 4004 发布三十五周年纪念会的录像，其中有两位设计师的演讲，感兴趣的朋友可以去看看：<a href="https://www.youtube.com/watch?v=j00AULJLCNo" target="_blank" rel="noopener">Intel 4004 Microprocessor 35th Anniversary</a></p><h3 id="Intel-8008"><a href="#Intel-8008" class="headerlink" title="Intel 8008"></a>Intel 8008</h3><p>8008 与 4004 实际上是两个独立进行的项目，8008 项目开始的时间甚至可能早于 4004。而 8008 背后的故事，则是非常有趣：</p><p>Computer Terminal Corporation (CTC) 是当时刚成立不久的一家设计制造小型桌面终端的公司，1967 年他们推出了一款非常受欢迎的机型：Datapoint 3300。</p><p><img src="/images/DataPoint_3300.jpg" width="40%"></p><p>这款机型虽然卖的不错，然而它的小毛病可是不少，比如发热问题就是其一。为了解决这台机型上存在的问题，CTC 开始考虑采用单片 CPU 的设计来改进内部电路，于是公司掌门人之一的 Roche 找到了罗伯特·诺伊斯，交流了这个想法。诺伊斯觉得这是个绝妙的点子，而且 Intel 有能力做，但是这样子干很蠢：“一台计算机只能卖一块主处理芯片，但是可以卖数百颗存储芯片”。另一个考量则是当时 Intel 的存量客户几乎都是买他们的存储芯片搭配自己研发的处理器，而一旦 Intel 开始卖自家的处理器了，那么它和客户间就可能会形成竞争关系，原本的客户可能会另寻供应商。</p><p>但最终诺伊斯还是在 1970 年初和 CTC 签下了价值 50000 美元的开发合同，不过呢，CTC 同时还找了德州仪器作为它们的备胎。</p><p>接下来的故事就众说纷纭了，英文维基上给出的这个缺少来源的说法是 TI（德州仪器）拿到了 Intel 的早期设计，并做出了样片，但是有许多 bug，被 CTC 给否了。Intel 自己的进度也不顺利，推迟了。结果呢，CTC 那边等不及了，还是用了老而成熟的方案在 1970 年 3 月末推出了改进型新品：Datapoint 2200。这新品都出了，那么自然也就不需要原来计划的配套处理器了，所以 CTC 叫停了代号为 1201 的芯片的研发。</p><p>半年过去了，似乎是注意到了 4004 的成功，有家计算器生产商向 Intel 表达了想把 1201 芯片用在他们家的科学计算器上的想法。正巧隔壁 4004 项目已经完成了，我们的老熟人 Federico Faggin 过来接手了 1201 项目，他们对原来的设计进行了一些小调整。最终在 1971 年的晚些时候，Intel 把完成版的 1201 送到了 CTC 手上。</p><p>结果 CTC 为了推出新的产品，已经不满足于 1201 所提供的性能，于是他们砍掉了这个项目，用 1201 身上的所有知识产权代替五万美金向 Intel 支付了费用。随后 Intel 将这款产品更名为 8008，并在 1972 年 4 月份将它以 $120 的价格放进了自家的产品目录里，他们原本担心的老客户流失问题也没有发生，反而延续了 4004 在商业上的成功。</p><p><img src="/images/Intel_8008.jpg" width="40%"></p><p>与 4004 一样，8008 也是采用的 10 微米制程，集成了约 3500 个晶体管，早期版本主频为 500 kHz，后来升高至 800 kHz。但因为数据位宽为 8 bit，所以实际性能比 4004 还是要高不少。</p><p>8008 最大的意义还是在它的设计上，后来 1974 年 4 月份发布的 8080 延续了它的设计，而 x86 的开创者 8086 则是继承了 8080 的指令集，所以说 8008 是现在所有 x86 CPU 的老祖宗也不为过。</p><h2 id="AMD-的逆向工程"><a href="#AMD-的逆向工程" class="headerlink" title="AMD 的逆向工程"></a>AMD 的逆向工程</h2><p>1974 年，Intel 推出了 8080 微处理器。AMD 此时想进入微处理器的市场，于是他们搞到一块早期的 8080 芯片，对其展开了逆向工程：显微拍照，用照片捣鼓出了原理图和逻辑图，然后研发出了自己的第一款微处理器：Am9080。</p><p><img src="/images/AMD_Am9080.jpg" width="40%"></p><p>Am9080 的制造成本只需要 50 美分，但却以 700 美元一片的价格卖给军用市场。结果不久之后 Intel 就与 AMD 签署了一份协议，AMD 成为了 8080 的授权第二供应商，这使得两家可以联合打入那些不接受单一供货源的市场，这份协议也给后来的故事埋下了伏笔。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>虽然 Intel 研发出的这两款单片型处理器的性能都挺一般的，但还是有不少业界人士和爱好者注意到了这种类型的处理器的远大前景——可以加速计算机的小型化，而事实上，在七十年代中期，已经有几家公司开始尝试用 Intel 的芯片设计制造小型的计算机了。</p><p>下一章，笔者将会把主视角从 CPU 转开，尝试讲述一下 IBM PC 兼容标准诞生的故事。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://newsroom.intel.com/news/intel-at-50-intels-first-product-3101/" target="_blank" rel="noopener">Intel at 50: Intel’s First Product – the 3101</a></li><li><a href="https://newsroom.intel.com/news/intel-50-intels-1101/" target="_blank" rel="noopener">Intel at 50: Intel’s 1101</a></li><li><a href="http://www.mynikko.com/CPU/3101.html" target="_blank" rel="noopener">MyNikko.com 微處理器博物館 - Intel 3101</a></li><li><a href="https://zhuanlan.zhihu.com/p/39804154" target="_blank" rel="noopener">纪念英特尔成立五十周年 篇一 阴差阳错</a></li><li><a href="https://www.intel.com/content/www/us/en/history/museum-story-of-intel-4004.html" target="_blank" rel="noopener">The Story of the Intel® 4004</a></li><li><a href="https://en.wikichip.org/wiki/intel/mcs-8#History" target="_blank" rel="noopener">MCS-8  - Intel - WikiChip</a></li></ol><p>英文维基不作为参考资料列出。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;成立之初的-Intel-和-AMD&quot;&gt;&lt;a href=&quot;#成立之初的-Intel-和-AMD&quot; class=&quot;headerlink&quot; title=&quot;成立之初的 Intel 和 AMD&quot;&gt;&lt;/a&gt;成立之初的 Intel 和 AMD&lt;/h2&gt;&lt;h3 id=&quot;Intel
      
    
    </summary>
    
    
      <category term="Hardware History" scheme="https://blog.xinoassassin.me/tags/Hardware-History/"/>
    
  </entry>
  
  <entry>
    <title>PC 硬件史话——序章</title>
    <link href="https://blog.xinoassassin.me/2019/02/pc-hardware-history-0/"/>
    <id>https://blog.xinoassassin.me/2019/02/pc-hardware-history-0/</id>
    <published>2019-02-26T04:40:00.000Z</published>
    <updated>2019-05-30T07:45:42.696Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>笔者因为从小被父亲的爱好所影响，所以自然而然地喜欢上了 PC 硬件方面的东西。好多年前《微型计算机》杂志上不断有各种 PC 的元件发展史的文章，当时非常爱读这类历史传奇一般的说明文，现在有能力去直接读英文资料了，也就产生了自己写的念头。</p><p>思前想后几个月，我决定还是以比较方便我自己阅读的资料为主，尽量客观的以时间轴的方式来书写这段跨度长达近乎六十年的传奇历史。</p><p>参考的资料主要是以英文维基为主，并辅以各种其他资料来保证准确性和真实性。</p><p>序章里面还要讲讲这一整段传奇故事的大背景。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h3 id="半导体器件的发展"><a href="#半导体器件的发展" class="headerlink" title="半导体器件的发展"></a>半导体器件的发展</h3><p>十九世纪的电学研究开启了第二次工业革命，把人类带入了电气时代。随着材料科技的迅猛进步，半导体的性质逐渐被人们所掌握，这直接导致了在二十世纪初，各种新型电子元件被发明，比如现在大家非常熟悉的二极管、电子管等等。在早期，这些半导体元件的个头都比较大，而随后出现的晶体管，则开启了一场真正意义上的革命。</p><p>晶体管分为两种类型，一种是场效应管（Field-effect Transistor, FET），其概念由 J. E. Lilienfeld 于 1926 年提出，但限于当时的条件，没有能够生产出实际能够工作的器件。而现在普遍认为的第一支晶体管是由贝尔实验室在 1947 年发明的，参与研发的人员有 John Bardeen, Walter Brattain 和 William Shockley。 他们发明的晶体管是与 J. E. Lilienfeld 提出的场效应管不同的双极性结型晶体管（Bipolar Junction Transistor, BJT），也就是我们现在俗称的三极管。</p><p><img src="/images/PNP.png">  <img src="/images/NPN.png"></p><p>由于种种原因，在发明了晶体管之后，Shockley（后文译作肖克利）离开了贝尔实验室。1956 年，他在山景城创办了以他自己名字命名的肖克利半导体实验室（Shockley Semiconductor Laboratory），实验室所在的那片地区后来发展演变成为了举世闻名的硅谷（Silicon Valley）。肖克利实验室招揽了许多有志向研究半导体的年轻科学家与工程师，其中最为著名的便是日后的「八叛逆」: 罗伯特·诺伊斯（Robert Noyce）、高登·摩尔（Gordon Moore）、朱利亚斯·布兰克（Julius Blank）、尤金·克莱尔（Eugene Kleiner）、金·赫尔尼（Jean Hoerni）、杰·拉斯特（Jay Last）、谢尔顿·罗伯茨（Sheldon Roberts）和维克多·格里尼克（Victor Grinich）。</p><p><img src="/images/The_Traitorous_Eight.jpg"></p><h4 id="八叛逆与仙童半导体"><a href="#八叛逆与仙童半导体" class="headerlink" title="八叛逆与仙童半导体"></a>八叛逆与仙童半导体</h4><p>可能是因为肖克利在实验室管理以及个人性格上存在的一些缺陷，八叛逆向肖克利的上级 Arnold Beckman 要求替换掉他在实验室的位置，然而 Arnold Beckman 最终做出的一系列支持肖克利的决定使得八叛逆不得不考虑离开肖克利实验室另寻出路。</p><p>当时半导体器件的主要基底材料是锗，而八叛逆认为硅比锗拥有更好的商业前景，因为相对于储量不高、提炼繁杂的锗，硅可以从沙子中提炼出来，可以有效降低原料成本和生产时间。罗伯特·诺伊斯用慷慨激昂的演讲向仙童摄影器材公司的老板 Sherman Fairchild 展示了他们的愿景，并成功说服了他。随后在 1957 年，他们获得了仙童摄影器材公司的资助，创办了仙童半导体（Fairchild Semiconductor）。仙童半导体在 1958 年成功的以硅为基底开发出了一款在商业上非常成功的晶体管——2N697。随后在 1959 年，八叛逆之一的金·赫尔尼又研发出了新的平面工艺，相对于传统的台面工艺，新的平面工艺无论是在成本还是产品的稳定性上，都有着巨大的进步，这项技术至今仍在半导体制造中扮演着极其重要的角色。</p><p><img src="/images/Fairchild_ad_Electronics-1958-08-15.jpg" width="50%"></p><p>继承了前人的理念之后，在 1958 年 9 月 12 日，德州仪器（Texas Instruments）的 Jack Kilby 成功的研发出了第一块能够工作的集成电路，随后他在 1959 年 2 月 6 日为这项发明申请了专利。半年之后，八叛逆之一的罗伯特·诺伊斯成功独立研发出了另一种不同的集成电路，与 Jack Kilby 不同的是，罗伯特·诺伊斯的集成电路是以硅为基底，并且更加实用。一年之后，诺伊斯又将平面工艺运用到集成电路的制造流程上，这也使得业界更为认可仙童半导体出产的集成电路。仙童半导体在创造了一系列对后世影响深远的研究发明之后俨然已经成为了整个半导体行业的领军者。</p><h3 id="摩尔定律"><a href="#摩尔定律" class="headerlink" title="摩尔定律"></a>摩尔定律</h3><p>1965 年 4 月 8 日，八叛逆之一的高登·摩尔在 Electronics 杂志上发表了名为 <a href="http://hasler.ece.gatech.edu/Published_papers/Technology_overview/gordon_moore_1965_article.pdf" target="_blank" rel="noopener"><em>Cramming more components onto integrated circuits</em></a> 的文章，文中，他基于对行业发展的长久观察和思考后做出了一项具有历史意义的预测：</p><blockquote><p>The complexity for minimum component costs has increased at a rate of roughly a factor of two per year. Certainly over the short term this rate can be expected to continue, if not to increase. Over the longer term, the rate of increase is a bit more uncertain, although there is no reason to believe it will not remain nearly constant for at least 10 years. </p></blockquote><p>这就是半导体行业中著名的”Moore’s Law”的前身，在 1975 年 IEEE（电气电子工程师学会）的一次会议上，摩尔修订了预测的增长率，原本两倍的增长率将在 1980 年之后减半。年内稍晚时候，加州理工学院的 Carver Mead 教授将摩尔的预测总结为”Moore’s Law”。</p><p><img src="/images/transistors-per-microprocessor.png" width="50%"></p><p>摩尔定律事实上只是一条经验定律，但是却延续至今仍旧没有失效，甚至一定程度上在很长一段时间内指引了半导体业界的发展。</p><h3 id="分崩离析与传奇的开始"><a href="#分崩离析与传奇的开始" class="headerlink" title="分崩离析与传奇的开始"></a>分崩离析与传奇的开始</h3><p>让我们把目光重新对准仙童半导体。在六十年代的前五年，仙童半导体的风光一时无两，员工数量从最早的12人发展到了12000人。然而王权没有永恒，这家公司并不会这么一帆风顺下去。1965 年开始，仙童半导体在公司内部管理上开始出现了一些问题，到了 1967 年 7 月，公司已经开始亏损并且领头羊的位置被德州仪器所夺取。1968 年 8 月，罗伯特·诺伊斯、高登·摩尔和 Andrew Grove 一起从仙童半导体离职，创办了 NM Electronics，一年之后，公司更名为 Intel。1969 年，仙童半导体的一群工程师决定离开公司创业，他们找到了 Jerry Sanders 一起合伙，5 月 1 日，Advanced Micro Devices 公司成立。</p><p><img src="/images/The-Roots-of-Silicon-Valley.jpg" width="50%"></p><p>好了，演员已经全数登场，传奇即将上演。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;笔者因为从小被父亲的爱好所影响，所以自然而然地喜欢上了 PC 硬件方面的东西。好多年前《微型计算机》杂志上不断有各种 PC 的元件发展史的文
      
    
    </summary>
    
    
      <category term="Hardware" scheme="https://blog.xinoassassin.me/tags/Hardware/"/>
    
      <category term="Hardware History" scheme="https://blog.xinoassassin.me/tags/Hardware-History/"/>
    
  </entry>
  
  <entry>
    <title>重生娱乐的大逃杀教学</title>
    <link href="https://blog.xinoassassin.me/2019/02/apex-legends/"/>
    <id>https://blog.xinoassassin.me/2019/02/apex-legends/</id>
    <published>2019-02-09T07:23:56.000Z</published>
    <updated>2019-05-30T07:45:42.696Z</updated>
    
    <content type="html"><![CDATA[<p>出乎所有人意料的，在去年 E3 上只露了个脸的 Respawn Entertainment 不声不响地在大年夜公开了以 Titanfall 为背景的大逃杀游戏——Apex Legends，然而并没有 Titanfall 系列中的 Titan 元素，只剩 60 个铁驭在地图上打架，本想着没 Titan 就失去了系列的灵魂，但是在看了某油管人（彩虹社 Gamers 的かなえ了解一下）直播之后马上就去下载了这款游戏，体验之后感觉就是比想象中的好不少，到现在已经打了有十多小时，想写一点简单的感想。</p><h2 id="地图"><a href="#地图" class="headerlink" title="地图"></a>地图</h2><p>目前 APEX Legends 仅有一张地图，名叫 King’s Canyon，简中译为诸王峡谷。不过规模并不大，游戏人数上限只有 60 人，这倒是刚刚好。<br><img src="/images/apex-map.jpg" width="60%"></p><p>地图虽然不大，但是地块类型却不少，沙漠、山谷、平原、湿地、沼泽、高山、峡谷。几个地点的设计也非常的有意思，骷髅镇有一种贫民窟的感觉，而几个军事基地则是很符合背景设定的气质，甚至在游戏开始跳伞时你还可以看到地图外那两只巨大的动物。这是一张非常有 Titanfall 味道的地图，所以也难怪会有人说这是拿了以前的废案做出来的。</p><p><img src="/images/apex-legends-big-animals.jpg" width="60%"></p><p>虽然游戏没有载具系统，但是地图上提供了不少可以快速移动的绳索，还有个传奇的大招就是架设一条所有人都可用的绳索。这里就要夸一下地图的立体设计非常好，有很强的层次感，比如在桥梁河心瀑布一带，因为有着巨大的落差就非常容易出现多队立体交火的情况。</p><h2 id="玩法与手感"><a href="#玩法与手感" class="headerlink" title="玩法与手感"></a>玩法与手感</h2><p>在玩法上重生比 T 组更进一步，在大逃杀游戏中做了八个有不同技能的角色，称为「传奇」，每个传奇有一个被动，一个短 CD 的主动技能和一个充能大招。传奇按照技能特性分为四类，分别是攻击、防御、侦察和支援型。每个小队由三名传奇组成，选人不可重复。</p><p><img src="/images/apex-legends-list.png" width="60%"></p><p>就拿笔者爱用的 Bloodhound 寻血猎犬来说，作为目前唯一的侦察型传奇，他的技能作用就是提供信息，被动就是可以看到视野中地方留下的痕迹，比如这扇门在多少秒前被打开，地上的血迹、残留的空弹壳等等都会显示出来。主动技能是扫描附近有没有敌人，如果有就会高亮透视标出扫描时所在的位置。而大招则是<del>打鸡血</del>视野变灰，而视野内的敌人则会被高亮标黄，同时自己的移动速度变快，地上的血迹将会形成连续的一片供追踪用。</p><p>而其他传奇的技能也非常有特色，比如直布罗陀身为一个防御型传奇，大招却是呼叫轰炸；而全游戏没有提供的烟雾弹则是变成了一个小技能给了班加罗尔；恶灵可以创建远距离传送门；很萌的探路者机器人有着高机动性的勾爪。可能你会觉得这些技能在别的游戏中都已经见过了，但是当这么多的技能进入到一个 60 人的大型战场后，一切又变得不一样了。两队中近距离交战的时候就如同在一个快节奏的 FPS 中，瞬间技能全开各显神通，甚至枪声会吸引更多的队伍来参战，笔者觉得可以用「大了看是个大逃杀游戏，小了看是个 3V3V3… 的 COD 或者 OW」来描述本作的特点。</p><p>重生娱乐不愧是继承了 IW 之魂的工作室，本作的射击手感趋近于 COD 系列，枪械除了某两把连发枪之外别的基本没有后座力，子弹下坠也非常小，还带有击中反馈和伤害数字显示，护盾碎裂也有相应的提示声。但是目前霰弹枪的强度实在是太高了，反而在别的大逃杀中很吃香的 AR，SR 都不怎么受人喜欢，可能也是跟目前绝大多数战斗发生在中近距离有关。</p><h2 id="交流"><a href="#交流" class="headerlink" title="交流"></a>交流</h2><p>就笔者迄今为止玩的比较多的两个大逃杀游戏——PUBG 和 BO4 的 Blackout 模式来说，APEX Legends 在团队交流上的改进是非常明显的——鼠标中键的转轮标记系统。这可能是笔者用过的最方便的交流系统，甚至可以说解决了一大痛点。你能通过鼠标做到包括但不限于如下的功能：</p><ul><li>单击中键标记点</li><li>双击告诉队友标记点有敌人</li><li>长按能打开一个神似 Dota 2 的聊天轮盘系统，里面有：去那里、这里有人来过等等快捷标记</li><li>点击地上的物品告诉队友这里有啥</li><li>在自己空的枪械配件上按中键就可以告诉队友自己缺啥</li></ul><p><img src="/images/apex-ping-system.jpg" width="60%"></p><p>而且每次标记都会顺带一句人物语音，甚至整盘游戏下来都用不上游戏内置的队伍语音。在单排散人的时候这个功能非常实用，尤其是在遇到了有一定沟通障碍的老外的时候。现在不少国外游戏媒体和 Reddit 社区对这个标记系统也是赞不绝口。</p><h2 id="Free-to-Play-以及内购"><a href="#Free-to-Play-以及内购" class="headerlink" title="Free to Play 以及内购"></a>Free to Play 以及内购</h2><p>免费真的是迅速提升游戏玩家数量的一道杀手锏，配合上不错的游戏品质，三天内本作的在线人数已经突破百万了，在 Twitch 上的观众也一直在第一位，实为 2019 开年第一爆款游戏。</p><p>而作为一款 EA 出品的 F2P 游戏，内购肯定是存在的，不知道是跟暴雪学了一手还是怎么的，内购的项目跟 Overwatch 都十分相似，有传奇的皮肤、姿势、语音，还有枪械的皮肤，甚至品级都分的一样，白蓝紫橙。不过除了跟 OW 比较相似的项目之外，在传奇的内购项目中还是有不少特色的东西的，比如名目繁多的计数器，你的 ID 卡边框以及在 ID 卡中的姿势都是可以购买的项目。</p><p><img src="/images/apex-legends-skin.jpg" width="60%"></p><p style="text-align: center;">眼熟吗？</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>总的来说，APEX Legends 不像是一个匆匆忙忙赶制出来的游戏，而相反，它的完成度很高，质量还不错。虽然缺少了 Titan 的元素，但是带着技能的大逃杀带来的新玩法确实瞄准了一个市场空缺。</p><p>值得一提的是本作的音乐仍然由 Titanfall 系列的作曲家 Stephen Barton 负责。</p><p>虽然游戏整体的完成度很高，但是随着玩家的涌入，相信很快就会有问题暴露出来，现在摆在眼前的已经有反作弊和服务器稳定性的问题了。</p><p>如果你喜欢 COD 或者是 Titanfall；是 Infinity Ward 或者 Respawn Entertainment 的拥趸；又或者是别的大逃杀游戏的玩家想体验一下新鲜感，都可以下载。免费游戏，玩玩嘛，又不花钱。</p><p><del>但愿马上就要出的 BFⅤ 的大逃杀模式不要比这个弟弟</del></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;出乎所有人意料的，在去年 E3 上只露了个脸的 Respawn Entertainment 不声不响地在大年夜公开了以 Titanfall 为背景的大逃杀游戏——Apex Legends，然而并没有 Titanfall 系列中的 Titan 元素，只剩 60 个铁驭在地图上
      
    
    </summary>
    
    
      <category term="Game" scheme="https://blog.xinoassassin.me/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>一部拍给青年人看的教育片</title>
    <link href="https://blog.xinoassassin.me/2019/01/sex-education/"/>
    <id>https://blog.xinoassassin.me/2019/01/sex-education/</id>
    <published>2019-01-30T19:44:56.000Z</published>
    <updated>2019-05-30T07:45:42.696Z</updated>
    
    <content type="html"><![CDATA[<p>前些日子在不知道哪里听说了有这么一部新上的剧集，好像还不错的样子。这几天趁着自己有点闲情逸致赶紧去看了，发现真的不错，遂码一点字谈谈自己的一点点感受。</p><p><img src="/images/sex-education-cover.jpg" width="50%"></p><h2 id="青春剧"><a href="#青春剧" class="headerlink" title="青春剧"></a>青春剧</h2><p>剧名直译过来就是性教育，乍一听为是什么严肃向教育剧，其实不然，这是一部披着严肃名字皮的青春剧（请原谅我用这个被玩烂的类别）。</p><p>为什么我要用青春剧来归类呢？挺简单的，剧中故事主要发生地是英国乡间的一所高中，主角都是高中生。而剧集中发生的许多事情也确实是青春期年轻人会干的——抽烟还有那啥、滥交和校园欺凌等等等等。虽然有不少夸张的成分在，但是如果没有了夸张的描写，在许多地方也就体会不到青春期特有的那种骚动了。</p><p>而在看似是教育剧的外表之下藏着的是有着丰富情感线的剧情，但是人物之间的关系并不像某些青春校园动画作品中那样「贵圈真乱」，而是非常的清晰自然，当然还是存在着三角关系。另外也不存在什么编剧强行安排角色感情的事情，几乎所有迸出火花的关系都是经过了完备的铺垫的。一口气将一整季看下来，可谓是非常爽快的体验，不过最后还是留了不小的尾巴给第二季延续。</p><h2 id="性"><a href="#性" class="headerlink" title="性"></a>性</h2><p>本剧在网飞上的分级是 16+，确实是一个很合理的分级。</p><p>第一集开头第三十秒开始就直接给你奉上了活春宫，然后就是无处不在的性明示与暗示、无处不在的与性相关的台词以及粗鄙的手势。</p><p>车上、学校各种空教室、家里，几乎都有性爱场景；还有各种体位和同性恋性行为描写，绝对能够满足你的好奇心。</p><h2 id="教育"><a href="#教育" class="headerlink" title="教育"></a>教育</h2><p>既然名字里带有 Education 这个单词，那么教育的成分自然少不了。避孕，性器官知识到堕胎流产这些性方面的教育几乎没有缺席的，但是更为主要的便是在情感上的教育。</p><p>剧中的情感教育涵盖面非常广，举几个例子：</p><ul><li>如何与自己的单身母亲相处（她还是一个性治疗师有N多性伴侣）</li><li>如何与自己十多年的好基友相处（真的是基佬）</li><li>如何与自己喜欢的人做「同事」</li><li>如何在自己的好基友与喜欢的人之间平衡好关系</li><li>到底应不应该帮别人去追自己喜欢的人</li><li>论情侣间交流与坦诚的重要性</li><li>单相思怎么办</li></ul><p>最后一个例子我直接截了一段视频出来：</p><p><video controls src="/images/sex-education-clip.mp4" width="800" height="480"><br></video><br>片中几个震撼场景，给我印象最深的就是第五集末尾的集体对校园欺凌行为说不。在大会上向全年级宣告「It’s my vagina」实在是需要非常大的勇气，但是发展到一个个站起来复读出这句话时就形成了一种非常震撼的场面，这里因为涉及到剧透没办法好好讲，所以还是请有兴趣的朋友们自己去看吧。</p><p>但其实贯穿整个剧集的最重要主线之一是男主突破自己心理障碍的过程，整个过程巧妙地穿插在整部剧集中，到整部剧结尾处甚至还留了一个首位呼应。但细讲会涉及到太多剧透，所以还是请有兴趣的朋友们自己去看吧（复读）。</p><h2 id="末了"><a href="#末了" class="headerlink" title="末了"></a>末了</h2><p>当然作为一部这个时代的青春剧，又是网飞出品，那肯定少不了政治正确的东西。女权主义、LGBT 平权以及肤色问题在剧中均有展现，但这些不管你当成加分项还是减分项的题外话都阻止不了这部剧在 IMDB 上砍下 8.5 分，在豆瓣上甚至从 8.8 分涨到了 9.2 分。评分虽然不能说明一切，但一个有足够数量支撑的高分可能已经比这上面的千把来字更有说服力了。</p><p>最后希望大家都能去看，你或多或少总归会在里面找到共鸣点的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前些日子在不知道哪里听说了有这么一部新上的剧集，好像还不错的样子。这几天趁着自己有点闲情逸致赶紧去看了，发现真的不错，遂码一点字谈谈自己的一点点感受。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/sex-education-cover.jpg&quot; width=&quot;50%&quot;
      
    
    </summary>
    
    
      <category term="杂" scheme="https://blog.xinoassassin.me/tags/%E6%9D%82/"/>
    
      <category term="Entertainment" scheme="https://blog.xinoassassin.me/tags/Entertainment/"/>
    
  </entry>
  
  <entry>
    <title>回忆录</title>
    <link href="https://blog.xinoassassin.me/2019/01/some-memories/"/>
    <id>https://blog.xinoassassin.me/2019/01/some-memories/</id>
    <published>2019-01-29T05:36:12.000Z</published>
    <updated>2019-05-30T07:45:42.696Z</updated>
    
    <content type="html"><![CDATA[<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>本故事纯属虚构，如有雷同，那肯定是真的。</p><h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>关于我自己的心理创伤这个问题，我考虑了非常之久。不明不白地，读完四年大学之后，我又多了不少心理创伤。但相对的，我的心理承受能力也确确实实的提高了。我仔细的去回想，发现有那么几段记忆，我始终不愿意去回想，但它就是会时不时的跳出来让我难受。现在，我尝试着写出来，如果各位读者有什么评判，不妨用 SNS 的方式来告诉我。</p><h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><p>D是我刚进大学时候比较喜欢的女生，她有一个室友L，是个北方女孩。</p><p>刚上大学的时候，我还是对班上事情蛮热心的，帮我们班长很多忙。有天班上评贫困等级的时候，L被班长找了个理由留了下来，我头一回知道她的名字，然后要到了联系方式，逐渐熟络起来。</p><p>L是跟我一样的夜猫子，熬夜熬得比我还晚的那种，半夜在那打101，白天的课基本全翘干净了，托她的福，我知道了不少D的事情。当时跟D有一搭没一搭的聊着，D跟我安利了不少唱见。</p><p>就这样过了大概一个半月，12月初的时候，L突然说电脑坏了，我自然而然的当起修理工。然后又过了几天，一天晚上八点，我刷空间的时候突然看到她发了条定位，在机场。</p><p>我很好奇，她怎么会这个时候在机场，发了个消息问她，她回我说，见网友。</p><p>当时我没在意，因为我见网友都是已经有比较长时间的交流之后有机会才会约见面，当然一个宅男约的人基本也都是宅男，出事的机率不大。</p><p>又过了两天，正巧要开年级大会颁个奖，而L参加了礼仪队，不得不赶回来，她让我买了点吃的送过去，我照办了。</p><p>那周周四，突然她就联系我说要不要一起去城里逛逛，她请客，我没明白为啥，稀里糊涂就跟着走了。那天把C城中心的几个景点给逛了，回学校的时候已经八点多了。那天我还知道了她有个同卵妹妹，什么都比她强。</p><p>然后这段故事第一次重点来了。</p><p>那周周末，D联系我说L在疯狂喝酒，很不对头，让我问问情况。我发消息过去，回过来的感觉就是她整个人都疯疯癫癫的，然后她开始跟我倾诉。意外就是这么发生的，我给D回报情况的时候直接是截图的，正巧她把关键的一句话发过来的时候我截到了，然后在我自己都没看到这句话的情况下，D先看到了，然后回了我个“卧槽”，我回头一看，“我操”。</p><p>那句话原文我已经不记得了，但是上下文联系起来的意思就是：我见网友被强奸了。</p><p>当时我就感觉一股热血冲上头顶，马上叫她下楼当面聊。</p><p>聊了些啥我已经不记得了，只记得我听到了更可怕的事实，她的裸照被挂在网上。</p><p>我被她遭遇的惨祸震惊了，原本以为这种只可能是文艺作品中的故事竟然发生在自己认识的人身上。我感觉我承受了巨大的压力，只好抱着她的头，跟她一起哭，最后对着空无一人的操场怒吼“去你妈的老天爷”。</p><p>那天晚上，酒量不行的我，把自己灌睡过去。</p><p>第二天她的精神情况似乎好了点。</p><p>但是，第三天，周一，我上着课没见着她人，不放心在翻她的空间。结果看到了类似于告别世间的一些话。我急了，直接跟D要来了她们的寝室钥匙，冲了一公里路，直接冲进她们那栋公寓楼进了她们寝室。她室友收到消息也跟在我后面回来了。</p><p>我爬上她的床去看她的情况。她最终还是没舍得去死，左手手腕上好多条浅浅的割痕，没割破主血管。我松了一口气，跟她说，你太傻了啊。</p><p>原本我以为她会就此罢手，回到原本的生活轨迹上，我没想到的是，她原本的生活轨迹就是错综复杂的。</p><h2 id="二"><a href="#二" class="headerlink" title="二"></a>二</h2><p>在L出事之后，正巧<em>Sherlock</em>的电影版要在国内上映了，我寻思着去看首映场，然后想了想去问L一起不，她倒是答应的挺爽快的。然后我就买了两张票，市中心最贵的电影院。</p><p>然后就到了放假，因为圣诞节参加了个志愿者活动，假期前晚我就进城去参加聚餐了。聚餐结束准备去地铁站往学校赶的时候，我被D告知，L又去机场了。</p><p>一瞬间我进入了慌乱之中，我真的不愿意再看到之前的事情重演了，于是马上联系L。</p><p>「你又去接人了？」「是啊」「……」「你怎么知道的？」「这你就别管了，自己注意安全」</p><p>说实话，当时我已经产生了一种不想再管她了的情绪，但还是放心不下，就放弃了回学校的打算，找了家咖啡店坐下充电。</p><p>接下去的几个小时，穿插了另外一段小故事，大致就是被陌生年轻女性搭讪聊天听她抱怨男朋友地渣男事迹然后一起吃了点东西然后把她送回她男朋友家楼下。</p><p>折腾完，已经是凌晨两点左右了，我慢悠悠地逛到之前选定在看完电影之后去的通宵书店，进门坐下休息。</p><p>突然L发了条短信过来，「你饿吗，要不要过来一起吃个饭？」</p><p>我心想也就不打扰你们两个了，再说我走了一天了根本走不动了，就婉拒了。昏昏沉沉睡了没多久，天还没亮之前我又背着包四处乱逛了。</p><p>那天下午，我收到D的消息，她们寝室丢钱了，她们怀疑是L干的，然后开始跟我吐诉关于L的问题，包括但不限于晚上打游戏说话很吵，随便乱拿别人的东西比如各种化妆品，甚至衣服都是穿她的很久没还，还有各种卫生问题。我觉得L再坏也干不出来偷钱这档子事情的，让她们去阿姨那边看监控。</p><p>我心里乱的一塌糊涂，在到底该相信谁之间摇摆。最后我决定，不再管L这档子破事了。可没想到……</p><p>看完首映场又睡了一次书店之后我回了学校准备期末考试，大概快有两个星期的时间，开头L还时不时发个消息过来但后来却没了信，有天还突然找我借钱，我看她QQ没啥异常说话语气表情也都跟平时一样没多想就借了。</p><p>然后突然就出事了，有天晚上D告诉我L失踪了，因为有两门考试缺考辅导员找不到人开始问学生了。不一会儿电话就打过来了，我也没多想什么，把自己知道的都说了。再过了会儿她妹妹找到我了，我把L手机的账号问了出来，位置自然是关掉了的，然后把通讯录找了出来一个个打过去问。</p><p>结果还是一无所获。</p><p>我还能有什么办法，只能等待。还算好，她自己跑了回来。比较简单的经过是，男的软禁了她，带着她旅游打游戏，骗了点财物。</p><p>然后她母亲来了，把她带了回去。</p><p>第二个学期，我删除了她所有的联系方式。听说她因为各种原因，住校外去了，最后听到她的消息是她办了休学。</p><h2 id="悔"><a href="#悔" class="headerlink" title="悔"></a>悔</h2><p>其实关于L的事情，我后来回想起来，一直有些悔意。</p><p>比如说后来如果我没有生硬的去切断联系，比如说那晚我去吃了饭把她带走了，比如说我当时没全盘听信D的话，可能L就不会落到后来要办休学的地步吧。</p><p>其实还有一个故事，不过是关于另外一个异性的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;声明&quot;&gt;&lt;a href=&quot;#声明&quot; class=&quot;headerlink&quot; title=&quot;声明&quot;&gt;&lt;/a&gt;声明&lt;/h2&gt;&lt;p&gt;本故事纯属虚构，如有雷同，那肯定是真的。&lt;/p&gt;
&lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="杂" scheme="https://blog.xinoassassin.me/tags/%E6%9D%82/"/>
    
      <category term="Memories" scheme="https://blog.xinoassassin.me/tags/Memories/"/>
    
  </entry>
  
  <entry>
    <title>游戏列表</title>
    <link href="https://blog.xinoassassin.me/2019/01/game-list/"/>
    <id>https://blog.xinoassassin.me/2019/01/game-list/</id>
    <published>2019-01-26T14:55:17.000Z</published>
    <updated>2019-05-30T07:45:42.696Z</updated>
    
    <content type="html"><![CDATA[<p>简单记录下打过的游戏，先是按系列字母顺序排列，系列中按年代顺序排列。日厂开发的游戏会标注日文，如果没有英文就放在最后。</p><ul><li><p>Assassin’s Creed II</p><p>通关2遍</p></li><li><p>Assassin’s Creed Brotherhood</p><p>通关</p></li><li><p>Assassin’s Creed Revelations</p><p>主线未通关，剧情基本了解</p></li><li><p>Assassin’s Creed III</p><p>通关，DLC 没打</p></li><li><p>Assassin’s Creed IV Black Flag</p><p>通关，DLC 没打</p></li><li><p>Assassin’s Creed Unity</p><p>通关，DLC 打了开头</p></li><li><p>Assassin’s Creed Syndicate</p><p>通关，DLC 打了开头</p></li><li><p>Assassin’s Creed Origins</p><p>第二章左右</p></li><li><p>Assassin’s Creed Odyssey</p><p>进度在中部</p></li><li><p>Borderlands 2</p><p>没通关，刷过瘾了</p></li><li><p>Call of Duty</p><p>通关，United Offensive 通关</p><p>通关</p></li><li><p>Call of Duty 2</p><p>卡在最后三关</p></li><li><p>Call of Duty 4: Modern Warfare</p><p>通关</p></li><li><p>Call of Duty: World at War</p><p>通关</p></li><li><p>Call of Duty: Modern Warfare 2</p><p>通关</p></li><li><p>Call of Duty: Black Ops</p><p>通关</p></li><li><p>Call of Duty: Modern Warfare 3</p><p>通关</p></li><li><p>Call of Duty: Ghost</p><p>刚开头</p></li><li><p>Call of Duty: Black Ops 4</p></li><li><p>Celeste</p><p>开坑</p></li><li><p>Counter-Strike</p></li><li><p>Counter-Strike: Global Offensive</p></li><li><p>Danganronpa: Trigger Happy Havoc <em>ダンガンロンパ 希望の学園と絶望の高校生</em></p><p>开了个头</p></li><li><p>Darksiders</p><p>第一遍在沙漠打沙虫前不敢玩了，第二遍还没拿到拳套</p></li><li><p>Diablo III</p><p>剧情通关</p></li><li><p>Dishonored</p><p>开了个头，觉得不太适合自己</p></li><li><p>DmC Devil May Cry</p><p>同上</p></li><li><p>Dota 2</p><p>弃坑，只看比赛</p></li><li><p>Fallout 4</p><p>开了个头，觉得不太适合自己</p></li><li><p>For The King</p><p>联机不顺畅，跑团刚开就断</p></li><li><p>Gorogoa</p><p>完成</p></li><li><p>Grand Theft Auto V</p><p>通关，杀了老崔的结局</p></li><li><p>Half-Life</p><p>开了个头，害怕异型</p></li><li><p>Half-Life 2</p><p>同上</p></li><li><p>Hexcells</p><p>完成</p></li><li><p>Hexcells Infinite</p><p>几乎完成</p></li><li><p>Hexcells Plus</p><p>几乎完成</p></li><li><p>Hitman: Absolution</p><p>开了个头，有晕眩感没能打下去</p></li><li><p>Hook</p><p>完成</p></li><li><p>Left 4 Dead 2</p><p>美好回忆，只在过去</p></li><li><p>Mario Kart 8 <em>マリオカート8</em></p></li><li><p>Mini Metro</p></li><li><p>NieR:Automata</p><p>进度在第三章左右</p></li><li><p>Ori and the Blind Forest</p><p>到达第二个目标点</p></li><li><p>Overcooked!</p><p>差一点通关</p></li><li><p>Overcooked! 2</p><p>通关</p></li><li><p>Overwatch</p><p>美好回忆，只在发售第一个月</p></li><li><p>PLAYERUNKNOWN’S BATTLEGROUNDS</p><p>美好回忆，只在过去</p></li><li><p>Pokémon: Let’s Go, Pikachu! <em>ポケットモンスター Let’s Go!</em></p></li><li><p>Portal</p><p>开了个头</p></li><li><p>Portal 2</p><p>单人和双人均完成</p></li><li><p>Rise of Nations</p></li><li><p>Shadowverse</p><p>弃坑</p></li><li><p>Sid Meier’s Civilization V</p></li><li><p>Sid Meier’s Civilization VI</p><p>等更新的 DLC</p></li><li><p>Sniper Elite V2</p></li><li><p>Splatoon 2</p><p>刚入门，每天涂两把</p></li><li><p>Stardew Valley</p></li><li><p>Super Smash Bros. Ultimate</p><p>解锁40+人物，命魂进度50%</p></li><li><p>Team Fortress 2</p></li><li><p>The Legend of Heroes VI: Sora no Kiseki <em>英雄伝説 空の軌跡FC</em></p><p>通关</p></li><li><p>The Legend of Heroes: Sora no Kiseki SC <em>英雄伝説 空の軌跡SC</em></p><p>第一章</p></li><li><p>The Legend of Heroes: Zero no Kiseki <em>英雄伝説 零の軌跡</em></p><p>通关</p></li><li><p>The Legend of Heroes: Ao no Kiseki <em>英雄伝説 碧の軌跡</em></p><p>第三章</p></li><li><p>The Legend of Zelda: Breath of the Wild <em>ゼルダの伝説 ブレス オブ ザ ワイルド</em></p><p>开坑</p></li><li><p>The Witcher</p><p>10小时打了个开头</p></li><li><p>The Witcher 2: Assassins of Kings</p></li><li><p>The Witcher 3: Wild Hunt</p><p>十多小时打了个开头，打算重开档</p></li><li><p>Tomb Raider</p><p>通关</p></li><li><p>Tom Clancy’s Rainbow Six Siege</p><p>300小时还是菜鸡</p></li><li><p>Tom Clancy’s The Division</p><p>开头</p></li><li><p>Torchlight</p><p>开头</p></li><li><p>Torchlight II</p><p>开头</p></li><li><p>Undertale</p><p>通关一周目，二周目不想打</p></li><li><p>Warcraft III</p></li><li><p>Watch_Dogs</p><p>主线进度中部左右</p></li><li><p>WHITE ALBUM2</p><p>IC 一周目，CC 雪菜线，coda 雪菜 TE、冬马 TE</p></li><li><p>World of Goo</p></li><li><p>World of Warcraft</p><p>永远的110级奥术法师</p></li><li><p>Ys VIII: Lacrimosa of Dana <em>イースVIII -Lacrimosa of DANA-</em></p><p>开坑</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;简单记录下打过的游戏，先是按系列字母顺序排列，系列中按年代顺序排列。日厂开发的游戏会标注日文，如果没有英文就放在最后。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Assassin’s Creed II&lt;/p&gt;
&lt;p&gt;通关2遍&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Assassin’s C
      
    
    </summary>
    
    
      <category term="Game" scheme="https://blog.xinoassassin.me/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>杂（五）</title>
    <link href="https://blog.xinoassassin.me/2019/01/something-4/"/>
    <id>https://blog.xinoassassin.me/2019/01/something-4/</id>
    <published>2019-01-05T21:07:01.000Z</published>
    <updated>2019-05-30T07:45:42.696Z</updated>
    
    <content type="html"><![CDATA[<p>夜晚是属于自己的。</p><p>没有了白天的临街窗外的喧嚣，只剩下房间里还在响的几个风扇声和硬盘的响动。</p><p>你再一次地想起这一年来发生过的事情。</p><p>去年的这个时候，你头一次站到全年级面前主持活动，头一次试探着自己能达到的高度，高中之后，你头一次这么高调。</p><p>然后是又一年的沉沦，什么都没干，什么都没做成。</p><p>却又很累，压力越来越重，睡眠质量越来越差，开始长期的熬夜与通宵消耗自己为数不多的生命力。</p><p>想要做梦啊，无奈梦境似乎已经快离我而去了，无论我怎么地去呼唤它，一觉醒来却又是什么都不记得，然而精神上的疲乏告诉我，你一定在刚才经历了些什么。</p><p>又回想了一遍 ReLife，那可能是最近两年中看的感触最深的一部动画了。想回，却又不想回到高中时代。李宗盛说既然青春留不住还是做个大叔好，但是我真的不想变成别人口中的大叔，我还是想当一个比那时候更加成熟，但却是被人称为少年的人。</p><p>终于也能用平常心去面对有特殊感情的人了。</p><p>终于也能做到父亲多年前期望的那样「圆滑」了，可这真不是我想要的。</p><p>终于也能做到和母亲吵架时不吊起喉咙吼她了，可她还是要继续念叨我。</p><p>终于也会在一个人看电影时不再克制自己的眼泪了。</p><p>人生确实是由一个个选择组成的，你看不见的蝴蝶效应在一次次选择中泛起巨大的波纹。</p><p>我现在的愿望是回到一年前的这个时候。</p><p>但是，却没有后悔药，没有能让你回到 15 岁的药丸，更没有哆啦 A 梦的时光机，有的只是你的妄想和「如果那样就好了」的感叹。</p><p>不要再错过什么了，但这又是不可能的，活着太无奈了，就像自己毫无主动权一般。</p><p>又会想到命运和宿命，他们究竟存不存在呢，究竟是你自己的意识主导着你自己的行动与未来还是冥冥之中的力量已经将这一切都安排好了呢？</p><p>可能上帝和爱因斯坦，真的是同时存在着的吧。</p><p><code>&gt;&gt;endl;</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;夜晚是属于自己的。&lt;/p&gt;
&lt;p&gt;没有了白天的临街窗外的喧嚣，只剩下房间里还在响的几个风扇声和硬盘的响动。&lt;/p&gt;
&lt;p&gt;你再一次地想起这一年来发生过的事情。&lt;/p&gt;
&lt;p&gt;去年的这个时候，你头一次站到全年级面前主持活动，头一次试探着自己能达到的高度，高中之后，你头一次这么
      
    
    </summary>
    
    
      <category term="杂" scheme="https://blog.xinoassassin.me/tags/%E6%9D%82/"/>
    
  </entry>
  
  <entry>
    <title>好き</title>
    <link href="https://blog.xinoassassin.me/2019/01/suki/"/>
    <id>https://blog.xinoassassin.me/2019/01/suki/</id>
    <published>2019-01-03T08:38:43.000Z</published>
    <updated>2019-05-30T07:45:42.696Z</updated>
    
    <content type="html"><![CDATA[<p>2019 年的头一篇文章，我决定献给自己的感情。</p><h2 id="好き"><a href="#好き" class="headerlink" title="好き"></a>好き</h2><p>喜欢上一个人与认识到自己喜欢上她往往是在两个时间点，名为喜欢的种子都是在不经意间被种在心底，生根发芽慢慢开始向着一棵参天大树成长。发现这棵树的名字，可能已经是它长成一棵小树苗的时候了，于是坐立不安，在继续让它长下去与早日拔除的选择之间徘徊。</p><p>最终还是选择让它继续长下去，却不给它施加过多的养分，任其自然。结果有一天，这棵树实际的主人给它施了很多肥，浇了很多水最后又把浴霸开着在它顶上疯狂照，结果两天之内它就从一棵小树苗变成了占据整个心房的参天大树了。</p><p>这可怎么办。开始坐卧难安，胡思乱想。</p><h2 id="片思い"><a href="#片思い" class="headerlink" title="片思い"></a>片思い</h2><p>好想和她说话好想知道她的事情好想和她吵嘴好想和她一起听歌好想和她一起玩好想和她说我喜欢你怎么办怎么办怎么办</p><p>结果还是只能强行控制住自己，你已经是个成年人了，不要还是像个小孩子一样什么都不管冲上去把自己的感情一股脑的宣泄给对方。</p><p>半夜醒来不知道为什么，第一时间起来翻她的账号。啊，原来还没睡啊，于是再次打开聊天界面，呆看了半天打了句话又删掉。</p><p>会时不时的去寻找她曾经留下的痕迹，发现对方和自己的共同点会兴奋半天，但是又不能唐突的去说，只能在平时插一点内容进去。</p><p>小心翼翼地守着自己这份感情不被别人发现，又好想找到能分享心情的人。</p><p>把对方的名字变换形式写进自己的 ID 里，害怕有人发现的同时又期待着对方能自己看到。</p><p>还顺便修改了自己用了好几年的常用密码。</p><p>偷偷的准备着给对方的礼物，却不当心全说漏嘴了，一点惊喜感都没有了。</p><p>于是又开始冥思苦想，终于找到个另外的算是惊喜的附加物。</p><p>然而却发现自己越来越控制不住自己了。</p><h2 id="告白"><a href="#告白" class="headerlink" title="告白"></a>告白</h2><p>这可怎么办才好呢。</p><p>这可怎么办才好呢。</p><p>时机没到，但是好想说。</p><p>99.9%的可能性不会成功，但是好想说。</p><p>说完了做不成朋友了怎么办，但是好想说。</p><p>我好累，快撑不下去了。</p><p>但是，就是喜欢啊。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2019 年的头一篇文章，我决定献给自己的感情。&lt;/p&gt;
&lt;h2 id=&quot;好き&quot;&gt;&lt;a href=&quot;#好き&quot; class=&quot;headerlink&quot; title=&quot;好き&quot;&gt;&lt;/a&gt;好き&lt;/h2&gt;&lt;p&gt;喜欢上一个人与认识到自己喜欢上她往往是在两个时间点，名为喜欢的种子都是在不经
      
    
    </summary>
    
    
      <category term="杂" scheme="https://blog.xinoassassin.me/tags/%E6%9D%82/"/>
    
  </entry>
  
  <entry>
    <title>New Age 音乐</title>
    <link href="https://blog.xinoassassin.me/2018/12/new-age-music/"/>
    <id>https://blog.xinoassassin.me/2018/12/new-age-music/</id>
    <published>2018-12-18T18:00:00.000Z</published>
    <updated>2019-05-30T07:45:42.696Z</updated>
    
    <content type="html"><![CDATA[<p>New Age 派音乐可谓是当今音乐流派中包含乐曲最为宽泛的一种流派，笔者最早开始喜欢上音乐就是因为听这个流派，这个流派很大的一个特征就是以器乐为主，形式可能有传统的器乐合奏，也可能是电子乐，此外也不乏一些混有人声的佳曲。</p><p>此文简单推荐一些我常听的名家，歌单：<a href="https://music.163.com/#/playlist?id=2563249859" target="_blank" rel="noopener">https://music.163.com/#/playlist?id=2563249859</a></p><h2 id="Secret-Garden"><a href="#Secret-Garden" class="headerlink" title="Secret Garden"></a>Secret Garden</h2><p>Secret Garden，一般译为神秘园，其鼎鼎大名完全无需笔者多言。这个仅有两个人——一位作曲作词家 Rolf Løvland 和演奏演唱家 Fionnuala Sherry——组成的「乐队」是将笔者带入音乐世界大门的领路人。其出道曲 <em>Nocturne</em> 和一专同名曲 <em>Song from a Secret Garden</em> 经典到无以复加的地步，后来的 <em>You Raise Me Up</em> 更是被 Westlife 所翻唱，为千万人所知。</p><p>神秘园的音乐，笔者完全不知道如何去做评价，只想告诉读者，去听、去享受就对了。</p><h2 id="Yanni"><a href="#Yanni" class="headerlink" title="Yanni"></a>Yanni</h2><p>Yanni，是推荐 New Age 时永远绕不开的一位大师。一曲 <em>Nightingale</em> 让他为中国人所知。雅尼的风格极为多变，时而喜欢玩弄器乐，时而采用电子乐，这里想推荐雅尼近几年的两张专辑：<em>Sensuous Chill</em> 和 <em>Truth of Touch</em>。这两张专的电子风格极为丰富有趣，一位六十四岁的大叔像个二三十岁的 DJ 一样把玩着电子乐，曲曲耐听。</p><h2 id="Omar-Akram"><a href="#Omar-Akram" class="headerlink" title="Omar Akram"></a>Omar Akram</h2><p>这位估计大家都不熟悉，但是如果提到以前 CCTV 新闻频道每个时段间隔的天气预报时间用的 BGM，读者就可能熟悉无比了。这段音乐截取自这位光头大神的 <em>Run Away With Me</em> <del>跟我私奔</del>。他的曲子，更像是在模仿一种环境声音，当然钢琴+小提琴的组合也非常之多见，总之用来放松神经非常不错。</p><h2 id="Pacific-Moon"><a href="#Pacific-Moon" class="headerlink" title="Pacific Moon"></a>Pacific Moon</h2><p>Pacific Moon 是一个日本的厂牌，所以在他们家的音乐中，你能发现非常多的和风元素。在乐器的使用方面，大量采用了日本传统的民族乐器以及中国传入的传统乐器，同时配上西式乐器，打造出的完全就是器乐爱好者的乐土。</p><p>推荐的专辑是早期的<em>月Ⅰ、Ⅱ</em>以及<em>月Ⅲ</em>，这三张精选集基本能概括和平之月这个厂牌的内涵。之后的专题集因为听的比较少所以也不好给出自己的推荐。</p><p>这里扯一张来自于 Key 社的改编专辑，因为改编人员都是和平之月的成员所以勉强也可以视作和平之月的作品：<a href="http://music.163.com/m/album?id=74831&amp;userid=3314114" target="_blank" rel="noopener"><em>Ma-Na</em></a>，可以尝试下带有 New Age 风的 Key 社音乐是什么样子的。</p><h2 id="Jusqu’a-Grand-Pere"><a href="#Jusqu’a-Grand-Pere" class="headerlink" title="Jusqu’à Grand-Père"></a>Jusqu’à Grand-Père</h2><p>之所以推荐这个乐队，完全就是因为<em>千年の戀</em>这张碟，在听这张碟之前，笔者完全没想到原来一把吉他和一把小提琴能够碰撞出如此有魅力的音乐。强烈推荐，和风中带着一丝爵士乐的味道，非常舒服。</p><h2 id="姫神"><a href="#姫神" class="headerlink" title="姫神"></a>姫神</h2><p>将和歌融入新世纪音乐，给人以完全不同的感觉。</p><p>网易云上排名前五十的曲子，大部分都会给你上世纪八九十年代电子乐的感觉，实际上确实如此。姫神以他特有的时而和风时而波澜大气的风格吸引着笔者，所以也推荐出来。推荐曲目：<em>一人静</em>，<em>千年の祈り</em>和<em>虹橋</em>。</p><h2 id="S-E-N-S"><a href="#S-E-N-S" class="headerlink" title="S.E.N.S."></a>S.E.N.S.</h2><p>这个由两人组成的乐队同样是「各种耳熟却又不知道来源的音乐」的创造者。如果不是去年网易云的私人FM给笔者随机到了他们的曲子，那笔者可能真的不知道那么多耳熟能详的曲子的作者都是谁了。假如说想知道他们知名的曲子都有些啥，那打开网易云听前十首，相信笔者，你会恍然大悟的。</p><h2 id="David-Nevue"><a href="#David-Nevue" class="headerlink" title="David Nevue"></a>David Nevue</h2><p>纯粹的钢琴是怎么样的，听他的曲子就可以慢慢懂得。</p><hr><p>最后笔者想塞两首私货进这个歌单，都是来自于 <em>Pure -AQUAPLUS LEGEND OF ACOUSTICS-</em> 这张对笔者而言神一般存在的专辑，一首是上松範康的<em>永久に</em>，另一首是藤間仁的<em>末期の言葉～最期の誓い～静寂</em>。尤其是前者，从高中发现这首曲子之后一直到现在，我都没有听腻，那是一种完全没有办法用语言表达的震撼，对演奏者演唱者作曲家编曲家绝对的折服，请务必听完。</p><p><code>&gt;&gt;endl;</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;New Age 派音乐可谓是当今音乐流派中包含乐曲最为宽泛的一种流派，笔者最早开始喜欢上音乐就是因为听这个流派，这个流派很大的一个特征就是以器乐为主，形式可能有传统的器乐合奏，也可能是电子乐，此外也不乏一些混有人声的佳曲。&lt;/p&gt;
&lt;p&gt;此文简单推荐一些我常听的名家，歌单：
      
    
    </summary>
    
    
      <category term="杂" scheme="https://blog.xinoassassin.me/tags/%E6%9D%82/"/>
    
      <category term="Music" scheme="https://blog.xinoassassin.me/tags/Music/"/>
    
  </entry>
  
  <entry>
    <title>我的单相思</title>
    <link href="https://blog.xinoassassin.me/2018/12/boy-loved-girl/"/>
    <id>https://blog.xinoassassin.me/2018/12/boy-loved-girl/</id>
    <published>2018-12-17T19:38:26.000Z</published>
    <updated>2019-05-30T07:45:42.696Z</updated>
    
    <content type="html"><![CDATA[<section style="text-align: center;"><br><br>2018年12月18日更新，这个故事彻底结束了，我续写了结尾部分。<br><br>—<br><br>今天，我来写一个男孩的恋爱故事：<br><br>—<br><br>男孩遇到女孩是在他十二岁的时候<br>那是初一刚开学<br>他带着被不公划分的愤懑来报了到<br>一眼望去，除了几个小学同班的，别的都不认识<br>就这样，他开始了他的初中生涯，一晃，到了初一下<br>男孩发育的晚，个子在那时的班上显得特别矮，于是便一直占据着第一排的座位<br>有一天，他注意到左边隔了一条“走廊”的女孩<br>“啊你是我小学隔壁班的那谁”，男孩想起来了<br>女孩很好奇，“我很出名吗”<br>“没，只是听过你的名字”，男孩解释道<br>有时他们就这样有一句没一句的聊着<br><br>—<br><br>男孩被家里管得紧，心思却野的很<br>在班上干了不少被人唾弃的事情<br>那个学期末，他考了个很次很次的排名，被骂的很惨<br>从此，他过上了周末补课的生活<br>整个初二，他都在跟成绩斗争着<br><br>—<br><br>一晃眼，初三了<br>男孩挺拼的，终于把成绩搞回去了<br>但心思野是没办法治的<br>荷尔蒙作祟下，他对一直都留意着的女孩产生了兴趣<br>他开始频繁的找女孩聊天，就像无数个人生活中发生的那样，他们开始慢慢互相了解<br>男孩突然发现自己早就喜欢上了女孩<br>他拙劣地表演着自己简单的喜欢<br>十一月<br>一次考试之后，班主任要调整座位<br>男孩略施小计就提前看到了班主任留在班级电脑上的新座位表<br>他看到班主任把他和女孩分在了一起<br>他高兴的差点晚上差点没睡着<br>第二天中午，换完座位的他，坐到了整个教室最左侧第三排靠窗的位置，旁边就是他喜欢的女孩<br>有那么一瞬间，他觉得自己是幸福的<br>成为同桌之后，说话更方便了，再加上男孩朋友们的“助攻”，感情增进的很快<br>在一个温暖冬日，即将放学的时候，男孩的告白不当心脱口而出了<br>“我喜欢你啊”<br>男孩眼中映着的女孩的脸，是窗外即将落山的夕阳的颜色<br>男孩也不知道发生了什么，日子一切照旧，嬉笑打闹，哭啼皆有<br>男孩是幸运的，从十一月之后，班主任再也没有调整过座位<br>直到第二个学期开始<br>即将分离的气氛开始浓重，中考也成了生活的绝对重心<br>男孩和女孩不知道怎么了，拌嘴的频率越来越高<br>两次模拟考之后，保送高中的名单确定了下来<br>男孩离县上最好高中的保送资格一步之遥<br>虽然他早就预感到了这个事实，但不禁还是有些受到打击<br>于是，班上走掉了许多人，座位又要调整了<br>这次，女孩坐到了男孩的左前方，男孩的同桌成了他当时最好的朋友W<br>男孩发现，女孩和W的关系好的不行<br>他们经常煲电话粥，上课还疯狂传纸条<br>男孩心里有些酸，终于有天发作了，一生气就一直不理会那两人<br>他们觉得很莫名奇妙，让男孩生了几天闷气，最后自然的消气了<br>清明节，女孩的爷爷去世了，第二天她来上课的时候，眼眶红的很<br>又一次模拟考，男孩的成绩出现了大幅下滑<br>老师开始找他，家长也在施加压力<br>初中最后的那段日子在浑浑噩噩间就过完了<br>最后男孩还是买了两分才进那所最好的高中<br>而女孩，则是考去了另一所学校<br>于是，男孩彻底与女孩分开了，物理距离上<br>考完之后，男孩和女孩一起在学校帮忙的时候<br>班主任和数学老师开他们玩笑<br>“我发现男孩上课不认真的原因是一直在看女孩”，数学老师笑嘻嘻的<br>男孩脸一红，瞟了一眼女孩，发现女孩也在看他<br>“要是一直都能在一起多好啊”，男孩在心中叹了口气<br>突然他想起来，女孩的QQ都还没加上<br>在他们还是同桌的时候，女孩把自己的密码给了男孩，虽然她说很多人都已经有她的密码了<br>男孩偷偷的把自己的密码跟女孩改成一样的，一直用到现在<br>半夜，男孩登上女孩的QQ，把自己加了进去<br>第二天，学校又要开班会，结束之后，女孩突然就问男孩<br>“你是不是登我Q了”<br>“是啊，我加了我自己”<br>“那你为什么不把分组给改了？”<br>“忘了”，男孩摸了摸头<br>女孩生气了，她把拳头砸在男孩肩上<br>男孩突然被重击了一下，吃痛，无名火也冒上心头<br>但他转念一想，还是他错在先，一句话都没说出口就离开了<br>正巧，下着雨，他搭了同学的车回家<br>一路上，车载音响都在放着信乐团的《离歌》<br>“真是切合今天呢”，男孩心想<br>就这样，一个暑假，双方谁也没理谁<br>男孩一直都想找机会道歉，但那句“对不起”却始终出不了口<br><br>—<br><br>马上，高中也要正式开学了<br>剩不了几天的时候，女孩突然联系了男孩<br>“今晚我要翘家找一个网友”，女孩说<br>网友是她很久之前就认识的一个大男孩<br>于是男孩陪她聊到很晚很晚<br>突然间，那几天，他们又迅速地熟络了起来<br>男孩也趁机把自己最好的朋友G介绍给了她<br>她看起来对G非常感兴趣<br>那几天是入学前的军训期间，他们三个也天天聊到很晚<br>G比男孩女孩都小上一级，因为父亲跟男孩父亲是发小，于是也就认识了<br>很快女孩发现自己和G有许多共同话题可以聊<br>开学了，男孩的手机被缴了<br>但男孩还是成功地约出了女孩，虽然地点是在G的家里<br>女孩和G第一次见了面<br><br>—<br><br>接下去的发展，简直是一个疯了的剧本家写出来的<br>女孩和她班上的一个男孩恋爱了，这不是她的初恋<br>男孩很迟才知道这件事<br>男孩像疯了一样地往女孩的空间留言<br>他终于真的受不了了<br>男孩把事情扩散的很大，连不在一个学校的友人W都打电话过来问男孩是不是真的要放弃了<br>“我累了，想休息”，男孩认真地回答<br>快要到女孩生日了，男孩认真地准备了她提到过想要的书<br>然后写了将近三十页A4纸的文字一起寄给了女孩<br>根据女孩的空间留言板记录看，她那几天一直在哭<br>男孩心也痛，自己为什么这么爱吃醋呢，他想<br>他也没想到自己会如此伤害到女孩<br>“唉，要不道个歉态度软下来继续做朋友吧”，他内心的一半这么想<br>“不行，她谈了恋爱还不告诉我，我接受不了当备胎的感觉，要惩罚她”，另外一半这么想<br>于是，就在每天的纠结中，迎来了寒假<br>男孩认识G后不久就被安利了不少动画片<br>高中刚开始那个国庆，他开始了萌二生涯<br>于是，整个寒假都几乎用来补番<br>快要开学的一天，女孩发了一条煽情说说，不知道求了多少人来转发好让男孩看见<br>男孩气早就消了，心也软的差不多了<br>他只是想再撑一撑给自己留存一些脸皮<br>然后开学前一晚，女孩和她的男朋友同时找到男孩来抱怨，他们即将分手<br>男孩哭笑不得<br>因为新一届实行的高一第一学期结束就分班的制度<br>男孩又一次来到了新的班级<br>“哦，原来你就是那个谁啊”，男孩发现不少人都听过他的名字<br>以他最意想不到的方式<br>进入高中之后男孩的心思没有放在学习上太多<br>而是一天到晚不务正业<br>他从高中进校开始就被打上了“问题学生”的标签<br>什么高中第一学期开学第二周搞错周一到校时间<br>晨会的时候，自己班级正巧站在正对着校门的台阶上目送他进校门<br>什么第二学期上课玩touch被收被赶出晚自修作为惩罚<br>总而言之，读书劲大不如前了<br>男孩稀里糊涂的混着日子<br>终于快放暑假了，因为课程改革的关系，学校安排了两天的实践课程<br>男孩选择了一门在机房上的课，然后把整个机房改造成了网吧<br>几乎所有人都在打游戏<br>第二天的时候，女孩来给男孩送外卖<br>男孩直接脱下自己的校服，女孩混了进来，就这么坐在男孩身旁看着他打了一下午的游戏<br>暑假<br>快到男孩的生日了，女孩很上心的叫了一些朋友，大家在大热天吃火锅<br>钱都是女孩付的，还送了一个男孩喜欢的角色的手办<br>因为不方便带进家里，男孩把礼物转交给了G保管<br>吃完火锅，一群人进了黑网吧打游戏，女孩却和G在那儿看动画聊天<br>男孩笑笑，也不在意<br>直到几个礼拜之后，他得知G一直在约女孩一起图书馆<br>有一天中午，女孩跟男孩说图书馆没位置了去G家里了<br>男孩终于急了<br>G把女孩称作自己的女仆<br>有一天，G发了一份女仆宣言给了男孩<br>男孩没明白啥意思，G也就没多说<br>G也进了男孩的高中，男孩有事没事就找G一起吃饭<br>男孩把自己的午饭钱全花在各式各样的杂志上了，只好蹭饭卡<br>但高二第一学期快结束的时候，男孩突然迷上了翘课去网吧<br>于是几乎整个高二第二学期的晚自修，男孩都是在网吧度过的<br>整个高二，男孩都没怎么和女孩说过话，女孩倒是寄过两封信<br>男孩嫌麻烦，一直都没写回信<br>很快的，高三了<br>最开始的一个月，男孩用尽了所有心思把《冰与火之歌》给看完了<br>顺带着在家长会上被狠批了一顿<br>男孩被调到了讲台旁边，他终于开始收心<br>班主任看着他有点起色的成绩放了点心，一个月后把他给下放了<br>于是他又开始散心<br>一天，他在书店里发现了一本之前从来没见过的杂志，叫做《新知》<br>其文章晦涩难懂，不少涉及到哲学内容，让男孩沉迷其中，直到晚自修班主任站在他面前<br>班主任一把夺过这杂志，走到在班级后面的水桶旁，三下五除二的，把书撕了，教室安静极了<br>“下了课来我办公室”，班主任说<br>不出意外的，男孩又被流放了<br>不能告诉家里，图书馆又每晚八点多就关门了，那去哪里好呢<br>男孩选择了网吧<br>寒冷的冬夜里，男孩拖着中饭晚饭几乎一点都没吃的身体，在那条长达五公里多的回家路上踩着单车<br>回家的路有一段和女孩回家的路是重合的<br>一天，他在回来的路上看到了熟悉的影子<br>是她，追上她，男孩用尽全力的踩脚踏<br>奈何，他所剩不多的力气在两座桥面前无能为力<br>连叫住她的声音都发不出，生怕喊住的，不是她<br>男孩就这么又开始混着日子<br>就是在这段日子里，他发现女孩的微博更新了，转发了好多情感类的鸡汤<br>他意识到肯定有些什么事情发生了<br>他在中午的时候拦到了G<br>“你跟她发生了什么？”，他质问道<br>G隐晦的表达出了他A了上去然后打出GG的故事<br>男孩又一次哭笑不得，他最不想发生的事情发生了<br>G又告诉他，一年前发给他的女仆宣言就是说他喜欢上了女孩<br>男孩再次无言<br>G还告诉他，G也写了很多很多文字，附上了礼物放在家门口看着女孩来取走<br>男孩已经不知道能怎么表达自己的情感了<br>他回到教室，开始写信<br>信的内容只字不提她和G发生了些什么，只是写些日常<br>女孩的回信也是如此<br>仿佛他们回到了最早的时候<br>三四次通信之后，又是新学期<br>一天男孩的家里没做早饭<br>男孩选择去女孩家门口的早餐店买<br>刚给完钱接过东西，他的余光看到一辆电动车从小区驶出<br>直觉告诉男孩就是她<br>他飞奔上车，像那个冬夜里那样用尽全力去追赶<br>可惜，最终还是差那么点距离<br>男孩还是没能喊出她的名字<br>离高考就只剩几天了<br>男孩最后一次翘课去网吧，似乎是一种告别仪式<br>他没等到自己学校的放学时间离开，而是在女孩放学时候去了她的校门口等她<br>他真的等到了她，可能是有史以来第一次，他们一起回家<br>路上，他也只能嘘寒问暖提些无关紧要的话题<br>他还能提些什么呢？<br>太快了，就像高中三年的速度一样，他们分别了<br><br>—<br><br>男孩考去了遥远的C市，而女孩则是在就近的H市就读<br>暑假的最后一段时间，因为一些变故，男孩痛不欲生<br>事情解决之后，男孩家不得不安排一顿大学酒<br>男孩邀请了她，还有G是不得不邀请的<br>男孩知道会很尴尬<br>她来了，一身白裙，很漂亮<br>G自己坐在一旁，玩着手机<br>男孩酒量不行，几杯红酒下肚已经进入了半倒的状态，连同学什么时候走的都不知晓<br>那是最后一次和她见面<br>进入九月，那天就要出发前<br>男孩想起还有一些材料要复印<br>于是约了友人H载他<br>路上，H提到要不要把她再叫出来见个面<br>男孩想了想，“没时间算了吧”<br>H摇了摇头，也没再多说什么，最后他们拍了拍肩告别<br><br>—<br><br>大学刚开始的时候，男孩还会给她打电话聊天<br>几次一聊就是半小时<br>男孩发现自己还是放不下女孩<br>放不下意味着不可能开始新的感情<br>光棍节，趁着酒意，他找到女孩<br>“不要异地”，女孩明确的拒绝了他<br>他笑了笑<br>年末的时候，又因为一些变故，男孩的心理压力大到承受不了了<br>他终于再次打了女孩的电话<br>断断续续地倾诉到手机欠费<br>这是他最后一次听到她的声音<br>从此，男孩再也没联系过女孩<br>女孩也没联系过男孩<br>直到一年半后<br><br>—<br><br>大二的寒假，男孩约G一起去上海玩<br>途中，男孩提起女孩<br>“你和她怎么样了”<br>“啊，加回好友了”<br>也没聊更多<br>五月末，G突然找到男孩，问他暑假要不要一起去某站的演唱会<br>男孩算了算手头的钱，“手头有点紧，还是算了吧”，他回复说<br>暑假<br>男孩找G一起去J市修手机，归途，无意间男孩看到G的淘宝记录，两张票<br>“你和谁一起去啊”，男孩好奇的问<br>“哦，没告诉你吗，你不去我就找了她啊”，G很坦然<br>“你们和好了？什么时候”<br>“不是告诉过你了吗？她加回我好友了啊”<br>男孩心中开始充满不安<br>但他强装出一副镇定的模样<br>“你们酒店要押金你钱够吗”，男孩递出一张信用卡，“这里面还有点钱，你拿着用以后还我”<br>“记得带套”，他最后叮嘱了一句<br>原本他以为他已经放下的感情，又开始在他心中冲撞<br>他坐卧不安<br>临行前几天，他终于忍不住了，在女孩的留言板留下了两年后的第一句话<br>没想到女孩迅速找到了他，“你想说什么，赶紧说我看着的”<br>他有些慌，打了字又删掉<br>“你想说什么发出来吧，我明天还要早起先睡了”，女孩似乎很忙<br>男孩呼出一口气，扔给对方一个99+<br>却两天没收到女孩的回复<br>终于，他等到了回复<br>可那几乎是陌生人的感觉，不是他想要的回复<br>有总归比没有强吧，男孩心想<br>男孩早就反思过自己的过错，但已经是既成事实了，没有后悔药<br>行程第二天早上，他看到G很早就在线了<br>“她一回酒店就睡着了”，G这么说<br>“这酒店服务太好了还给加了床”，G还抱怨<br>男孩笑笑，再也没跟G提起过她<br>他准备好了一个人去旅行<br><br>—<br><br>又是一个寒假，照例，G会来男孩家一趟交换点资料什么的<br>男孩旁敲侧击提起女孩<br>“啊，她，我女朋友啊”，G云淡风轻<br>男孩还是只能笑笑，转移了话题<br>他不信，他不愿相信<br><br>—<br><br>男孩又开始找女孩说话，只是只敢以留言板的形式<br>他们似乎回到了最早的时候，在对方的留言板上你一句我一句的<br>不同的是，男孩的留言板上，没有别人的留言<br>今天，男孩终于感受到了一丝异样<br>女孩和G在用同样的聊天习惯说话<br>男孩笑笑，既成事实，不想承认也是摆在那里的<br><br>—<br><br>断断续续的，用留言形式互相告知彼此的日常生活<br>就这样过去了半年，男孩也没勇气约女孩出来吃个饭聊聊天<br>大四了，他也要走上社会了<br>突然在国庆前的某一天，G用不同以往的语气找到了男孩<br>“女孩好像出事了，有几天没跟我联系了”<br>“弄不好要跟我分手”<br>心中那股长久以来积攒着的感情终于爆发了，男孩直接一个电话给了G<br>“什么情况啊？”<br>“对不起，对不起”G用他那不同寻常的沙哑的声音道着歉<br>男孩终于没忍住，把这几年积蓄的感情一股脑地跟对方宣泄了出来<br>“我想你们两个好好的”<br>“我也想过撬墙角的事情，但做不到”<br>男孩在阳台上大吼，眼睛里的泪水不受控制<br>“我只剩你那么个朋友了啊”<br>G沉默地听着<br>末了，男孩终于冷静下来<br>“我打算飞回去找她”<br>“钱够吗？”<br>“票买好了”<br>“有啥事情跟我说，她的事情，我还是想知道一点的”<br>挂了电话<br>那几天可能是男孩整个大学生涯电话打的最多的几天<br>终于，G碰到了女孩<br>原来是女孩的父母要离婚了<br>G自己想得太多以为要分手<br>男孩知道后，无奈地笑了<br><br>—<br><br>经常出现在自己梦里的，终于不是她了<br>男孩终于能够心平气和地跟自己说：<br>“我不再喜欢她了”<br><br></section><p>故事到这里就结束了，在这里，我想重点感谢G，真的，这么多年，我的现实朋友真的只有你了，谢谢你一直陪着我，愿意忍受我的任性。</p><p>还有，谢谢女孩，初三和高中的回忆，不可能忘记的。</p><p>最后感谢能看到最后的各位，鄙人文笔粗糙，故事没有新意，看到最后实属不易。</p><p>最后附上残留的一点纪念品。</p><p><img src="/images/maid-words.png" width="70%"></p><p><img src="/images/letters.jpg" width="60%"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;section style=&quot;text-align: center;&quot;&gt;&lt;br&gt;&lt;br&gt;2018年12月18日更新，这个故事彻底结束了，我续写了结尾部分。&lt;br&gt;&lt;br&gt;—&lt;br&gt;&lt;br&gt;今天，我来写一个男孩的恋爱故事：&lt;br&gt;&lt;br&gt;—&lt;br&gt;&lt;br&gt;男孩遇到女孩是在他十二岁
      
    
    </summary>
    
    
      <category term="杂" scheme="https://blog.xinoassassin.me/tags/%E6%9D%82/"/>
    
      <category term="Memories" scheme="https://blog.xinoassassin.me/tags/Memories/"/>
    
  </entry>
  
  <entry>
    <title>这届玩家不行？</title>
    <link href="https://blog.xinoassassin.me/2018/12/bad-gamers/"/>
    <id>https://blog.xinoassassin.me/2018/12/bad-gamers/</id>
    <published>2018-12-14T12:24:10.000Z</published>
    <updated>2019-05-30T07:45:42.696Z</updated>
    
    <content type="html"><![CDATA[<p>今年下半年——实际上是从年中的 E3 就开始有一些征兆——某几个久负盛名的大厂突然就因为某场发布会或者是某个新游戏造成口碑断崖式下滑的惨案。这其中有</p><h2 id="Bethesda"><a href="#Bethesda" class="headerlink" title="Bethesda"></a>Bethesda</h2><p>贝塞在我心目中的形象一直以来都是不错的，这几年他们发行了不少曾在游戏史上留下过浓墨重彩一笔的那些老游戏的新作，而且这几年他们自己的新作质量也尚可，E3 甚至还搬出来 Starfield 和老滚六这两个只有一个标题的片子来压轴，尤其是后者，无数玩家翘首以待多少年贝塞给个准信，他们终于给了。</p><p>但是没想到，这家一直给我良心感的厂子，竟然会因为一个游戏，形象瞬间崩塌。没错，就是那个他们在今年 E3 上重磅公布的多人在线联机的 Fallout 76。</p><p>先是游戏质量一塌糊涂，大有追上并超过当年刺客信条大 BUG 的意思，然后是官方营销也出了问题。具体出了些什么问题各大资讯网站已经报道的很多了，这边就不再赘述。</p><p>但是贝塞，在当下，你已经不能再靠吃老本混日子过了。虽然说旗下工作室的游戏都是叫好不叫座的，但是起码叫好的声音比你们自家做的那几个玩意儿多太多了。我希望在 Starfield 和 ES6 中看到那个给人焕然一新又非常熟悉的 Bethesda Game Studio。</p><h2 id="Blizzard"><a href="#Blizzard" class="headerlink" title="Blizzard"></a>Blizzard</h2><blockquote><p>Do you guys not have phones ?</p></blockquote><p>暴雪始终是一个能让玩家又爱又恨的厂。这几年，大家都很清楚它在走下坡路，但是今年的暴雪嘉年华是着实的让许多老粉铁粉寒心了，让一个移动端 Only 的手游来压轴已经非常打破自己的底线了，然而之后一句「你们没有手机吗？」可以让这些寒心的粉丝的失望指数跌到了负值，甚至产生对暴雪的怒意。</p><p>作为一个玩过多年暴雪游戏，因为他们瞎几把改游戏而从粉转黑的玩家来说，我很乐意看到这种剧情。暴雪这帮子人可能是真的当「爹」当习惯了，他们几乎不听玩家社区的反馈。</p><p>这种自我作死的精神不是谁都学的来，也不是有资本的学的。短短两个月多的时间，动视暴雪的股价已经从最高点下跌超过了 40%，即使是中途公布了非常好看的半年报也没法控制注股价的下跌。如果说推出手机游戏是顺应市场发展的潮流，那么现在市场用他们专业的方式已经很好的告诉了暴雪：我们不需要你追随市场潮流。</p><p><img src="/images/ATVI-2018-12-14.png" width="70%"></p><p>然而，股价的下跌引发高层思考的结果似乎将他们导向了完全错误的方向，就在今天—2018 年 12 月 14 日—暴雪突然发布了<a href="https://news.blizzard.com/en-us/blizzard/22833558/heroes-of-the-storm-news" target="_blank" rel="noopener">风暴英雄接下来的企划</a>，这个刚通过推出 2.0 有点起色的游戏，却遭遇到了几乎是被暴雪「宣判放弃」的命运，取消官方联赛几乎是一款竞技游戏能够遭遇到的最惨的事情。不仅如此，他们还要从开发团队中抽调人手去其他项目组，这等于是说「我们接下来的更新会放缓」，风暴英雄一直以来引以为傲的快速更新也可能不再能够延续下去了。</p><p>唉，暴雪，好自为之吧。毕竟大家都不想看到一家曾带给我们这么多伟大作品的厂子就这么堕落了。</p><h2 id="EA"><a href="#EA" class="headerlink" title="EA"></a>EA</h2><p>EA 一直都在善恶相对的世界中扮演着「恶人」这个角色的厂子。行嘛，去年的星球大战：前线二还不够你们买教训的吗？哦，好像你们确实吸取教训了，内购方面收敛了。但游戏品质是什么玩意儿啊？战地五这种完成度也好意思放出来，还不如你继续跳票几个月，干脆跳票到明年跟大逃杀模式一起上线算了。好，你把半成品放出来了，那你们的更新就勤快一点，你看隔壁 COD，出来不也问题多得很，但人家更新还算是勤快。你们呢？新内容跳票，更新补丁迟缓，正式版推出没几天给打五折，随便哪个操作都是在透支战地这块老招牌。</p><h2 id="Ubisoft"><a href="#Ubisoft" class="headerlink" title="Ubisoft"></a>Ubisoft</h2><p>育碧今年的动作好像不怎么大。是的，它今年一共只出了<strong>三</strong>部 3A 级别的作品：Far Cry 5、The Crew 2 和 Assassin’s Creed Odyssey。这三部作品的风评虽然说不上是很好级别的，但也可以说是良作，尤其是奥德赛，这个我会在未来的长测中重点讲述。</p><p>经历了前几年的自我作死出来的惨痛教训和威望迪的收购风波之后，育碧看上去稳健了许多。而且今年 E3 上面，育碧的发布会还是最好看的那一家。然而就在大家期待 R6 的新季票内容消息的时候，他们却出人意料地宣布了一项全球性的游戏内容和谐计划——将减少游戏中存在的暴力、性和血腥内容，目的是在亚洲地区的推广上，不用说，明眼人都知道是针对大陆地区。</p><p>先不谈和谐过后这游戏过审的概率有多少，更不说明年游戏版号是否能够重启颁发。光是一个针对区域性的内容调整却要强行全球化，是AnvilNext 2.0 引擎不支持这种特性还是你们蒙特利尔想偷懒吗？欧美地区的游戏分级制度不够完善吗？</p><p>好在育碧还是会听社区的声音，不久之后，他们就撤回了全球性和谐的计划，转为针对区域提供和谐内容了。</p><p>在此我再次恭喜我们大陆的成年玩家，恭喜我们再次要用上全球特供内容了。</p><h2 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h2><p>回过头来夸一下，今年本来有一些我不太抱有希望的游戏却出乎意料的好玩，对我说的就是 COD:BO4。可能也是我初中打了两年 COD4 联机的关系吧，这游戏的团队死斗就特别亲切，不用太好的枪法，就是突突突就完事了。Blackout 模式也做得比较轻松，比起 PUBG 来更好上手。</p><p><code>&gt;&gt;endl;</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今年下半年——实际上是从年中的 E3 就开始有一些征兆——某几个久负盛名的大厂突然就因为某场发布会或者是某个新游戏造成口碑断崖式下滑的惨案。这其中有&lt;/p&gt;
&lt;h2 id=&quot;Bethesda&quot;&gt;&lt;a href=&quot;#Bethesda&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
    
      <category term="Game" scheme="https://blog.xinoassassin.me/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>当前女友成为家人</title>
    <link href="https://blog.xinoassassin.me/2018/11/mamahaha/"/>
    <id>https://blog.xinoassassin.me/2018/11/mamahaha/</id>
    <published>2018-11-11T08:35:54.000Z</published>
    <updated>2019-05-30T07:45:42.696Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h2><p>可能是最近光棍节临近，生活空虚寂寞，外加之对于青春恋爱系作品的渴求日益增长，使得我在看到首页时间线的推荐之后的十小时内，吃奶一般地读完了目前连载的全部36章，读完之后大呼过瘾，故醒来马上开始码我的首篇安利文。（本文几乎不涉及剧透）</p><p><img src="/images/mamahaha.jpg" width="50%"></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>可能是真的不多见，也可能是鄙人见识过于短浅，以往的轻小说，会着力去描写和前女友的回忆的，除了《学生会的一存》之外，其他的我真的没能拜读到。而在各种机缘巧合，或者说作者的安排之下，从前女友的关系变到同在一个屋檐下，全天几乎24小时都在一起的义姐弟的，可能真的只有这部<a href="https://kakuyomu.jp/works/1177354054883783581" target="_blank" rel="noopener">《继母的拖油瓶是我的前女友》</a>。为什么我会因为这部小说头一回去尝试着去写一篇安利文呢？这边就给出几点，剩下的请大家阅读原著。</p><h3 id="安排"><a href="#安排" class="headerlink" title="安排"></a>安排</h3><p>本书前段多次出现的，就是主角对于神明（作者）安排的反复辱骂，这可能是作者的一种自嘲吧。但正因为在平淡的主角身上辅以现实生活中几乎不可能遇到的超低概率事件，又用了合理的方式去解释这种事件发生在主角身上的原因，使得原本带有一些奇幻系色彩的故事变得更为生动真实起来——“这好像确实会发生呢”——如同这种感想一般。很多轻小说采用的是事件推动情节发展，附带人物情感线，这就考验一个作者的安排能力到底如何——你不能太出格，也不能太平淡——而紙城境介在这点上已经做的相当不错了，虽然安排的几乎都是些日常事件，但是从头看下来没有一种乏味的感觉，而是一种似见未见的感觉，这点我们跳到<a href="#套路与反套路">套路与反套路</a>一节在进行详述。</p><h3 id="青春"><a href="#青春" class="headerlink" title="青春"></a>青春</h3><p>也许是最近读了太多 2ch 上的长篇故事了，像什么<a href="http://kanquwen.com/category/2ch_long/osananajimi-okasa/" target="_blank" rel="noopener">《青梅竹马春天就要去大阪读大学了》</a>，什么<a href="http://kanquwen.com/category/2ch_long/osananajimi-ichigo/" target="_blank" rel="noopener">《借给青梅竹马草莓棉花糖后》</a>，什么<a href="http://kanquwen.com/category/2ch_long/husky/" target="_blank" rel="noopener">《想要揭穿班上太完美女孩的弱点》</a>之类的文章，都是十多年前的老故事，但是也让我得以一窥你日当时普通高中生的生活实况。读得多了，一声感叹，原来你日 ACG 作品中许多的描写确实是来源于现实生活的，比如青梅竹马在青春期到来之际必定会疏远，比如和异性交往挺常见的什么的。</p><p>当然真的要扯青春这个话题我能给你再写个2000字来，邻国的轻小说作品中即使不是将主角置于青春时代的也大多都会带上那么一丝青春气息。“最美好”的年纪似乎确实值得被各种艺术作品大书特书，但是青春大多时候也只能作为作品的年龄背景，有了这个背景，作品中的很多情节就像得了免罪金牌一样，怎么招都说的通了。</p><p>然而本书却并没有过分的利用青春去写一些很出格的事情，当然了第二章那个除外，反而处在青春期对异性生理上的好奇与跟异性交流的那种羞耻感倒是描写的比较真实。互相作为前男女朋友的情况下长久居住在一起还是同班同学，每天除了睡眠时间和呆在自己房间的时间都是和对方在一起，难免过去被藏起来的情愫又会慢慢的化开，但又由于性格使然和其他各种各样的原因，让这两人没法好好的，坦率的说出自己心中的感情。然而在日常与非日常的各种事件推动之下，堵在心口的巨石也开始慢慢碎裂了，这也许是本书最吸引着我的一点吧，也就是所谓的成长。</p><p>很多人喜欢看这本是因为有糖吃，确实本书甜，但是这糖也不是直接给你摆到台面上，比如《青春野狼》经常用的那种方式来给你喂糖吃，而是需要你去自己寻找埋藏在文字中的糖。</p><h3 id="双视角"><a href="#双视角" class="headerlink" title="双视角"></a>双视角</h3><p>多视角的描写方式多见于群像剧作品中，比如《Gamers》，又比如《如果妹》。但是将视角限定于主角二人且以第一人称的方式来叙述故事的，在轻小说作品中我还是头一回见到。本书的前中段，基本是以双人的视角，一段事件在某人的视角过完一遍之后马上换人再过一遍，由于是第一人称描写，双方心理活动上的差别就很自然地为读者所捕捉，也就能解释读者阅读过程中产生的疑惑。</p><p>而且由于第一人称视角的限制，双方产生的各种不自然行为变成了谜题一般的存在——“咦，他（她）为什么这么干？”——这类问题在阅读的过程中时不时的就会在脑海中蹦出，使你反复去揣测人物（作者）的意图。更换视角之后，你在上一段产生的疑惑便会自然而然地解开，有时甚至会拍案叫绝，连连卧槽夸赞作者——这仿佛就是一种轻推理小说——就比如说目前简体译版的黄金周篇，就是带有一定的解谜元素的。</p><h3 id="套路与反套路"><a href="#套路与反套路" class="headerlink" title="套路与反套路"></a>套路与反套路</h3><p>轻小说读者最熟悉的是什么？套路。这几年能让人为之叫好的轻小说大多都是从套路中出发却跳脱出套路，比如平坂读标题误导向的《如果有妹妹就好了。》，比如鸭志田一的《青春野狼》，又比如“怎么将哥布林斩草除根”的《哥布林杀手》。</p><p>而本作设定上有套路吗？拖油瓶设定的作品近几年出名的有《工口漫画老师》和《如果有妹妹就好了。》等等，而前女友设定的不是太多见。如果把范围再扩大一点寻找相似作品，可以扯到《家有女友》，但是跟那部三角关系扯不断理还乱的漫画相比，本作拖油瓶只有一个，而且不像某渣男和某妹妹成为家人前上过床那样，至少本作男女主关系还是仅限于接吻状态的“纯洁”前男女朋友关系。所以这么一看，在大的情节设定上，紙城境介确实抓到了一个几乎没被用过的题材，写的确实也不错，所以能够火起来，也是必然。</p><p>再来看男女主的设定套路吗？男主是近几年挺吃香的文弱男青年，跟个大老师一样，但是没特别提过他的长相是不是很残念。而女主身上有一些套路存在，比如原土气妹原不显眼人士等等等等。而配角方面，有对青梅竹马的存在，男方是开朗系帅哥形象，女方是开朗系小可爱形象。</p><p>接着来看小情节，因大部分的小情节都是日常故事，所以很难具体的说是不是有套路的成分存在。</p><p>总结下来就是本作是反套路作品中掺杂了一些套路元素，大体上是一部反套路的存在。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>在简单查看了作者以往的作品之后我惊讶的发现，紙城境介以往的作品几乎都是“魔王勇者”类的冒险题材，这部“拖油瓶”可能是他公开的第一部将舞台搬至现实生活中，将题材改为青春恋爱系的作品。</p><p><img src="/images/works-by-kamishiro1.jpg" alt="works-by-kamishiro1"></p><p><img src="/images/works-by-kamishiro2.jpg" alt="works-by-kamishiro2"></p><p>而“拖油瓶”也并不是他文库化的出道作，之前的两部文库化作品都只有1卷就没有下文了。</p><p><img src="/images/works-by-kamishiro3.jpg" alt="works-by-kamishiro3"></p><p>意外的是，虽然之前不曾公开过青春恋爱系的作品，但是一公开，就吸引了不少读者。从上面第二张图的星星数量跳了一个等级也可以看出这部作品确实比作者之前的强太多了。</p><p>无论如何，我希望看到这篇文章的读者，不管你是不是日轻爱好者，还是普通文字读者，都可以去试着读一下这本即将文库化出版的网络轻小说。</p><p>目前大陆翻译首发在<a href="https://tieba.baidu.com/f?kw=%E7%BB%A7%E6%AF%8D%E7%9A%84%E6%8B%96%E6%B2%B9%E7%93%B6%E6%98%AF%E6%88%91%E7%9A%84%E5%89%8D%E5%A5%B3%E5%8F%8B" target="_blank" rel="noopener">继母的拖油瓶是我的前女友吧</a>，<a href="https://lightnovel.cn/forum.php?mod=viewthread&amp;tid=928710" target="_blank" rel="noopener">轻国论坛</a>有转载，EPUB 版见<a href="https://tieba.baidu.com/p/5862044760" target="_blank" rel="noopener">突然发现少了EPUB，论如何换着方式吃狗粮</a>。</p><p>当然，我们要支持正版，本书的文库版马上将于12月1日出版了，有能力，又喜欢本书的朋友可以多多支持一下，反正我是要买了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h2&gt;&lt;p&gt;可能是最近光棍节临近，生活空虚寂寞，外加之对于青春恋爱系作品的渴求日益增长，使得我在看到首页时间线的推荐之后的十小时内，吃奶一般地读完了目前
      
    
    </summary>
    
    
      <category term="ACG" scheme="https://blog.xinoassassin.me/tags/ACG/"/>
    
  </entry>
  
</feed>
