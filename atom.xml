<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>随写 - XinoAssassin&#39;s Blog</title>
  
  <subtitle>Write Everything</subtitle>
  <link href="//atom.xml" rel="self"/>
  
  <link href="https://xinoassasssin.github.io/"/>
  <updated>2018-05-12T13:12:12.020Z</updated>
  <id>https://xinoassasssin.github.io/</id>
  
  <author>
    <name>XinoAssassin Ni</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>再见，老伙计；你好，新朋友</title>
    <link href="https://xinoassasssin.github.io/2018/05/new-laptop/"/>
    <id>https://xinoassasssin.github.io/2018/05/new-laptop/</id>
    <published>2018-05-12T13:12:12.000Z</published>
    <updated>2018-05-12T13:12:12.020Z</updated>
    
    <content type="html"><![CDATA[<p>前略，上周日，一次突如其来的停电袭击之后，我那本来就已经处在崩溃边缘的 K610D 终于不得行了，进系统之后必蓝屏，而且此次蓝屏的 Code 还不一样（说实话可能我基本上把 Windows 10 能出现的蓝屏代码全看了一遍了）。花了半天尝试了各种修复后故障依旧，没有办法之下，只得跟父亲申请新机器的资金——其实已经延长了非常久的时间了，自从两年前进过水之后我就知道必然会有这么一天到来的——再花了四分之一天在限定资金下确定了现在这台新伙计，用的蓝天 K65KJ 的模具。<br>配置最基本两个大件新旧对比：</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">K610D-i7d2</th><th style="text-align:center">K65KJ</th></tr></thead><tbody><tr><td style="text-align:center">CPU</td><td style="text-align:center">Intel Core i7 4710MQ</td><td style="text-align:center">Intel Core i3 8100</td></tr><tr><td style="text-align:center">GPU</td><td style="text-align:center">NVIDIA GeForce 940M</td><td style="text-align:center">NVIDIA GeForce GTX 1050</td></tr></tbody></table><p>之所以新机器选择了 K65KJ, 原因有二：</p><ol><li><p>散热强劲</p><p>因为用的是桌面级 CPU, 所以 CPU 部分是用了双热管来压的，而且 CPU 与 dGPU 各用了一个风扇来分散热量。之前因为在 K610D 上面吃尽了散热差的苦头，所以这次舍弃了拥有更好扩展接口的另一个型号，也要散热系统非常强劲。</p><p>测试下来非常令我满意，在风扇全开的情况下能把 CPU 压在 65 度附近，四核频率稳定标称的 3.6 GHz 运行，dGPU 也压的非常好。</p></li><li><p>可扩展性强</p><p>因为用的是桌面级 Core 8 代 CPU, 所以机器上直接给了两个 M.2 接口，两个均支持 NVMe 协议。而且因为散热系统仍有余裕，所以后续升级至 Core i5 是非常可行的提升性能的办法，甚至 i7 都有一试之力。</p></li></ol><p>京东速度还算是不错，第二天周一中午机器到手的时候是 8GB 2400 的英睿达单条 DDR4 内存加上一条金士顿的 128 GB 的 TLC 条子，成本原因自然是走 SATA 协议的，但是够用是够用了，就是容量太小了，于是当天下午就下单了另一条英睿达 DDR4 2400 8GB 和三星的 SM961 256GB, 最谢天谢地的是最近的内存条和 SSD 都有一些降价，不然得是大出血。</p><p>犹豫是周一下午五点——一般快递停收时间——之后才淘宝下的单，所以内存到了周五才到，而 SM961 却到了周三还没发货，咨询了卖家：“没货，明天或者后天到”。我可去你妈的，换店，之前物色 NVMe SSD 的时候在 XG3 和 SM961 之间纠结，然后这时候在淘宝上看到一家拆机 XG3 512GB 才卖九百出头的店，果断付款。</p><p>然后今天周六下午，终于是到手了。赶紧插上装好东芝家的驱动跑个分，果然 NVMe + MLC 的组合数据上非常吓人。马上迁移系统，结果文件都是复制完了却在启动上栽了跟头。</p><h2 id="系统迁移引导处理"><a href="#系统迁移引导处理" class="headerlink" title="系统迁移引导处理"></a>系统迁移引导处理</h2><p>在 UEFI + GPT 环境下直接复制全盘复制文件到新分区是可行的，前提是你的 NVMe 在原来的系统中要被认过一次，系统的设备管理器中的“存储控制器”一项出现了 NVMe 控制器，这是迁移可行的大前提。</p><p>文件复制完毕之后，你还需要做两个事情，否则，是进不去新驱动器上的系统的：</p><h3 id="改变注册表中默认分配盘符"><a href="#改变注册表中默认分配盘符" class="headerlink" title="改变注册表中默认分配盘符"></a>改变注册表中默认分配盘符</h3><p>首先你需要一个可用的注册表编辑器，定位到 <code>HKLM\SYSTEM\MountedDevices</code> 下，将 <code>\DosDevices\新系统所在的盘符:</code> 的值复制下来。挂载上新系统的注册表文件（通过文件-加载配置单元读取 <code>Windows\System32\Config\SYSTEM</code> 文件），然后定位到相同的项，将之前复制的值覆盖掉 <code>\DosDevices\C:</code> 的值即可。</p><h3 id="写入新的-BCD-配置"><a href="#写入新的-BCD-配置" class="headerlink" title="写入新的 BCD 配置"></a>写入新的 BCD 配置</h3><p>然后你需要一块系统安装盘，启动到系统安装界面，调出命令行(Shift + F10), 然后将新系统所在的分区的盘符挂成 “C”, 同时要给新硬盘上的 ESP 分区分配一个盘符，使程序能够写入文件，大概过程如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">diskpart</span><br><span class="line">list disk &apos;查看磁盘列表</span><br><span class="line">sele disk x &apos;x 是你新磁盘在列表中的编号</span><br><span class="line">list part</span><br><span class="line">sele part x &apos;x 是你新系统所在的分区编号</span><br><span class="line">assign letter=C &apos;分配新系统所在分区的盘符为 C</span><br><span class="line">sele part y &apos;y 是这块磁盘上的 ESP 分区编号</span><br><span class="line">assign letter=Y &apos;给 ESP 分区分配 Y 的盘符</span><br><span class="line">exit &apos;退出 diskpart</span><br><span class="line">bcdboot C:\windows /s Y: [/v] &apos;将 C:\Windows 作为启动目录写入到 Y: 上，&quot;/v&quot; 为可选参数，即详细模式</span><br></pre></td></tr></table></figure><p>重启之后就搞定了。</p><hr><p>那么，这台机子就这么算是正式启用了吧，之后会攒钱买块 Core i5 给换上就算是完全大功告成了，但愿它能陪我长一些时间吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前略，上周日，一次突如其来的停电袭击之后，我那本来就已经处在崩溃边缘的 K610D 终于不得行了，进系统之后必蓝屏，而且此次蓝屏的 Code 还不一样（说实话可能我基本上把 Windows 10 能出现的蓝屏代码全看了一遍了）。花了半天尝试了各种修复后故障依旧，没有办法之下
      
    
    </summary>
    
    
      <category term="Everything" scheme="https://xinoassasssin.github.io/tags/Everything/"/>
    
      <category term="Hardware" scheme="https://xinoassasssin.github.io/tags/Hardware/"/>
    
  </entry>
  
  <entry>
    <title>杂（四）</title>
    <link href="https://xinoassasssin.github.io/2018/04/something-3/"/>
    <id>https://xinoassasssin.github.io/2018/04/something-3/</id>
    <published>2018-04-22T15:14:00.000Z</published>
    <updated>2018-04-22T15:14:36.562Z</updated>
    
    <content type="html"><![CDATA[<p>烦躁的很。</p><p>最近心头一直堵着，有形无形的压力大到快把我压垮了。</p><p>首先列一个 To Do List:</p><ol><li>财务案例分析</li><li>资产评估报告</li><li>财务英语报告</li><li>数学重修考试</li><li>初级会计考试</li></ol><p>除了第四个是年轻犯下的错误之外，其他都是与这个我一点都不喜欢的专业相关的内容，我<strong>一点</strong>都不想做，但奈何，这是必须要完成的，尤其是前三个还是小组作业——别人都想要划水就我想认真做的那种。</p><p>内心的压力大到什么程度，我每晚二点前才将将睡着，早上七点半左右准时醒来，即使每天跑五圈还是不能让我早睡哪怕半小时。</p><p>这些杂七杂八的专业相关让我没有任何足够的空闲来学习别的东西，练手用的机核网电台收听器已经搁置了一个月没动过一行代码了，而年初定下的 RaidFinder 更是八字没有一撇——我会另写一篇博文来讲述这几个月碰到的曲折。</p><p>从三月末开始我就不断地在投实习简历，有一家上海的，很中意很想做的实习编辑，却因为时间问题，连去面试的机会都没有，而投出的其他简历则是一点回声都没有。今天我还是想通了，剩下的时间不如好好钻研代码，精通个一种 WebApp 框架就能让自己在就业的时候好过一些，最起码比这个做财务的强。</p><p>归根结底还是自己浪费了太多的时间，如果从高考完就意志坚定的学习代码，现在靠朋友内推应该已经拿到个实习机会了，怎么也比现在成天操心自己毕业实习那个章怎么办来的强。</p><p>不过我倒是不会把写博客的时间归于浪费，多码点字能让人的逻辑思维更加清晰，水文章来的更快，也是一种释放压力的好方式，虽然大概也没几个人看吧（笑）。</p><p>内心的烦躁大部分还是来自于就业，我看不到未来的路，一片迷茫。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;烦躁的很。&lt;/p&gt;
&lt;p&gt;最近心头一直堵着，有形无形的压力大到快把我压垮了。&lt;/p&gt;
&lt;p&gt;首先列一个 To Do List:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;财务案例分析&lt;/li&gt;
&lt;li&gt;资产评估报告&lt;/li&gt;
&lt;li&gt;财务英语报告&lt;/li&gt;
&lt;li&gt;数学重修考试&lt;/li&gt;

      
    
    </summary>
    
    
      <category term="Everything" scheme="https://xinoassasssin.github.io/tags/Everything/"/>
    
      <category term="杂" scheme="https://xinoassasssin.github.io/tags/%E6%9D%82/"/>
    
  </entry>
  
  <entry>
    <title>中国式家长</title>
    <link href="https://xinoassasssin.github.io/2018/04/Chinese-Parents/"/>
    <id>https://xinoassasssin.github.io/2018/04/Chinese-Parents/</id>
    <published>2018-04-20T11:54:01.000Z</published>
    <updated>2018-04-20T11:54:01.067Z</updated>
    
    <content type="html"><![CDATA[<p>所谓中国式家长，一般就是从小到大除了学习之外的事情什么都不想让你做，外边的事情什么都不想让你知道。恋爱？不许谈。游戏？不许打。动画片，漫画书？不许看。总而言之你只会读书是最好的。<br>然后一转眼到了大学，你出去了，暂时人身独立了，但是你还不能做到经济独立。这时候你的家长还是继续告诉你，竞争压力很大，家里没钱没关系，你好好用功读书，女朋友等毕业了找到工作稳定了之后再谈。你感觉到这些话有些耳熟，仔细一想这不是整整十多年他们一直在你耳边说的东西吗？<br>一点都没错，他们在你耳边重复了十多年的咒语，不仅仅不会消停，反而会变本加厉。他们希望掌控的，是你的整个人生，甚至某些家长希望你们为了他们而活着，他们把他们未能实现的梦想，寄托在你的身上。<br>然后你也是又矮又丑又胖，又没自信心，一整个大学不是对着书就是对着电脑朋友也没几个，认识的姑娘更是个位数，天天看着旁边宿舍的哥们换女朋友心里羡慕却又恨自己没能力。<br>然后你大学快毕业的时候，狠狠的努力了一把考上了什么事业单位什么公务员，本来想好好过段安稳日子了稍微玩一玩，你们的家长还是会继续给你念咒语：“我给你找了个相亲，周末去哪儿哪儿哪儿见个面”、“xxx家的姑娘跟你年纪差不多大你要不要去见一见？”<br>你也推脱不掉，双方都是心不在焉。于是不知道多少场相亲下来，稀里糊涂的找到一个还不错的姑娘，一来二去几个月稀里糊涂的结婚了。本来打算好好工作平时享受一段安稳日子的，你们的父母又开始了：“啥时候生个孩子呀我们想抱孙子了。”<br>你们被念叨的没有办法，仔细算了算家庭收入与开支，发现生个孩子会给经济带来沉重的负担，但是父母的咒语没有解法，你们没有办法之下只得生下孩子。<br>然后你们的父母就又能以“帮你领孩子”的借口入侵你的家庭，重新地回到大学前你天天被念咒语的时代。<br>你一旦对这种咒语发起挑战，他们会用另一条咒语来反驳的你没话说：“我们是为了你好。”<br>这是一种循环，你被父母的咒语念叨了二十多年，你发现，你教育孩子的方式，也是给他念这种咒语。<br>在吴地这种父母最多见。在三线小县城，这种父母最多见。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;所谓中国式家长，一般就是从小到大除了学习之外的事情什么都不想让你做，外边的事情什么都不想让你知道。恋爱？不许谈。游戏？不许打。动画片，漫画书？不许看。总而言之你只会读书是最好的。&lt;br&gt;然后一转眼到了大学，你出去了，暂时人身独立了，但是你还不能做到经济独立。这时候你的家长还
      
    
    </summary>
    
    
      <category term="Everything" scheme="https://xinoassasssin.github.io/tags/Everything/"/>
    
      <category term="杂" scheme="https://xinoassasssin.github.io/tags/%E6%9D%82/"/>
    
  </entry>
  
  <entry>
    <title>The Newsroom</title>
    <link href="https://xinoassasssin.github.io/2018/04/the-newsroom/"/>
    <id>https://xinoassasssin.github.io/2018/04/the-newsroom/</id>
    <published>2018-04-13T14:34:54.000Z</published>
    <updated>2018-04-14T14:37:56.673Z</updated>
    
    <content type="html"><![CDATA[<p>许多年前——其实也就是近几年——我听说了一部名为《新闻编辑室》的美剧，但却是前几天，我才看了这部早就应该看的剧。</p><p>这也是我看的第二部 HBO 出品的电视剧，第一部是《权力的游戏》。</p><h2 id="News"><a href="#News" class="headerlink" title="News"></a>News</h2><p>什么是新闻，我想不必再多赘言。而剧中新闻人们对于可播报的新闻，有着严格的审定程序，其中令人最为印象深刻的一条原则，就是“两个信源”原则，意思就是一个新闻必须有两个可靠的可信任的消息源(Source)来确认之后才是一个<strong>真实的</strong>新闻。这个原则是 ACN 头头 Charlie 坚守数十年的信条，在 S01E07 本·拉登这集中，这个原则体现的淋漓尽致。</p><p>看回到国内的现实状况。</p><p>我们的审查制度在某种意义上对于新闻的真实性和准确性是有帮助的，但是这种帮助的方式是有问题的。官方统一的口径固然重要，但是如果在某些存在重大争议性的社会事件上，不允许媒体发出自己的声音，没有各种不同角度的看法，那么在一定程度上就是对整个社会多样性的一种扼杀。</p><p>再来看剧集中以及现实中的国外媒体，我们不时就能看到对于政府的负面报道，在自由世界中，媒体甚至被喻为在行政立法司法三权之外的“第四权”。现今世界的民众通过媒体这一媒介了解大部分的信息，大众媒体的发展以及深入社会的每一个角落带来的是民众知情权的落实。</p><p>但新闻人，需要审查。</p><p>新闻人需要的审查是自我审查，而不是国家来对你的新闻进行审查，自我审查的应该是新闻中的事实成分是不是准确客观。事实如何，新闻就该是如何，客观始终是新闻人最需要遵守的一大原则。在新闻报道中不可避免的会带入媒体的主观色彩，但是不能因为你想用自己的主观看法去影响受众就去更改展现给受众的“事实”。</p><h2 id="人性"><a href="#人性" class="headerlink" title="人性"></a>人性</h2><p>新闻人是冷酷的，他们报道的是冷酷的客观事实。那么新闻人就一定会是冷血的吗？不是，绝不是。</p><p>剧集中展现出来的新闻人们，都是一个个活生生的人，他们有血有肉有心有自己的真情实感。</p><p>在剧终集的 Charlie 的葬礼上当 Mac 告诉 Will 她怀孕之后，Will 整个人就从一个略有一丝冷血的人改变了，他意识到他即将成为一个父亲。他有些慌张，以至于在一些时刻他语无伦次，甚至走进了婴儿房。</p><h2 id="美利坚"><a href="#美利坚" class="headerlink" title="美利坚"></a>美利坚</h2><p>美利坚是一个移民国家。</p><p>美利坚是自由世界的灯塔。</p><p>美利坚是……</p><p>我们谈起美国这个国家，想到的关键词，大部分是与自由民主强大世界警察之类的所相关。但不可忽视的是，它内部的各种问题，正在且一直都在影响着这个伟大的国家。从建国初期的内战，到二十世纪初的托拉斯崛起带来的各种问题、二十世纪中期的种族平权运动再到今天的自由派与保守派之间的矛盾分歧越来越大甚至重新兴起了极左极右的思潮。</p><p>当然，美利坚一次再一次地从各种问题的吞噬中脱身，就如 S01E01 中 Will 在西北大学说的最后那番话一样。</p><blockquote><p>We were able to be all these things and do all these things because we were informed… by great men, men who were revered. First step in solving any problem is recognizing there is one.</p></blockquote><p>美利坚能够认识到问题并解决它，他们的政治建构在一个超稳定的结构体系上，他们的社会虽然存在着各种各样的问题，但是他们拥有民主，他们拥有投票权。虽然从剧集中得知，原来的政治献金对于公司的捐赠限制在世纪末的时候已经被废除了，政坛上将会越来越充斥着金钱的臭味。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;许多年前——其实也就是近几年——我听说了一部名为《新闻编辑室》的美剧，但却是前几天，我才看了这部早就应该看的剧。&lt;/p&gt;
&lt;p&gt;这也是我看的第二部 HBO 出品的电视剧，第一部是《权力的游戏》。&lt;/p&gt;
&lt;h2 id=&quot;News&quot;&gt;&lt;a href=&quot;#News&quot; class
      
    
    </summary>
    
    
      <category term="Everything" scheme="https://xinoassasssin.github.io/tags/Everything/"/>
    
      <category term="杂" scheme="https://xinoassasssin.github.io/tags/%E6%9D%82/"/>
    
  </entry>
  
  <entry>
    <title>我的单相思</title>
    <link href="https://xinoassasssin.github.io/2018/03/boy-loves-girl/"/>
    <id>https://xinoassasssin.github.io/2018/03/boy-loves-girl/</id>
    <published>2018-03-26T19:38:26.000Z</published>
    <updated>2018-05-12T13:25:09.920Z</updated>
    
    <content type="html"><![CDATA[<section style="text-align: center;"><br><br>今天，我来写一个男孩的恋爱故事：<br><br>—<br><br>男孩遇到女孩是在他十二岁的时候<br>那是初一刚开学<br>他带着被不公划分的愤懑来报了到<br>一眼望去，除了几个小学同班的，别的都不认识<br>就这样，他开始了他的初中生涯，一晃，到了初一下<br>男孩发育的晚，个子在那时的班上显得特别矮，于是便一直占据着第一排的座位<br>有一天，他注意到左边隔了一条“走廊”的女孩<br>“啊你是我小学隔壁班的那谁”，男孩想起来了<br>女孩很好奇，“我很出名吗”<br>“没，只是听过你的名字”，男孩解释道<br>有时他们就这样有一句没一句的聊着<br><br>—<br><br>男孩被家里管得紧，心思却野的很<br>在班上干了不少被人唾弃的事情<br>那个学期末，他考了个很次很次的排名，被骂的很惨<br>从此，他过上了周末补课的生活<br>整个初二，他都在跟成绩斗争着<br><br>—<br><br>一晃眼，初三了<br>男孩挺拼的，终于把成绩搞回去了<br>但心思野是没办法治的<br>荷尔蒙作祟下，他对一直都留意着的女孩产生了兴趣<br>他开始频繁的找女孩聊天，就像无数个人生活中发生的那样，他们开始慢慢互相了解<br>男孩突然发现自己早就喜欢上了女孩<br>他拙劣地表演着自己简单的喜欢<br>十一月<br>一次考试之后，班主任要调整座位<br>男孩略施小计就提前看到了班主任留在班级电脑上的新座位表<br>他看到班主任把他和女孩分在了一起<br>他高兴的差点晚上差点没睡着<br>第二天中午，换完座位的他，坐到了整个教室最左侧第三排靠窗的位置，旁边就是他喜欢的女孩<br>有那么一瞬间，他觉得自己是幸福的<br>成为同桌之后，说话更方便了，再加上男孩朋友们的“助攻”，感情增进的很快<br>在一个温暖冬日，即将放学的时候，男孩的告白不当心脱口而出了<br>“我喜欢你啊”<br>男孩眼中映着的女孩的脸，是窗外即将落山的夕阳的颜色<br>男孩也不知道发生了什么，日子一切照旧，嬉笑打闹，哭啼皆有<br>男孩是幸运的，从十一月之后，班主任再也没有调整过座位<br>直到第二个学期开始<br>即将分离的气氛开始浓重，中考也成了生活的绝对重心<br>男孩和女孩不知道怎么了，拌嘴的频率越来越高<br>两次模拟考之后，保送高中的名单确定了下来<br>男孩离县上最好高中的保送资格一步之遥<br>虽然他早就预感到了这个事实，但不禁还是有些受到打击<br>于是，班上走掉了许多人，座位又要调整了<br>这次，女孩坐到了男孩的左前方，男孩的同桌成了他当时最好的朋友W<br>男孩发现，女孩和W的关系好的不行<br>他们经常煲电话粥，上课还疯狂传纸条<br>男孩心里有些酸，终于有天发作了，一生气就一直不理会那两人<br>他们觉得很莫名奇妙，让男孩生了几天闷气，最后自然的消气了<br>清明节，女孩的爷爷去世了，第二天她来上课的时候，眼眶红的很<br>又一次模拟考，男孩的成绩出现了大幅下滑<br>老师开始找他，家长也在施加压力<br>即使是这样，最后男孩还是买了两分才进那所最好的高中<br>而女孩，则是考去了另一所学校<br>于是，男孩彻底与女孩分开了，物理距离上<br>考完之后，男孩和女孩一起在学校帮忙的时候<br>班主任和数学老师开他们玩笑<br>“我发现男孩上课不认真的原因是一直在看女孩”，数学老师笑嘻嘻的<br>男孩脸一红，瞟了一眼女孩，发现女孩也在看他<br>“要是一直都能在一起多好啊”，男孩在心中叹了口气<br>突然他想起来，女孩的QQ都还没加上<br>在他们还是同桌的时候，女孩把自己的密码给了男孩，虽然她说很多人都已经有她的密码了<br>男孩偷偷的把自己的密码跟女孩改成一样的，一直用到现在<br>半夜，男孩登上女孩的QQ，把自己加了进去<br>第二天，学校又要开班会，结束之后，女孩突然就问男孩<br>“你是不是登我Q了”<br>“是啊，我加了我自己”<br>“那你为什么不把分组给改了？”<br>“忘了”，男孩摸了摸头<br>女孩生气了，她把拳头砸在男孩肩上<br>男孩突然被重击了一下，吃痛，无名火也冒上心头<br>但他转念一想，还是他错在先，于是就离开了<br>正巧，下着雨，他搭了同学的车回家<br>一路上，车载音响都在放着信乐团的《离歌》<br>“真是切合今天呢”，男孩心想<br>就这样，一个暑假，双方谁也没理谁<br>男孩一直都想找机会道歉，但那句“对不起”却始终出不了口<br><br>—<br><br>马上，高中也要正式开学了<br>剩不了几天的时候，女孩突然联系了男孩<br>“今晚我要翘家找一个网友”，女孩说<br>网友是她很久之前就认识的一个大男孩<br>于是男孩陪她聊到很晚很晚<br>突然间，那几天，他们又迅速地熟络了起来<br>男孩也趁机把自己最好的朋友G介绍给了她<br>她看起来对G非常感兴趣<br>那几天，即使是在军训期间，他们三个也经常聊到很晚<br>G比男孩女孩都小上一级，因为父亲跟男孩父亲是发小，于是也就认识了<br>很快男孩发现自己和G有许多共同话题可以聊<br>开学了，男孩的手机被缴了<br>但男孩还是成功地约出了女孩，虽然地点是在G的家里<br>女孩和G第一次见了面<br><br>—<br><br>接下去的发展，简直是一个疯了的剧本家写出来的<br>女孩和她班上的一个男孩恋爱了，这不是她的初恋<br>男孩很迟才知道这件事<br>男孩像疯了一样地往女孩的空间留言<br>他终于真的受不了了<br>男孩把事情扩散的很大，连不在一个学校的友人W都打电话过来问男孩是不是真的要放弃了<br>“我累了，想休息”，男孩认真地回答<br>快要到女孩生日了，男孩认真的准备了她提到过想要的书<br>然后写了将近三十页A4纸的文字一起寄给了女孩<br>根据女孩的空间留言板记录看，她那几天一直在哭<br>男孩心也痛，自己为什么这么爱吃醋呢，他想<br>他也没想到自己会如此伤害到女孩<br>“唉，要不道个歉态度软下来继续做朋友吧”，他内心的一半这么想<br>“不行，她谈了恋爱还不告诉我，我接受不了当备胎的感觉，要惩罚她”，另外一半这么想<br>于是，就在每天的纠结中，迎来了寒假<br>男孩认识G后不久就被安利了不少动画片<br>高中刚开始那个国庆，他开始了萌二生涯<br>于是，整个寒假都几乎用来补番<br>快要开学的一天，女孩发了一条煽情说说，不知道求了多少人来转发好让男孩看见<br>男孩气早就消了，心也软的差不多了<br>他只是想再撑一撑给自己留存一些脸皮<br>然后开学前一晚，女孩和她的男朋友同时找到男孩来抱怨，他们即将分手<br>男孩哭笑不得<br>因为新一届实行的高一第一学期结束就分班的制度<br>男孩又一次来到了新的班级<br>“哦，原来你就是那个谁啊”，男孩发现不少人都听过他的名字<br>以他最意想不到的方式<br>进入高中之后男孩的心思没有放在学习上太多<br>而是一天到晚不务正业<br>他从高中进校开始就被打上了“问题学生”的标签<br>什么高中第一学期开学第二周搞错周一到校时间<br>晨会的时候，自己班级正巧站在正对着校门的台阶上目送他进校门<br>什么第二学期上课玩touch被收被赶出晚自修作为惩罚<br>总而言之，读书劲大不如前了<br>男孩稀里糊涂的混着日子<br>终于快放暑假了，因为课程改革的关系，学校安排了两天的实践课程<br>男孩选择了一门在机房上的课，然后把整个机房改造成了网吧<br>几乎所有人都在打游戏<br>第二天的时候，女孩来给男孩送外卖<br>男孩直接脱下自己的校服，女孩混了进来，就这么坐在男孩身旁看着他打了一下午的游戏<br>暑假<br>快到男孩的生日了，女孩很上心的叫了一些朋友，大家在大热天吃火锅<br>钱都是女孩付的，还送了一个男孩喜欢的角色的手办<br>因为不方便带进家里，男孩把礼物转交给了G保管<br>吃完火锅，一群人进了黑网吧打游戏，女孩却和G在那儿看动画聊天<br>男孩笑笑，也不在意<br>直到几个礼拜之后，他得知G一直在约女孩一起图书馆<br>有一天中午，女孩跟男孩说图书馆没位置了去G家里了<br>男孩终于急了<br>G把女孩称作自己的女仆<br>有一天，G发了一份女仆宣言给了男孩<br>男孩没明白啥意思，G也就没多说<br>G也进了男孩的高中，男孩有事没事就找G一起吃饭<br>男孩把自己的午饭钱全花在各式各样的杂志上了，只好蹭饭卡<br>但高二第一学期快结束的时候，男孩突然迷上了翘课去网吧<br>于是几乎整个高二第二学期的晚自修，男孩都是在网吧度过的<br>整个高二，男孩都没怎么和女孩说过话，女孩倒是寄过两封信<br>男孩嫌麻烦，一直都没写回信<br>很快的，高三了<br>最开始的一个月，男孩用尽了所有心思把《冰与火之歌》给看完了<br>顺带着在家长会上被狠批了一顿<br>男孩被调到了讲台旁边，他终于开始收心<br>班主任看着他有点起色的成绩放了点心，一个月后把他给下放了<br>于是他又开始散心<br>一天，他在书店里发现了一本之前从来没见过的杂志，叫做《新知》<br>其文章晦涩难懂，不少涉及到哲学内容，让男孩沉迷其中，直到晚自修班主任站在他面前<br>班主任一把夺过这杂志，走到在班级后面的水桶旁，三下五除二的，把书撕了，教室安静极了<br>“下了课来我办公室”，班主任说<br>不出意外的，男孩又被流放了<br>不能告诉家里，图书馆又每晚八点多就关门了，那去哪里好呢<br>男孩选择了网吧<br>寒冷的冬夜里，男孩拖着中饭晚饭几乎一点都没吃的身体，在那条长达五公里多的回家路上踩着单车<br>回家的路有一段和女孩回家的路是重合的<br>一天，他在回来的路上看到了熟悉的影子<br>是她，追上她，男孩用尽全力的踩脚踏<br>奈何，他所剩不多的力气在两座桥面前无能为力<br>连叫住她的声音都发不出，生怕喊住的，不是她<br>男孩就这么又开始混着日子<br>就是在这段日子里，他发现女孩的微博更新了，转发了好多情感类的鸡汤<br>他意识到肯定有些什么事情发生了<br>他在中午的时候拦到了G<br>“你跟她发生了什么？”，他质问道<br>G隐晦的表达出了他A了上去然后打出GG的故事<br>男孩又一次哭笑不得，他最不想发生的事情发生了<br>G又告诉他，一年前发给他的女仆宣言就是说他喜欢上了女孩<br>男孩再次无言<br>G还告诉他，G也写了很多很多文字，附上了礼物放在家门口看着女孩来取走<br>男孩已经不知道能怎么表达自己的情感了<br>他回到教室，开始写信<br>信的内容只字不提她和G发生了些什么，只是写些日常<br>女孩的回信也是如此<br>仿佛他们回到了最早的时候<br>三四次通信之后，又是新学期<br>一天男孩的家里没做早饭<br>男孩选择去女孩家门口的早餐店买<br>刚给完钱接过东西，他的余光看到一辆电动车从小区驶出<br>直觉告诉男孩就是她<br>他飞奔上车，像那个冬夜里那样用尽全力去追赶<br>可惜，最终还是差那么点距离<br>男孩还是没能喊出她的名字<br>离高考就只剩几天了<br>男孩最后一次翘课去网吧，似乎是一种告别仪式<br>他没等到自己学校的放学时间离开，而是在女孩放学时候去了她的校门口等她<br>他真的等到了她，可能是有史以来第一次，他们一起回家<br>路上，他也只能嘘寒问暖提些无关紧要的话题<br>他还能提些什么呢？<br>太快了，就像高中三年的速度一样，他们分别了<br><br>—<br><br>男孩考去了遥远的C市，而女孩则是在就近的H市就读<br>暑假的最后一段时间，因为一些变故，男孩痛不欲生<br>事情解决之后，男孩家不得不安排一顿大学酒<br>男孩邀请了她，还有G是不得不邀请的<br>男孩知道会很尴尬<br>她来了，一身白裙，很漂亮<br>G自己坐在一旁，玩着手机<br>男孩酒量不行，几杯红酒下肚已经进入了半倒的状态，连同学什么时候走的都不知晓<br>那时最后一次和她见面<br>进入九月，那天就要出发前<br>男孩想起还有一些材料要复印<br>于是约了友人H载他<br>路上，H提到要不要把她再叫出来见个面<br>男孩想了想，“没时间算了吧”<br>H摇了摇头，也没再多说什么，最后他们拍了拍肩告别<br><br>—<br><br>大学刚开始的时候，男孩还会给她打电话聊天<br>几次一聊就是半小时<br>男孩发现自己还是放不下女孩<br>放不下意味着不可能开始新的感情<br>光棍节，趁着酒意，他找到女孩<br>“不要异地”，女孩明确的拒绝了他<br>他笑了笑<br>年末的时候，又因为一些变故，男孩的心理压力大到承受不了了<br>他终于再次打了女孩的电话<br>断断续续地倾诉到手机欠费<br>这是他最后一次听到她的声音<br>从此，男孩再也没联系过女孩<br>女孩也没联系过男孩<br>直到一年半后<br><br>—<br><br>大二的寒假，男孩约G一起去上海玩<br>途中，男孩提起女孩<br>“你和她怎么样了”<br>“啊，加回好友了”<br>也没聊更多<br>五月末，G突然找到男孩，问他暑假要不要一起去某站的演唱会<br>男孩算了算手头的钱，“手头有点紧，还是算了吧”，他回复说<br>暑假<br>男孩找G一起去J市修手机，归途，无意间男孩看到G的淘宝记录，两张票<br>“你和谁一起去啊”，男孩好奇的问<br>“哦，没告诉你吗，你不去我就找了她啊”，G很坦然<br>“你们和好了？什么时候”<br>“不是告诉过你了吗？她加回我好友了啊”<br>男孩心中开始充满不安<br>但他强装出一副镇定的模样<br>“你们酒店要押金你钱够吗”，男孩递出一张信用卡，“这里面还有点钱，你拿着用以后还我”<br>“记得带套”，他最后叮嘱了一句<br>原本他以为他已经放下的感情，又开始在他心中冲撞<br>他坐卧不安<br>临行前几天，他终于忍不住了，在女孩的留言板留下了两年后的第一句话<br>没想到女孩迅速找到了他，“你想说什么，赶紧说我看着的”<br>他有些慌，打了字又删掉<br>“你想说什么发出来吧，我明天还要早起先睡了”，女孩似乎很忙<br>男孩呼出一口气，扔给对方一个99+<br>却两天没收到女孩的回复<br>终于，他等到了回复<br>可那几乎是陌生人的感觉，不是他想要的回复<br>有总归比没有强吧，男孩心想<br>男孩早就反思过自己的过错，但已经是既成事实了，没有后悔药<br>行程第二天早上，他看到G很早就在线了<br>“她一回酒店就睡着了”，G这么说<br>“这酒店服务太好了还给加了床”，G还抱怨<br>男孩笑笑，再也没跟G提起过她<br>他准备好了去旅行<br><br>—<br><br>又是一个寒假，照例，G会来男孩家一趟交换点资料什么的<br>男孩旁敲侧击提起女孩<br>“啊，她，我女朋友啊”，G云淡风轻<br>男孩还是只能笑笑，转移了话题<br>他不信，他不愿相信<br><br>—<br><br>男孩又开始找女孩说话，只是只敢以留言板的形式<br>他们似乎回到了最早的时候，在对方的留言板上你一句我一句的<br>不同的是，男孩的留言板上，没有别人的留言<br>今天，男孩终于感受到了一丝异样<br>女孩和G在用同样的聊天习惯说话<br>男孩笑笑，既成事实，不想承认也是摆在那里的<br><br>—<br><br>男孩和女孩的故事，还在继续。<br><br></section>]]></content>
    
    <summary type="html">
    
      
      
        &lt;section style=&quot;text-align: center;&quot;&gt;&lt;br&gt;&lt;br&gt;今天，我来写一个男孩的恋爱故事：&lt;br&gt;&lt;br&gt;—&lt;br&gt;&lt;br&gt;男孩遇到女孩是在他十二岁的时候&lt;br&gt;那是初一刚开学&lt;br&gt;他带着被不公划分的愤懑来报了到&lt;br&gt;一眼望去，除了几个小学同班
      
    
    </summary>
    
    
      <category term="Everything" scheme="https://xinoassasssin.github.io/tags/Everything/"/>
    
      <category term="Memories" scheme="https://xinoassasssin.github.io/tags/Memories/"/>
    
      <category term="杂" scheme="https://xinoassasssin.github.io/tags/%E6%9D%82/"/>
    
  </entry>
  
  <entry>
    <title>关于抗锯齿</title>
    <link href="https://xinoassasssin.github.io/2018/03/about-AA/"/>
    <id>https://xinoassasssin.github.io/2018/03/about-AA/</id>
    <published>2018-03-11T09:51:47.000Z</published>
    <updated>2018-03-25T14:23:46.495Z</updated>
    
    <content type="html"><![CDATA[<p>今天听 Gadio News 的时候，最末尾一段提到了希望有人能来讲讲抗锯齿技术。才疏学浅，但是前几年看 MC 的文章还是知道一点相关内容，所以就来看着维基写写看，如有不正之处劳请指出。</p><h2 id="锯齿与抗锯齿"><a href="#锯齿与抗锯齿" class="headerlink" title="锯齿与抗锯齿"></a>锯齿与抗锯齿</h2><p>首先，什么是锯齿，以及为什么会出现锯齿。</p><p>我们的屏幕，是以一个个正方形的像素点组成的，而正方形的特性导致了在倾斜的线上，边缘必定会出现一个个突起的阶梯状“毛刺”，比如图上这种<img src="/images/04fb3bbbec0c10e70c660aac1efd7cf1_r.jpg" alt="preview"></p><p>这种阶梯状的“毛刺”就是典型的锯齿。而有了锯齿也就有了抗锯齿(Anti-Aliasing).</p><p>抗锯齿的一般过程就是将这个毛刺的边缘柔化，使图像边缘看起来更平滑。如图：<img src="/images/4ec755cfd484c8333f094f57b97f3408_hd.jpg" alt="img"></p><h2 id="各种算法简单介绍"><a href="#各种算法简单介绍" class="headerlink" title="各种算法简单介绍"></a>各种算法简单介绍</h2><p>抗锯齿算法种类非常多，下面的介绍顺序基本上是各种抗锯齿算法出现的时间顺序。</p><h3 id="SSAA"><a href="#SSAA" class="headerlink" title="SSAA"></a>SSAA</h3><p>超级采样抗锯齿(Super-Sampling Anti-Aliasing, 也可叫做 Supersampling 超采样)是最早也最简单粗暴的抗锯齿手法，它的原理非常简单，就是在渲染时将要输出的分辨率提升 x 倍，比如要输出 1920x1080 的分辨率到屏幕上，开启 SSAA 2x, 那么内部渲染时的分辨率就是 3840x2160, 然后 Downsampling 到 1920x1080 上，自然在许多纹理边缘上就显得平滑许多。但是这种方式太太太吃资源了，所以又开发出了新的算法。</p><p>在 Nvidia 发布二代 Maxwell 架构的时候，同时发布的 <a href="http://www.geforce.cn/hardware/technology/dsr/technology" target="_blank" rel="noopener">DSR</a> 技术中就有 SSAA 的影子，技术思路同样是以更高分辨率渲染的原始画面输出到显示器分辨率上来得到更加精细平滑的画面。</p><h3 id="MSAA"><a href="#MSAA" class="headerlink" title="MSAA"></a>MSAA</h3><p>SSAA 太吃资源了，我们的硬件暂时还跟不上，怎么办？于是就有了多重采样抗锯齿(Multi-Sampling Anti-Aliasing), 它跟 SSAA 的区别就是，MSAA 只对于多边形的边缘进行抗锯齿处理。比如一个红色的圆，只对圆周作抗锯齿多重采样计算，但是圆周以内的部分则不会处理。这种方式下的画面锯齿得到了一定的抑制，而抗锯齿需要的资源也大幅下降到可接受的范围中。所以 MSAA 也逐渐成为目前被使用的最多的抗锯齿技术。</p><p>但是 MSAA 也有其局限之处，比如对于半透明物件、边缘不明确或者非常复杂的物件比如密集草丛、铁丝网这类的抗锯齿处理就比较力不从心。</p><h3 id="CSAA-amp-CFAA"><a href="#CSAA-amp-CFAA" class="headerlink" title="CSAA &amp; CFAA"></a>CSAA &amp; CFAA</h3><p>历史进入 Direct 10 时代，NV 方先声夺人发布了 G80 系列，同时带来了覆盖采样抗锯齿(<a href="http://www.nvidia.com/object/coverage-sampled-aa.html" target="_blank" rel="noopener">Coverage-Sampling Anti-Aliasing</a>)技术，主要改进了取样类型从而使得抗锯齿效率提升，资源占用量也得到减少。举例来说，如果使用 16x MSAA，需要在周围取得 16 个采样点的色彩值和 Z 轴值，然后保存这些数值进行计算。而 16x CSAA，则全部在被采样的像素点中心取得色彩之和Z轴值，然后对比并去掉同样的数据。一般来说，16x CSAA 后只需要保存 4 份色彩值和 Z 轴值即可。换句话来说，4x MSAA 耗费的资源和 16x CSAA 是相同的，但是，16x CSAA的画面效果相比 4x MSAA 更好。</p><p>同期 ATI 在发布 R600 系列时也带来了可编程过滤抗锯齿(Custom Filter Anti-Aliasing)技术。简单的来说 CFAA 就是扩大取样面积的 MSAA，比方说之前的 MSAA 是严格选取物体边缘像素进行缩放的，而 CFAA 则可以通过驱动判断对影响锯齿效果较大的像素进行缩放，以较少的性能牺牲换取平滑效果。</p><p>但是由于种种原因，CSAA 被接受程度更高一些，不少游戏就直接加入了 CSAA 选项。而 CFAA 由于需要在显卡驱动面板中进行调试而渐渐被用户所遗忘。</p><h3 id="MLAA-amp-FXAA"><a href="#MLAA-amp-FXAA" class="headerlink" title="MLAA &amp; FXAA"></a>MLAA &amp; FXAA</h3><p>在 CFAA 被遗忘之后，AMD-ATI 带来了形态抗锯齿(Morphological Anti-Aliasing).</p><p>不同于上面几种需要对多边形边缘进行分析计算的算法，MLAA 是一种后处理技术，发生在整个 3D 计算完成即将输出画面到屏幕上前，打个比方就是你拍完照用 Photoshop 处理的过程。</p><p>MLAA 的实际效果还是非常不错的，但是资源耗用还是有点厉害的。它的最大优势就是不需要游戏来支持它，因为是后处理技术所以在显卡驱动面板中打开就能用而且兼容性非常好。但是由于其仅仅使用颜色数据来判断抗锯齿边缘，因此 MLAA 的应用可能导致无法辨识到底哪些边缘需要进行抗锯齿计算。特别是一些不需要抗锯齿的地方，如文字，表格等，可能都由于不当抗锯齿而显得圆滑甚至怪异。</p><p>这边 A 家出了新抗锯齿技术，老冤家 NV 当然也不甘落后，在 Fermi 上推出了快速近似抗锯齿(Fast Approximate Anti-Aliasing)。</p><p>FXAA 和 MLAA 一样，也是一种后处理抗锯齿，两种 AA 在原理上相似，但是由于 FXAA 可以在 AN 两家的卡上都可以用而 MLAA 则由于部分计算处理依赖于硬件所以只能在 A 卡上用，最后导致 FXAA 被广泛的采用了。而且同时期 FXAA 的性能损失比 MLAA 更小，而效果上基本能接近 4x MSAA 的画面，虽然同样还是会出现“字体破坏”的情况。</p><h3 id="TXAA"><a href="#TXAA" class="headerlink" title="TXAA"></a>TXAA</h3><p>在抗锯齿这条路上，众多程序员以及各种“家”的探索是不会停下来的。在 Kepler 架构发布的同时，NV 也带来了新的 <a href="http://www.geforce.cn/hardware/technology/txaa/technology" target="_blank" rel="noopener">TXAA</a>(Temporal Anti-Aliasing 可称为“时间性抗锯齿”)技术，据 NV 自家的介绍，这项技术集时间性过滤器、硬件抗锯齿以及定制的 CG 电影式抗锯齿解算法于一身。</p><p>原有的抗锯齿技术在解决静态画面的锯齿上可以说已经达到了瓶颈了，但是在动态画面上，有锯齿的部位很容易出现闪烁。如同其名字中的“时间性”，TXAA 旨在解决“时间性抗锯齿”，也就是动态画面中的锯齿闪烁等问题。而其同时提供着不输于 8x MSAA 的静态画面抗锯齿效果。</p><p>TXAA 可以说是目前被采用的较多的抗锯齿算法中最厉害的一种了，但是它一是需要硬件电路配合，二是吃资源，以性能换画面，所以也基本上是中高端 N 卡用户用的。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>目前主流的一些抗锯齿技术大概就是这么多了，本文很多内容都是参考中文互联网上的一些文章写成的。第一次在机核发文，存在的许多不足之处也请多多包涵。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天听 Gadio News 的时候，最末尾一段提到了希望有人能来讲讲抗锯齿技术。才疏学浅，但是前几年看 MC 的文章还是知道一点相关内容，所以就来看着维基写写看，如有不正之处劳请指出。&lt;/p&gt;
&lt;h2 id=&quot;锯齿与抗锯齿&quot;&gt;&lt;a href=&quot;#锯齿与抗锯齿&quot; class
      
    
    </summary>
    
    
      <category term="Everything" scheme="https://xinoassasssin.github.io/tags/Everything/"/>
    
      <category term="Game" scheme="https://xinoassasssin.github.io/tags/Game/"/>
    
      <category term="Hardware" scheme="https://xinoassasssin.github.io/tags/Hardware/"/>
    
  </entry>
  
  <entry>
    <title>Arch Linux 小折腾记</title>
    <link href="https://xinoassasssin.github.io/2018/02/install-an-archlinux/"/>
    <id>https://xinoassasssin.github.io/2018/02/install-an-archlinux/</id>
    <published>2018-02-13T07:46:21.000Z</published>
    <updated>2018-03-25T14:31:46.431Z</updated>
    
    <content type="html"><![CDATA[<p>久闻 Arch Linux (下文简称 Arch )大名，在虚拟机上多次完成过了整个系统的安装与图形界面的配置，也试过了 KDE 和 GNOME 这两个大名鼎鼎的图形环境，深切体会到了 Arch Linux 的四大原则：</p><ul><li>Simplicity</li><li>Modernity</li><li>Pragmatism</li><li>User Centrality</li></ul><p><del>Pacman 是最好的包管理器</del></p><hr><p>我分别在自己的台机上和一台 ThinkPad S1 Yoga 2014 上安装 Arch. 具体过程跟着官方 <a href="https://wiki.archlinux.org/index.php/Installation_guide" target="_blank" rel="noopener">Installation Guide</a> 走就行了，Wiki 中的注意事项也是比较全面了，本文写几个小注意点。</p><h2 id="Btrfs"><a href="#Btrfs" class="headerlink" title="Btrfs"></a>Btrfs</h2><p>不知道 Btrfs 的我建议你马上查 Wikipedia.</p><p>Arch 的安装 ISO 环境中是自带了 Btrfs 的工具包和支持的，但是在 base 软件包中不包含这些，所以你需要手动安装 <code>btrfs-progs</code> 这个包，然后在 /etc/mkinitcpio.conf (注意是在 <code>arch-chroot</code> 这一步之后)中的 HOOK 一行中添加 btrfs, 之后跑一遍 <code>mkinitcpio -p linux</code>, 看到输出中有 btrfs 即可。</p><p>关于 btrfs 的配置问题，参见官方 Wiki, 也可以参考 <a href="https://github.com/egara/arch-btrfs-installation" target="_blank" rel="noopener">egara/arch-btrfs-installation</a>.</p><h2 id="Boot-Loader"><a href="#Boot-Loader" class="headerlink" title="Boot Loader"></a>Boot Loader</h2><p>在 Boot Loader 的选择中，我个人还是比较倾向于直接使用 systemd 集成的 systemd-boot, 懒得再装个 GRUB.</p><p>虽然 systemd-boot 局限性非常大，比如它只能加载 EFI 可执行文件比如 bootmgfw.efi, vmlinuz-linux.</p><p>如果选择了 systemd-boot 作为 Boot Loader, 那么就需要在 <code>arch-chroot</code> 后手动运行一次 <code>bootctl --path=$ESP install</code> 来把引导程序安装进 EFI 分区中并向 UEFI 界面注册这个引导器，之后你在启动时按 F12 就可以看到一个 Linux Boot Loader.</p><p>但是如果只是将 Boot Loader 安装到了 EFI 分区还不足以让它引导我们进 Arch, 仍然需要在 /boot/loader/entries/ 这个目录下建立新的 conf 文件，里面的内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title Arch Linux</span><br><span class="line">linux /vmlinuz-linux</span><br><span class="line">initrd /initramfs-linux.img</span><br><span class="line">options root=(PARTUUID|PARTLABEL)=xxxxxxxxxxxxxxxxxxxxxxxx rw</span><br></pre></td></tr></table></figure><p>如果使用的是 Intel 的 CPU 并且有安装 <code>intel-ucode</code> 包，那么在第3行之前再加一行 <code>initrd /intel-ucode.img</code> 启用它。</p><p>建立完了引导所需的系统 config, 需要在 /boot/loader/loader.conf 中的 default 一行中指定刚才建立的 config 文件名，然后使用 Linux Boot Loader 引导器就会默认进入 Arch Linux.</p><h2 id="双系统与时钟"><a href="#双系统与时钟" class="headerlink" title="双系统与时钟"></a>双系统与时钟</h2><p>感谢 UEFI 标准，现在我们可以非常方便地组建双系统 (Windows + Linux) 环境。</p><p>如果使用的 Boot Loader 是 systemd-boot, 那么它会自动检测 Windows 的存在，并且在选择菜单自动提供一个 Windows 的选项，这个选项的配置名为 <code>auto-windows</code>, 选择它会运行 /boot/Microsoft/Boot/bootmgfw.efi 然后就是 Windows 的流程了。</p><p>双系统有一个很大的问题，就是时钟。Windows 默认往 BIOS 写入本地时间，而不是 Linux 标准的 UTC, 这就会导致你从 Windows 切换过去后时间会+8, 也就是按你的时区调整然后又写回到 BIOS 中。从 Linux 切换过去，Windows 认为是本地时间，于是显示给你的实际上是 UTC. 所以为了解决这个问题，在安装 Arch 时，使用 <code>hwclock --hctosys -l</code> (将硬件时间作为本地时间读入系统), 而不是 Guide 上所用的 <code>hwclock --systohc</code>(将系统时间写入 BIOS 并且是 UTC).</p><p>之后启动到 Windows, 注册表定位到 <code>HKLM\SYSTEM\CurrentControlSet\Control\TimeZoneInformation</code> 添加一个 DWORD, 名为 <code>RealTimeIsUniversal</code> 值为 1, 即可实现 Windows 往硬件中写入的时间是以 UTC 为标准而不是本地时间。</p><h2 id="systemctl-enable"><a href="#systemctl-enable" class="headerlink" title="systemctl enable"></a>systemctl enable</h2><p>由于 Arch Linux 的哲学，大部分软件包在安装之后也并不会自动启用，需要你手动 <code>systemctl enable|start xxxx</code>. 尤其要留意的是，还在 ISO 环境下安装系统的时候就要把 dhcpcd 这个服务给 enable 了，解决你进系统之后发现连不上网络想半天不知道问题出在哪里的问题。当然这是针对有线网卡，而大部分无线网卡，我推荐直接使用 Network Manager 搞定。当然使用无线网卡的首次联网你还是需要如下步骤：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ip link set dev interface up</span><br><span class="line">iw interface scan</span><br><span class="line">wpa_supplicant -B -i interface -c &lt;(wpa_passphrase SSID Password)</span><br></pre></td></tr></table></figure><p>还有一点需要注意的是，Arch 的 Shadowsocks-libev 默认读取的配置目录在 /etc/shadowsocks/, 与 Python 版相同的目录而不是传统的 /etc/shadowsocks-libev/ 下，启用它的命令为 <code>systemctl enable shadowsocks-libev@配置文件名.service</code> .</p><h2 id="Intel-有线网卡的坑"><a href="#Intel-有线网卡的坑" class="headerlink" title="Intel 有线网卡的坑"></a>Intel 有线网卡的坑</h2><p>当你机器上使用的网卡的是 Intel Ethernet Connection I21x 的时候，你要小心了，在安装 Arch 之前，在 Windows 中安装 Intel 的官方驱动，然后在网卡的硬件配置面板中将所有的网络唤醒选项给关闭，这可以有效防止你进入 Arch 环境之后获取不到任何的网络信息导致连不上网。</p><p><code>&gt;&gt; endl;</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;久闻 Arch Linux (下文简称 Arch )大名，在虚拟机上多次完成过了整个系统的安装与图形界面的配置，也试过了 KDE 和 GNOME 这两个大名鼎鼎的图形环境，深切体会到了 Arch Linux 的四大原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Simplicity&lt;/l
      
    
    </summary>
    
    
      <category term="Everything" scheme="https://xinoassasssin.github.io/tags/Everything/"/>
    
  </entry>
  
  <entry>
    <title>故人</title>
    <link href="https://xinoassasssin.github.io/2018/02/old-friends/"/>
    <id>https://xinoassasssin.github.io/2018/02/old-friends/</id>
    <published>2018-02-13T06:21:11.000Z</published>
    <updated>2018-02-13T06:21:11.116Z</updated>
    
    <content type="html"><![CDATA[<p>故人，泛指以前认识的人。</p><p>你活了二十年了，认识过了多少人呢？</p><p>从亲戚到学校再到社会，故人所指代的人越来越多。曾经那些与你关系不错的“朋友”们，不联系了也就进故人堆中了，你的故人堆越来越高。</p><p>没办法的人总在变化的你不可能一辈子只认识这么点人不跟更多的人打交道。但是每当由以前的“朋友”进入故人堆中，你感到过自己情绪的变化吗？惋惜，痛心？亦或是经历的多了根本就无动于衷？</p><hr><p>这个小县城，是全中国千千万万个县城中普通的一个，坐落于传统的富庶之地。千百年来，此地的士绅文化根深蒂固，不像是更南方的人们更喜欢经商。在外读书的学子们，学成之后也更偏向于归家，而不是留在求学之地。</p><p>这个小县城，只要你的故人多，那你上街随便走两步都能碰到他们，就连坐在这小小图书馆的一个自习室里，你一眼扫去，都能找到好几个疑似你认识的人。</p><hr><p>中国是个“人情社会”。</p><p>人情，在我的定义中，就是“我帮了你一个忙，你就欠了我一份情”中的“情”，用劳动报酬来解释或许更好一些。</p><p>人情社会，就是以人情编织成的网络为基础的社会。举个例子，你爹喝酒上头了，跟你说，儿子，你想不想回来工作，爹帮你去跟局长说一说。</p><p>这个“说一说”中，又包含了多少背后的含义呢？</p><p>我讨厌人情。</p><hr><p>故人来找你帮忙。</p><p>你正好闲着没事干，帮了。</p><p>故人一句谢谢，结束了这几年中你们为数不多可能是仅有的交流，你甚至找不到一句你们能聊的共同话题。</p><hr><p>你还能指望更多的报酬吗？你的时间成本就值那么两个字了？</p><p>当然不是，这份我最厌恶的人情，就是委托方亏欠的你仅有的报酬，虚无而飘渺。</p><hr><p>小县城是一个小型的人情社会。走两步都能碰到故人的情况下，你被迫地，要去帮故人的忙。</p><p>你不帮，是你不念旧情太过高冷不会做人。你帮了，又是白费自己时间获得一句空头的“谢谢”。</p><p>这只是整个中国这个大型人情社会的一个小缩影，有人的地方，总会有人情。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;故人，泛指以前认识的人。&lt;/p&gt;
&lt;p&gt;你活了二十年了，认识过了多少人呢？&lt;/p&gt;
&lt;p&gt;从亲戚到学校再到社会，故人所指代的人越来越多。曾经那些与你关系不错的“朋友”们，不联系了也就进故人堆中了，你的故人堆越来越高。&lt;/p&gt;
&lt;p&gt;没办法的人总在变化的你不可能一辈子只认识这
      
    
    </summary>
    
    
      <category term="Everything" scheme="https://xinoassasssin.github.io/tags/Everything/"/>
    
      <category term="Memories" scheme="https://xinoassasssin.github.io/tags/Memories/"/>
    
  </entry>
  
  <entry>
    <title>泄露的 iBoot 源代码中都有些什么</title>
    <link href="https://xinoassasssin.github.io/2018/02/what-iboot-source-code-contains/"/>
    <id>https://xinoassasssin.github.io/2018/02/what-iboot-source-code-contains/</id>
    <published>2018-02-09T09:05:33.000Z</published>
    <updated>2018-03-28T14:05:28.139Z</updated>
    
    <content type="html"><![CDATA[<p>近日，一份疑似 iOS 9.3.x 的 iBoot 及其他部分 BootLoader 的源代码被匿名人士 push 上了 Github, 粗略地查看了一下里面的文件之后，大家都惊讶地发现这份源代码的爆点实在是太多了。</p><p>项目的 README 中是这么写的：iBoot_BootROM_iBSS_iBSS_iLLB_Source_Code</p><p>其中 iBSS 是 <strong>iB</strong>oot <strong>S</strong>ingle <strong>S</strong>tage 的缩写，而 LLB 是 <strong>L</strong>ow <strong>L</strong>evel <strong>B</strong>ootloader 的缩写。</p><p>我们先来看一下 iOS Devices 的启动流程：</p><p>在 Apple 定制的一系列 A 系列 SoC 中有一块存储区域专门存放了一部分最初的启动代码，也就是俗称的 BootROM, 这部分被 Apple 称之为 SecureROM, 它是在电源键被按下，设备上电之后最初加载的代码。SecureROM 检查下一级 BootLoader, 也就是 LLB, 如果签名没有问题，那么就加载并初始化 LLB, 此时设备的 Apple Logo 就出现了。然后 LLB 检查并初始化 iBoot, 同样是通过 Apple Root CA Public 证书验证签名，通过就会把设备带给 iBoot, 而 iBoot 会映射 Device Tree, 然后验证内核签名并加载，最终初始化内核并运行，这时候可以说 iOS 系统已经启动了。</p><p>通过简述的启动流程，我们可以看到，BootROM, LLB, iBoot 这三个无论哪一个都是在整个启动流程中充当关键角色的。所以这次源代码的泄露，非常劲爆。</p><p>在基于证书链的安全体系下，私钥的泄露可以说是直接把安全性掉到0去了，而这份代码中，在位于 /lib/pki 和其中的 tests 目录下，可以看到有一份 Fake CA 和一些私钥，还有一份中间证书和私钥，如果后续版本也是沿用这些东西的话，整个启动验证链的加密体系，就真的可以说安全性为0了。</p><p>因为这份代码是 9.3 时代的，也就是在 iPhone 7 那代发布前的版本，所以我们能看到有许多 T8010 相关的文件（T8010 是 Apple 对于 A10 芯片平台的代号）。而有趣的是，在 /target 目录下出现了 iphone8 这个文件夹，难不成 Apple 内部在 2016 年就开始对 iPhone 8 进行内部测试了？但是点进去看，目录下的文件清晰的指向了另一款产品——iPhone 6s. 往上推，iPhone 7 文件夹对应着 iPhone 6, iPhone 6 文件夹对应着 iPhone 5s, 如果按照这个内部排序，iPhone Ⅹ 这个 Ⅹ的由来，可能更好解释一点。而 iPhone 8, 则更像后来上马的 iPhone 7 Reversion.</p><p>除了主引导程序的代码外，泄露的代码中还包含了许多驱动，在 /drivers 目录下，可以清晰地认出 iOS 平台所使用的一些硬件，其中甚至包括了 Thunderbolt 驱动。</p><p>内容还有很多，笔者水平有限，也解读不出更多的东西了。</p><p><code>&gt;&gt; endl;</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;近日，一份疑似 iOS 9.3.x 的 iBoot 及其他部分 BootLoader 的源代码被匿名人士 push 上了 Github, 粗略地查看了一下里面的文件之后，大家都惊讶地发现这份源代码的爆点实在是太多了。&lt;/p&gt;
&lt;p&gt;项目的 README 中是这么写的：iBo
      
    
    </summary>
    
    
      <category term="Everything" scheme="https://xinoassasssin.github.io/tags/Everything/"/>
    
      <category term="杂" scheme="https://xinoassasssin.github.io/tags/%E6%9D%82/"/>
    
  </entry>
  
  <entry>
    <title>悼念 AcFun</title>
    <link href="https://xinoassasssin.github.io/2018/02/mourn-for-acfun/"/>
    <id>https://xinoassasssin.github.io/2018/02/mourn-for-acfun/</id>
    <published>2018-02-02T08:08:02.000Z</published>
    <updated>2018-02-02T08:08:02.339Z</updated>
    
    <content type="html"><![CDATA[<p>2018年2月2日，AC 又又又倒闭了。</p><p>前两天深夜刷微博时，碰巧瞥见一条“新闻”，上书「AcFun 团队缺乏资金，欠薪几个月，已经无力维持网站运营，关站在即。」第不知道多少次看到 AC 要关站新闻的我，也不以为意，不过就是第不知道多少次关站而已，我也早就不是 A 站用户了，对这个网站没什么怀念或者留恋的东西。</p><p>然后今天早上醒过来，一刷微博，铺天盖地的，又是一堆“AC 亡了”的消息。有打趣的有悼念的有分析的有写背后故事的，甚至还有缺德的。娱乐至死的年代中，这个消息也只能成为一些人的热点，一些人的谈资，一些人的一条悼念微博，而更多的人，则是好奇：“AcFun 是啥？”</p><p>A 站走到今天这个地步，绝非偶然。</p><h2 id="一次又一次，他们错过了"><a href="#一次又一次，他们错过了" class="headerlink" title="一次又一次，他们错过了"></a>一次又一次，他们错过了</h2><p>从 2012 年说起。</p><p>2012年，是我接触更宽广的互联网的第一年。也是在那年，AcFun 举办了第一届宅学会。当时刚刚了解到 A 站是啥的我，在 A 站看了直播——后来的 A 站直播区，叫做“斗鱼”，斗鱼的早期用户中不少都是以 AcFun 账号注册登录的，包括我——然而这样的宅学会，是第一次，也是最后一次像样的，第二届的宅学会就已经朝着“主题漫展”的错误方向去了，而且影响力远没有第一次那么大。第一届的宅学会上，A 站请到了著名配音演员葛平，还有GoHank、性感玉米、林熊猫这三位来主持。</p><blockquote><p>而这时候的 B 站，已经开始逐步用力发展他们的移动客户端业务了。早期的 AB 两站移动客户端体验，B 站的 App 无论在界面设计还是播放体验上，都是比 A 站的要高出一条街的存在。</p><p>本文主旨不在于两站对比，故以引用形式略提一句同时期的 B 站发展概况。</p></blockquote><p>搞笑的是，在第一届宅学会过去恰好一年之际，GoHank, 这个对 A 站贡献不少的 UP 后来进入管理层的“猴子”出走了 B 站。当时 A 站不少运营以及用户的理念，在这个帖子中，能够瞥见一番。<a href="http://last-dreamer.com/thread-2501-1-1.html" target="_blank" rel="noopener">狗Hank+葛平+ACFUN事件</a></p><blockquote><p>那hank确实不适合这里了，因为我觉得ac就像是猴王的微博的简介<br>“只交朋友，不混圈”<br>走好不送。</p><p>还是那句话，<br>只交朋友，不混圈，混圈的话，隔壁欢迎你。当然这里也欢迎你，不过&gt;这里欢迎的是朋友，不是圈子。<br>谢谢。</p></blockquote><p>然后就是赛门出走这一重大事件。</p><p>2014年4月末，时任“站长”的赛门和投资者闹翻，离开 A 站。</p><p>一句话足矣，想要了解详情的，我建议通过知乎查询。</p><p>赛门走后，AcFun 的管理层可能是失去了一个大的方向，也可能是陷入了融资后高层权力斗争的漩涡中，网站运营没有起色。</p><p>2015年3月，因为版权问题，AcFun 三名高层被刑拘，其中包括业余创作“空之文库”的尼窝猴。而事件解决期间不断有前猴子出走，原来的武汉团队几乎没剩几个老员工。</p><blockquote><p>当时的空之文库在轻小说阅读的体验上可以说是秒天秒地秒空气</p></blockquote><p>2016年2月，匿名版之争，光驱猴投奔 B 站。</p><p>……</p><p>之后的事情，仿佛 AcFun 已经被大家都淡忘了，不时的传出点消息跟世人说：“我还活着”。</p><p>它曾经拥有过很多次机会来扩大自身，但却因为各种各样的变故，都错过了，也许是他们缺少一个如陈睿般的有经验的运营决策者，也许是他们根本不想扩大，小众一点也没什么不好。而从 A 站早中期脱离出来的 MikuFans, 已经成了中国“二次元文化的代表”，甚至已经在准备上市了。</p><p>也许，再过几年，大家都会想起，曾经有个网站叫做 AcFun, 是它最早在大陆开始传播隔壁邻居的一些亚文化，是它最早推动了国内的二次创作，是它培养了国内一代亚文化人才。</p><p>也许，它会撑过这次危机，如官博所说的那样，“我想再活五百年！ ”。就算小众，但也能给众多喜欢 A 站的“漫友”们提供一个温暖的家，就像它一直以来挂着的那句“天下漫友是一家”那样。</p><h2 id="再见，AcFun"><a href="#再见，AcFun" class="headerlink" title="再见，AcFun"></a>再见，AcFun</h2><p>但愿这一次，A 站别再活过来了。</p><p>就让 AcFun 这个名词进入中国互联网的历史故土堆里，安心地为后来者提供它那一份“历史经验教训”和代表着老一代日本亚文化推广者和受众们的，美好回忆吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2018年2月2日，AC 又又又倒闭了。&lt;/p&gt;
&lt;p&gt;前两天深夜刷微博时，碰巧瞥见一条“新闻”，上书「AcFun 团队缺乏资金，欠薪几个月，已经无力维持网站运营，关站在即。」第不知道多少次看到 AC 要关站新闻的我，也不以为意，不过就是第不知道多少次关站而已，我也早就不是
      
    
    </summary>
    
    
      <category term="Everything" scheme="https://xinoassasssin.github.io/tags/Everything/"/>
    
      <category term="杂" scheme="https://xinoassasssin.github.io/tags/%E6%9D%82/"/>
    
  </entry>
  
  <entry>
    <title>折腾记-0</title>
    <link href="https://xinoassasssin.github.io/2018/01/doityourself-0/"/>
    <id>https://xinoassasssin.github.io/2018/01/doityourself-0/</id>
    <published>2018-01-30T06:13:57.000Z</published>
    <updated>2018-02-02T07:47:18.623Z</updated>
    
    <content type="html"><![CDATA[<p>为了把 RaidFinder 给实现出来，我决定直接自己手动实现一个 Filtered Stream API 的调用，来检查到底是需要什么 Track 关键词才能达到目的。</p><blockquote><p> 这里真的要吐槽一下新的 Twitter Developer 页面，以前大量的 API Reference 页面都已经404了，包括一些非常重要有用的 API  文档都能 404, 再看看那个“切换到夜间模式再切换回来之后主题色丢失”的前端 bug 修了几个月才修完，可以说 Twitter 真的药丸。</p></blockquote><h2 id="构造-OAuth-验证"><a href="#构造-OAuth-验证" class="headerlink" title="构造 OAuth 验证"></a>构造 OAuth 验证</h2><p>查阅了文档得知，Stream API 需要进行在请求的 HTTP Header 中包含完整的用户验证，也就是走完整的 OAuth 验证流程，由于手上已经拥有了完整的用户和应用的 Key : Secret 对，所以直接进行构造。</p><p>一个完整的验证字段中必须包括如下内容：</p><ol><li><p>Consumer Key</p></li><li><p>Nonce</p></li><li><p>Signature</p></li><li><p>Signature Method</p><p>Twitter 只支持 HAMC-SHA1 的签名方法</p></li><li><p>Timestamp</p></li><li><p>Access Token</p></li><li><p>OAuth Version</p></li></ol><p>而 Signature 字段又是根据其他6个字段以及 HTTP 请求的 URL 和参数（包括 POST 方法的 Request Body）来产生的，格式如下：</p><p><code>请求方法&amp;请求URL&amp;其他6个字段&amp;请求参数</code></p><p>HMAC-SHA1 签名的产生还需要一个 Key, 这个 Key 是由用户的 Consumer Secret 和 Access Token Secret 来构建的。</p><h2 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h2><p>写了半个下午的 OAuth, 写完运行之后还是返回一个 401 给我，仔细检查代码也没有发现哪里出错了。没有办法之下，我想到了抓原版的请求包来看它到底用了什么关键词。于是立即安装 <a href="http://www.scala-sbt.org/index.html" target="_blank" rel="noopener">sbt</a> 和 JDK. 其实 Windows 上的 sbt 也就是提供一个 jar 包和 sbt.bat 这个运行脚本来设定 sbt 所需要的运行环境而已。</p><p>安装完了，<code>sbt run</code> 先跑一记看看，然后让我没想到的是，在性能比 VPS 强了几倍的情况下，这玩意儿还是跑的稀慢，也可能是 Windows 的问题，总之，构建初始运行环境就花了大概一个半小时，不容易等到开始编译 scala 资源了，开始疯狂报错了。</p><p>首先是一个 Python 脚本报错导致后续脚本无法继续，查询项目文档后得知 Windows 上需要 Python 2.X, 而我安装的是 3.6, 没想到在这里会第一次碰到 Python 的版本问题，没办法，下 2.7 改 Path, 好通过了，然后继续报错。</p><p>之后报错都是因为 Java 运行环境的限制，主要问题出在内存的设定上，Google 之，然后在 Java 控制面板中添加全局参数，<code>sbt run</code> 之后开任务管理器看到参数起效了，遂继续运行下去，然而还是会报内存不够的错误，不解，好在每次都能按部就班的往下跑一点，几次重启之后也搞定了。把 twitter4j.properties 放到根目录下，<code>sbt run</code> 之后发现貌似请求没走代理，Twitter 请求撞墙超时。这时想到用 Proxifier 将 java.exe 的请求重定向到本地代理去，重定向之后就跑起来了，程序启动的一瞬间有两个 Search API 的请求和一个 Stream API 的请求，然后全是访问 pic.twitter.com 的请求，下图片的。</p><p>既然 Proxifier 能够重定向流量，那么我把 java.exe 的请求重定向到 Fiddler 的端口去不就能看到包内容了。但是切过去却发现，所有请求都不通了。期初以为是 Fiddler 没走代理，根据别人的经验添加了转发规则之后仍然出错，百思不得其解中，突然看到程序的出错信息不再是访问 Twitter 超时了，而是 SSL 证书出错。</p><p>怎么会呢？我明明把 Fiddler 的证书添加到系统中去了。Google 之，发现 Windows 上的 JRE 自己实现了一套证书环境，我去你大爷的垃圾 Oracle, 放着系统自己的轮子不用非要用自己那套垃圾轮子给人麻烦，前面的网络请求也是自己造的轮子直接跳过系统代理。</p><p>没办法，寄人篱下。于是 Google 到添加 SSL 证书的办法，添加完之后发现还需要自定义的命令行让 JRE 读证书，同样使用 Java 控制面板添加参数，然而这次发现参数并没有起效。</p><blockquote><p>切记 keytool 这玩意儿要用管理员身份来跑，添加完之后 keytool 会生成一个 keystore 文件，建议将它移动在自己 Home 文件夹中并重命名为 .keystore</p></blockquote><p>既然 \$JAVA_OPTS 这个环境变量看上去对 sbt 没用，那我改 $SBT_OPTS, 利用 Everything 这玩意儿强大的搜索功能找到了存在于 <code>sbt 安装目录\config</code> 下面的 sbtopts 文件，好就是你了，添加自定义命令行，<code>sbt run</code>, 然并卵，一点作用都没起。一头雾水中我打开 sbt.bat 这个 Windows 版 sbt 的实际起效文件，发现了这行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set FN=%SBT_HOME%\..\conf\sbtconfig.txt</span><br></pre></td></tr></table></figure><p><del>我去你妈的，也是个不喜欢用一套轮子的。</del></p><p>把原本写进 sbtopts 文件的自定义命令行改写到 sbtconfig.txt 中，Java 命令行的前缀 <code>-J</code> 并不用添加，最后如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-DproxySet=true </span><br><span class="line">-DproxyHost=127.0.0.1</span><br><span class="line">-DproxyPort=8888   &apos;Fiddler 的代理端口</span><br><span class="line">-Djavax.net.ssl.trustStore=&lt;path\to\FiddlerKeystore&gt; &apos;刚刚生成的 keystore 文件的位置，如果移动到了 $Home 下面并重命名为 .keystore 的话这行就不用加</span><br><span class="line">-Djavax.net.ssl.trustStorePassword=&lt;Keystore Password&gt; &apos;刚刚 keytool 让你敲的密码</span><br></pre></td></tr></table></figure><p><code>sbt run</code></p><p>终于，我在 Fiddler 中看到了 java.exe 的请求，并且正确地解密了出来。我花了半天时间探寻的内容终于呈现在我眼前：</p><p><code>count=0&amp;track=%E5%8F%82%E5%8A%A0%E8%80%85%E5%8B%9F%E9%9B%86%EF%BC%81%2C%3A%E5%8F%82%E6%88%A6ID%2CI%20need%20backup%21%2C%3ABattle%20ID&amp;stall_warnings=true</code></p><p>URL Decode 之后就是：</p><p><code>count=0&amp;track=参加者募集！,:参戦ID,I need backup!,:Battle ID&amp;stall_warnings=true</code></p><p>我看到这个之后差点吐血，原来他妈就是简单的用<code>,</code> 这玩意儿来分隔开 Track 关键词就能实现日语推的实时 filter???</p><p>还要继续实验。</p><h2 id="外网访问"><a href="#外网访问" class="headerlink" title="外网访问"></a>外网访问</h2><p>前文有讲，家里网络“重做”之后我就把主路由的 DMZ 主机挂在二级路由上，二级路由的 DMZ 挂在自己机器上，这样外网的请求就直接能到自己机器上。</p><p>然而从外部使用 DDNS 域名+端口号的方式不能直接访问到 RaidFinder. 哦好像是要配上一个 HTTP Server, 那简单，跑一个 http.server 80 不就行了。</p><p>是行了，能访问到所有的静态资源，但是看着 Console 中不断提示的 <code>ws/raids?keepAlive=true</code> 404, 我突然想起来前不久看到的 WebSockets 简介中提到的，要建立一个 WebSockets 连接是需要从 HTTP 请求“转发升级”过去的。于是想到用 NGINX, 下载，这玩意儿才 1MB+ 的大小，真他妈绿色环保。</p><p>把自己服务器上的 nginx.conf 拖出来抄配置，终于理解了之前搜到的配置的用处：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">proxy_pass http://127.0.0.1:$port;</span><br><span class="line">proxy_http_version 1.1;</span><br><span class="line">proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">proxy_set_header Connection "upgrade";</span><br></pre></td></tr></table></figure><p>配置中最后两句就是为 WebSockets 而服务的，是一个 HTTP 请求转为 WebSockets 连接的关键点。</p><p>那么一切设定好，开始跑，问题又来了：外网无法访问，内网 80 转发正常。</p><h2 id="gt-gt-endl"><a href="#gt-gt-endl" class="headerlink" title="&gt;&gt; endl;"></a>&gt;&gt; endl;</h2><p>最后这篇折腾记的终点就在这里了，不知道为何，访问就是无限转圈，但是起初寻找关键词的目的还是完成了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为了把 RaidFinder 给实现出来，我决定直接自己手动实现一个 Filtered Stream API 的调用，来检查到底是需要什么 Track 关键词才能达到目的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 这里真的要吐槽一下新的 Twitter Developer
      
    
    </summary>
    
    
      <category term="Everything" scheme="https://xinoassasssin.github.io/tags/Everything/"/>
    
      <category term="Programming" scheme="https://xinoassasssin.github.io/tags/Programming/"/>
    
  </entry>
  
  <entry>
    <title>家庭网络和路由</title>
    <link href="https://xinoassasssin.github.io/2018/01/router/"/>
    <id>https://xinoassasssin.github.io/2018/01/router/</id>
    <published>2018-01-21T06:14:05.000Z</published>
    <updated>2018-03-28T14:08:12.834Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="https://blog.xinoassassin.com/2018/01/holiday-0/" target="_blank" rel="noopener">上一篇文章</a>中，我提到回家要干的一件事情就是更换路由。把新买的二手<del> Nepgear</del> Netgear R6250 替换掉用了两年多的洋垃圾 RT-N16. 更换到现在已经过去一天半左右的时间了，遇到了几个问题。</p><p><img src="/images/HomeNetwork.png" alt="HomeNetwork"></p><p>拿快递开箱换上配置好一共花了不到半小时就搞定了，然后问题开始浮现：我的 ThinkPad S1 Yoga 连接不到 R6250 提供的 2.4G 无线网络。开始认为是笔记本上那块单频 Intel 7260 的锅，然后把 R6250 的 2.4G 网的频宽从 40MHz 降到了 20MHz, 结果仍然有时断时续的情况出现，认为还是 7260 这张网卡的问题，准备更换网卡。但北美良心想在 BIOS 中做了限制，更换起来很麻烦，所以一筹莫展。结果今晚日常拿起手柄 V 的时候突发奇想连一下无线，发现根本找不到 2.4G 网的 SSID, 就算不容易刷出来了也是连接不上的状态，遂开始感觉是 R6250 的问题。Google 之，发现使用第三方固件的 R6250 大多都存在这种问题，比如 2.4G 网不稳定，2.4G 根本连不上什么的。但是我又不想用回官方那个烂的很的固件，于是掏出从学校快递回家，原本准备用来替换掉配电箱中的主路由的那只被改装过的 TP-Link WR720N, 本就刷好了 LEDE, 稍微改了几个配置就当 2.4G 的 AP 来用了，连接非常稳定。</p><p>把 DMZ 主机指定到自己的机器之后，直接通过 DDNS 域名进行内网访问，速度非常快，延迟非常低，爽。</p><p>然后用着用着，无心看到 IPv6 的地址头不对，而且怎么本地 DNS 域也变成了 LEDE 了？一看果然是小的 AP 在作怪，上面的 DHCP 服务器没关，也就是一个网段中有两个设备在 DHCP 广播。遂关闭之，顺带着把 Lan 口设置中的网关确定为 2.1, 并把 Dnsmasq 的服务一起关了，问题消失。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在&lt;a href=&quot;https://blog.xinoassassin.com/2018/01/holiday-0/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;上一篇文章&lt;/a&gt;中，我提到回家要干的一件事情就是更换路由。把新买的二手&lt;del&gt; Nepg
      
    
    </summary>
    
    
      <category term="Everything" scheme="https://xinoassasssin.github.io/tags/Everything/"/>
    
  </entry>
  
  <entry>
    <title>假期——于飞机上</title>
    <link href="https://xinoassasssin.github.io/2018/01/holiday-0/"/>
    <id>https://xinoassasssin.github.io/2018/01/holiday-0/</id>
    <published>2018-01-18T08:29:28.000Z</published>
    <updated>2018-03-28T14:09:04.368Z</updated>
    
    <content type="html"><![CDATA[<p>在成都磨蹭掉一个礼拜之后，我终于飞回家准备开始假期了。本来以为这寒假够短的，正月十五不到就要返校上课结果今天出发前一看国航 App, 离回程航班还有三十六天，还是有点吃惊的。</p><p>虽然 Bitcoin 带着众多币种在昨天一起跳了一次崖，但在短时间内显卡的价格还是下不来的，不过本就打算在过一段时间直接买一块 GV10x 算了，那么估计是要继续用 940M 凑合着了。也就是说还是打不成去年前年发售的那些最新最炫酷的大型游戏，还是打打 R6, 农农 GBF 好了。</p><p>前几天从微博上收了一台网件 R6250, 与两年半前收那台 RT-N16 一样的价格，但是性能强了太多。同样的五口全千兆<del>最在意的点</del>，802.11AC 和 5GHz 的支持，可以用多种开源系统<del>网件的原厂固件一直被人喷是屎</del>。从 11 号晚上搬到中舒那边之后才发现，在嘈杂的 2.4 GHz 环境下，无线网络延迟的增加可以很明显的感知到。当年 RT-N16 发布时，802.11N 也还只是草案阶段，仅支持 150Mbps 的传输速率<del>实际上是支持到 300Mbps 的但不知道怎么回事，我用的时候实际连接速率最高都是144Mbps</del>，在今天确实远远不能满足我的需求了。不过一台 2010 年发布的路由器，能用到现在而且华硕时不时还会给它出个固件更新可以说是非常良心了，退役给家里当主路由用吧。</p><p>前不久国家出台快速推进 IPv6 普及的政策，据说东部部分地区的电信已经支持了 IPv6 的接入（事实上在两年半前 RT-N16 刚到手的时候就试过，貌似确实有）, 那么换了主路由干脆把 IPv6 也配置好，跟上潮流嘛。</p><p>那么回家干的事情第一点就是搞网络，你说我一个非网络运维专业出身的天天跟各种网络节点设备打交道也是。。。</p><p>也是挺奇怪的，自从打完空の軌跡 FC 之后把 SC 开了一个头就一直不想打下去，本来打算飞机上把序章完成掉的结果也变成了码字而不是拿着手柄 V, <del>不过 A330 确实比较稳的，果然还是宽体飞机好。</del>寒假看看有没有心情打吧，毕竟机器和卡带都是别人的自己一直拿着也不太好，SC 完了还有 3rd 也是头疼了<del>说到底还是传统 JRPG 的错。</del></p><p>过完年就要回去读大三后半学期了，离成为一个社畜就只剩半年不到的事件了。考研是不会去考的，这辈子的不会去的。从去年夏天开始投的简历都已经石沉大海了，那我也没好的办法，只能继续学习。连一个不给钱只管饭的银行打杂的实习机会都不考虑我 <del>虽然我感觉是因为时间问题</del> 那我还是只能考虑考虑当前端/后端/全栈了，当务之急还是多学点东西，如果寒假能克服障碍把那个 RaidFinder 写完，之前文章中给定的三个目标给实现，那我觉得我的全栈起码是，入门级了吧。</p><p>还一个小时降落，看了眼字数已经水了将近一千字了，但一点收尾的感觉都没有，那就，继续水下去好了。</p><p>今年年内 Granblue Fantasy Re-Link 可能就会发布，但是目前为止购买 PS4 Pro 的钱是一点都没有，白条和信用卡还欠着一堆，只能靠四月头上的保险钱看看能不能减轻一点压力，氪金还是少氪一点吧。</p><p>哦对，还有跟她说的可能有的生日礼物。这个“可能”应该是“肯定”才对，计划是在一个杯子里放条生日石项链。转眼间就是三年，只能感叹一句，物是人非，当初自己铸下的错误，可能这辈子，都没有办法再挽回了。</p><p>突然发现，一写到她，我就写不下去了，马上就要收电子设备了，再扯点别的。</p><p>今年的旅游计划大概是去趟武汉和重庆吧，去年夏天感受过了粤国和鹭岛，今年感受下在中部但文化上偏西南地区的都市和离成都最近的大都市的另一种感受，有机会的话还会去趟苏州感受苏南三市的发展。</p><p>也就这样了吧，保存睡眠了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在成都磨蹭掉一个礼拜之后，我终于飞回家准备开始假期了。本来以为这寒假够短的，正月十五不到就要返校上课结果今天出发前一看国航 App, 离回程航班还有三十六天，还是有点吃惊的。&lt;/p&gt;
&lt;p&gt;虽然 Bitcoin 带着众多币种在昨天一起跳了一次崖，但在短时间内显卡的价格还是下
      
    
    </summary>
    
    
      <category term="Everything" scheme="https://xinoassasssin.github.io/tags/Everything/"/>
    
  </entry>
  
  <entry>
    <title>RaidFinder 开发记——1</title>
    <link href="https://xinoassasssin.github.io/2018/01/rf-developing-0/"/>
    <id>https://xinoassasssin.github.io/2018/01/rf-developing-0/</id>
    <published>2018-01-13T09:57:36.000Z</published>
    <updated>2018-01-13T11:57:02.096Z</updated>
    
    <content type="html"><![CDATA[<p>上篇文章给自己写了一个开发计划，这两天已经开始动手了，结果刚开头就非常不顺，来写篇文章吐槽一下。</p><p>从原版的描述和一些代码中，我发现原作者使用了 Twitter4j 这个看起来在 Java 平台非常强大的库来进行 Twitter Stream 的获取。而在 NPM 上不难找到类似的 Twitter 库，也不难使用，填好两组 Key &amp; Secret 之后简单的调用 API 就可以输出源源不断的 Tweets 来。</p><p>Twitter 官方提供的 Stream API 中自带了对自定义关键词的 Filter, 那么我们就来调用它。然后就碰到了目前为止第一个也是最主要最棘手的问题。</p><h2 id="最主要的问题"><a href="#最主要的问题" class="headerlink" title="最主要的问题"></a>最主要的问题</h2><p>问题就是：Twitter Stream Track 的关键词设置不支持 CJK 字符，而 GBF 的玩家则大部分使用日语，他们的救援推的关键词都是<code>&quot;参加者募集！&quot;</code>。</p><p>于是我在 Twitter Deck 中新建了一栏，使用<code>&quot;参加者募集！&quot; OR &quot;I need backup!&quot;</code>的搜索条件进行搜索并观察官方用的是什么办法支持 CJK 字符的。结果大失所望，官方的搜索也只是用 Search API 而不是 Stream API, 然后定时获取一次假装出 Stream 的感觉来“糊弄”用户。那么我想，目前找到的库对于 CJK 都没有支持的情况下应该作者是用了一些手段来支持 CJK 字符的。</p><p>那么也只有继续读源码了。</p><hr><p>经过大概一小时的思考，我决定暂时先将实现平台放到 .NET 上，目前 .NET Core 在跨平台上面已经比较稳定了，用 C# 写也更顺手一些。先拿这套把实现思路和一些算法给摸清楚，以后再重新用 Node.js 来实现。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上篇文章给自己写了一个开发计划，这两天已经开始动手了，结果刚开头就非常不顺，来写篇文章吐槽一下。&lt;/p&gt;
&lt;p&gt;从原版的描述和一些代码中，我发现原作者使用了 Twitter4j 这个看起来在 Java 平台非常强大的库来进行 Twitter Stream 的获取。而在 NP
      
    
    </summary>
    
    
      <category term="Everything" scheme="https://xinoassasssin.github.io/tags/Everything/"/>
    
      <category term="Programming" scheme="https://xinoassasssin.github.io/tags/Programming/"/>
    
  </entry>
  
  <entry>
    <title>计划：用 Node.js 重写 GBF-RaidFinder</title>
    <link href="https://xinoassasssin.github.io/2018/01/gbf-raidfinder/"/>
    <id>https://xinoassasssin.github.io/2018/01/gbf-raidfinder/</id>
    <published>2018-01-08T15:11:06.000Z</published>
    <updated>2018-01-08T15:11:06.912Z</updated>
    
    <content type="html"><![CDATA[<p>最近产生了一个“大胆”的想法，就是用 Node.js 来重写 <a href="https://github.com/walfie/gbf-raidfinder" target="_blank" rel="noopener">walfie/gbf-raidfinder</a> 这个被许多骑空士使用着的项目。</p><h2 id="为什么想要重写？"><a href="#为什么想要重写？" class="headerlink" title="为什么想要重写？"></a>为什么想要重写？</h2><p>因为原项目是用 Scala 写的，运行在 JVM 上，虽然 JVM 跨平台的能力比较强，但它相对比较“臃肿”，而且构建、更新起来比较慢。可以是可以用作者提供的 Docker 镜像直接部署，但是之前因为 Docker 不兼容于 4.9 以上的内核，而我又比较依赖于 bbr 这玩意儿所以就没用 Docker 而是直接跑在系统的 JVM 上。</p><p>那么为什么想用 Node.js 重写，Node.js 相比较于 JVM, 保证了一定的跨平台能力的同时更为轻量化，版本迭代的代价也更低一些。最主要的是，我想通过这次重写来学习 Node.js 和 Javascript, 因为这个项目是 C/S 架构的，也能学习一定的全栈能力。</p><h2 id="重写方案"><a href="#重写方案" class="headerlink" title="重写方案"></a>重写方案</h2><p>在重新简要查看了原作者的实现之后，我得出了“这不是我短时间就能重写出来”的结论，原因如下：</p><ul><li>原作者使用了 WebSockets 这项技术来实现列表的实时更新</li><li>原作者使用的许多库不知道在 npm 有没有类似的替代品</li><li>原作者写的 Boss 列表自更新是一大难点</li><li>我在 JS 和 Node.js 上都只是一个初学者</li></ul><p>那么就一步一步地来，先写出一个 Twitter 的搜索模块，再学 WebSockets 然后把实时更新给实现了，然后把自更新实现了，最后把几个部分整合到一起，差不多重写就完成了。我给这个坑留半年到一年的时间，希望明年的现在我已经填完这个坑了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近产生了一个“大胆”的想法，就是用 Node.js 来重写 &lt;a href=&quot;https://github.com/walfie/gbf-raidfinder&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;walfie/gbf-raidfinder&lt;/a
      
    
    </summary>
    
    
      <category term="Everything" scheme="https://xinoassasssin.github.io/tags/Everything/"/>
    
      <category term="Programming" scheme="https://xinoassasssin.github.io/tags/Programming/"/>
    
  </entry>
  
  <entry>
    <title>国内的一些 Progressive Web App</title>
    <link href="https://xinoassasssin.github.io/2018/01/pwa/"/>
    <id>https://xinoassasssin.github.io/2018/01/pwa/</id>
    <published>2018-01-01T14:26:21.000Z</published>
    <updated>2018-01-01T14:26:21.159Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是-PWA"><a href="#什么是-PWA" class="headerlink" title="什么是 PWA"></a>什么是 PWA</h2><p>前不久了解到 Progressive Web App 这个在2015年就已经由 Chrome 项目组提出来的概念，<a href="https://pwa.rocks/" target="_blank" rel="noopener">A selection of Progressive Web Apps</a> 这个站点上收录了许多支持 PWA 的网站，不乏有可用性非常高的 <a href="https://web.telegram.org/" target="_blank" rel="noopener">Telegram Web</a> 和知名的 <a href="https://flipboard.com/" target="_blank" rel="noopener">Flipboard</a> 应用的网页版。</p><p>PWA 是什么？直译过来就是渐进式网络应用。特性有很多，想要了解具体的直接看 <a href="https://developers.google.com/web/progressive-web-apps/" target="_blank" rel="noopener">Progressive Web App</a>, 这里只举我最看重的几点：</p><ul><li><p><strong>轻量</strong> &amp; <strong>离线可用</strong></p><p>跟普通的网页没啥区别，加载快。而且不像 Hybrid App 那样还是依赖于一个本地的 App 壳子，需要你去 App Store 安装</p><p>PWA 在 Android 上保存到 Home Screen 之后就会自动编译生成一个 APK 安装进系统中，也就意味着，它不止是一个网页，而已经成为了一个本地应用，离线状态下也是可用的（当然依赖于网络的东西就不行了）。而这一过程相当快，所要耗费的网络流量也远远小于 Native/Hybrid App</p></li><li><p><strong>本地通知支持</strong></p><p>在添加在本地之后，PWA 就拥有了本地通知能力，因为在 Android 上是通过 GCM 实现的，所以国内这点并不好用，微博 PWA 就干脆没有写通知的功能</p></li><li><p><strong>All in Browser</strong></p><p>其实这点就是第一点的补充，一个浏览器干所有的活，不用装那么多又大更新还要开 App Store 的应用。而这一点也包括在所有平台上都有同样的用户体验，虽然目前的 PWA 界面多是为移动设备而设计，但是至少我在 PC 上能一样很方便的用到它，而不是通过虚拟机或者其他手段。</p></li></ul><p>我记得在早期 iPhone 刚发布的时候，Apple 的想推广的就是 Web App, 让用户可以用一个 Safari 干所有的活（可笑的是现在 iOS 还没支持 PWA），可惜当时的前端远远没有今天那么多好用新颖的技术，那时的移动设备性能也满足不了使用非原生代码的开销，所以最后 Apple 妥协了，推出了 App Store 直到今天。而现在 PWA 的推出，多了一个“渐进式”的前缀形容词，没有前几年强推 Web App 的那种势头，更加务实的风格更能被人们接受。</p><h2 id="目前比较有用的-PWA-站点"><a href="#目前比较有用的-PWA-站点" class="headerlink" title="目前比较有用的 PWA 站点"></a>目前比较有用的 PWA 站点</h2><ul><li><a href="https://m.weibo.cn/beta" target="_blank" rel="noopener">微博 Lite</a></li><li><a href="https://m.bilibili.com" target="_blank" rel="noopener">Bilibili Web 版</a></li><li><a href="https://h5.ele.me" target="_blank" rel="noopener">饿了么</a></li><li><a href="https://mobile.twitter.com/" target="_blank" rel="noopener">Twitter Lite</a></li></ul><p>其他的可以上 <a href="https://pwa.rocks/" target="_blank" rel="noopener">A selection of Progressive Web Apps</a> 看，虽然好像都是国外的而且好久没有更新了。</p><h2 id="怎么安装"><a href="#怎么安装" class="headerlink" title="怎么安装"></a>怎么安装</h2><p>非常简单，用你的 PC 版 Chrome 或者 Chrome Android 打开上一节的随意一个站点，等待一会儿就会有一条提示你可以添加到主界面的横幅在下方出现，点击即可。或者你可以手动使用“添加到主界面”的功能来实现。</p><p><code>&gt;&gt;&gt; endl;</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是-PWA&quot;&gt;&lt;a href=&quot;#什么是-PWA&quot; class=&quot;headerlink&quot; title=&quot;什么是 PWA&quot;&gt;&lt;/a&gt;什么是 PWA&lt;/h2&gt;&lt;p&gt;前不久了解到 Progressive Web App 这个在2015年就已经由 Chrome 项目组
      
    
    </summary>
    
    
      <category term="Everything" scheme="https://xinoassasssin.github.io/tags/Everything/"/>
    
  </entry>
  
  <entry>
    <title>杂（三）</title>
    <link href="https://xinoassasssin.github.io/2017/12/something-2/"/>
    <id>https://xinoassasssin.github.io/2017/12/something-2/</id>
    <published>2017-12-24T12:22:24.000Z</published>
    <updated>2017-12-24T15:09:59.238Z</updated>
    
    <content type="html"><![CDATA[<p>又是一个礼拜过去了，成都今年的严重雾霾晚来了一会儿，但是终究没有缺席。看着每天天气报告中那令人窒息的空气指数数字、全球领先的排位，感叹一句，国际化大都市不过如此。</p><p>被冬日的温度以及那浑浊的空气困在室内，也就只能每日流连在各种垃圾手游和几个大型在线射击游戏里。</p><hr><p>今天还是想来写一下对于字体的一些感想，源起是看到<a href="https://feng.moe/" target="_blank" rel="noopener">烧饼的 Blog</a> 字体设置上比较“怀旧”的采用了全局衬线字体、思源宋体优先的设定。我也是一个对思源系字体情有独钟的爱好者，能自定义的场合和自己输出的 PDF 等文档打印件中必然会采用思源系字体，比如本 Blog 就使用了思源宋体和黑体的组合，当然你系统里没有这两款字体就会回退，在 Windows 上回退了就很难看，除非你的浏览器里面把 sans-serif 和 <span style="font-family:serif;">serif</span> 通过一些手段自定义了。</p><p>然后烧饼跟我说，Typekit 是有免费版的，一查，还真有，那肯定要用上啊。比较搞笑的是，我用的这个主题的作者原本在 head.ejs 中，是有调用 Typekit 的，但被我直接就去掉了。现在加回来之后，在没有思源系字体的桌面浏览器上，字体的显示是正常了，但是在移动端上，字体显示还是会被系统默认给覆盖掉，接下来需要想办法解决的，就是这点了。</p><p>题外话，这个主题已经被我修改的跟原版差距有点大了。包括一系列增大中间内容呈现框的宽度和图片大小设定等修改，在 Blog 内容显示上可以说已经完全是我个人喜好的体现了。<br>有空把分类目录写了，再把 About 页面写了，这个 Blog 的总体就算是完成了。<br><code>&gt;&gt;&gt; endl;</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;又是一个礼拜过去了，成都今年的严重雾霾晚来了一会儿，但是终究没有缺席。看着每天天气报告中那令人窒息的空气指数数字、全球领先的排位，感叹一句，国际化大都市不过如此。&lt;/p&gt;
&lt;p&gt;被冬日的温度以及那浑浊的空气困在室内，也就只能每日流连在各种垃圾手游和几个大型在线射击游戏里。&lt;
      
    
    </summary>
    
    
      <category term="Everything" scheme="https://xinoassasssin.github.io/tags/Everything/"/>
    
      <category term="Blog" scheme="https://xinoassasssin.github.io/tags/Blog/"/>
    
      <category term="杂" scheme="https://xinoassasssin.github.io/tags/%E6%9D%82/"/>
    
  </entry>
  
  <entry>
    <title>玩家用脚投票</title>
    <link href="https://xinoassasssin.github.io/2017/12/gamers-choice/"/>
    <id>https://xinoassasssin.github.io/2017/12/gamers-choice/</id>
    <published>2017-12-17T14:31:22.000Z</published>
    <updated>2018-03-28T14:14:09.052Z</updated>
    
    <content type="html"><![CDATA[<p>写这篇文章的源起，是2017年的 TGA, Best Ongoing Game 和 Best eSport Game 都给了 Overwatch, 无论是国内外玩家都不太能接受这个奖的归属，因为两个奖项的提名中都有比 Overwatch 更合理的选项。TGA 虽然说是由玩家投票选出的获奖归属，但是由于投票页面根本就没公布实时的投票结果自然也就给了很多操作空间。</p><p>那么在这个 Best Ongoing Game 的奖项上面，我们来看看，是不是其他游戏更有资格呢？</p><p>我就说说 R6。</p><p>R6 可以说在第二年中，完成了一个全面重生。从刚发售时候的 bug 太多、服务器太不稳定等许许多多问题被玩家诟病，到如今玩家总数已经突破2500万，每日的在线玩家也稳定在25万左右的一个情况，育碧蒙特利尔的持续更新是功不可没的。如此的一个硬核倾向的游戏，需要你背地图，每张地图还都是复杂的起码三层甚至四层的立体结构，玩家数能够不断的增加，本身已经说明了游戏的魅力在吸引着玩家。作为一款“战术射击游戏”，它没有绚丽的技能，没有用来吸引眼球的女性模型，也没有强到变态的武器，有的只是双方的战术布置以及最重要的，枪法。</p><p>再说平衡，R6 的平衡，只能说是相对平衡，因为最重要的还是枪法，在这点上它骨子里就是硬核射击游戏的血脉延续，干员技能的平衡，是影响到整个游戏体验的关键所在。蒙特利尔不是那种“教你玩游戏”的，在出新干员时，一定会注意到不破坏原有的战术体系。反观 OW, 一个天使改了又改，就是改不好，重点针对竞技比赛的调整非常影响休闲玩家的游戏体验。有些反对者说 OW 出新英雄的速度太慢了，这点我觉得倒是没啥所谓，看看隔壁 Dota 的出新英雄速度。但是当看到新英雄的出场率达不到设计师心中应该有的程度的时候，你不应该为了这个出场率而去大幅度加强/削弱它，而是像冰蛙那样，更注重整体的平衡性，设计师需要反思自己的设计出了什么问题使得这个英雄的出场率不如自己意，或者要更深刻理解目前游戏中的平衡到底如何，再来进行调整。我们经常可以看到 Dota 的更新日志中一个英雄的技能伤害被平衡了，怎么平衡的？削弱低等级伤害增加高等级伤害或者是增加一点点蓝耗/CD, 这就叫 Banlance, 而不是单纯的增强/削弱。</p><p>R6 的平衡还体现在非正式赛和排位赛是有一定的区别的。在排位中，进攻方可以选择自己出生的位置，防守方也可以选择自己的防守位置，这就使得正式比赛中围绕自己阵容来选择合适的地点来进攻/防守。而在非正式赛中，这两个位置都是随机的，这也给非正式赛带来了些许随机性，你选的干员在那个位置可能没啥用处，意思就是你就剩下两块板子和一把枪是有用的，你的技能帮不上太大忙。这种情况在非正式赛里还挺多见的，比如防守方拿了 Mira 却发现旁边没啥能封的墙，镜子也就不知道往哪里放了；进攻方拿了 Fuze 却发现对手守地下室而且他们头上全是“不可破坏的表面”。而 OW 自从把快速比赛模式改的和竞技一样不能拿重复的英雄之后就失去了很大的乐趣性，就算有人说原来的快速模式就放在街机里面随时都可以玩，但是一个二级菜单中的模式和首页上谁的点击率更高就不用多说了吧。</p><p>一个有意思的现象就是 Overwatch 在 metacritic 上的用户评分已经低于 R6S 了(PC平台)，虽然只有0.3的分差，但是 OW 的用户评论有足足4699条，而 R6S 则是884条，就拿最近的100条用户评论来说，我一路拉下去，OW 是一连串的0分，看来 BLZ 的运营在全球范围内都不能算是成功呢。</p><p>回到本文标题上面来，玩家用脚投票。游戏到底好不好玩，一个很简单的问题，每个人都有自己的看法。但是当多数人在喊着不好玩的时候，那些即使忍受着糟糕的游戏体验也要高喊“这游戏好玩”的玩家们，是不是应该重新审视一下，为什么多数人喊不好玩我却觉得好玩呢？偶尔，你也应该听听别人的看法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;写这篇文章的源起，是2017年的 TGA, Best Ongoing Game 和 Best eSport Game 都给了 Overwatch, 无论是国内外玩家都不太能接受这个奖的归属，因为两个奖项的提名中都有比 Overwatch 更合理的选项。TGA 虽然说是由玩家
      
    
    </summary>
    
    
      <category term="Everything" scheme="https://xinoassasssin.github.io/tags/Everything/"/>
    
      <category term="Game" scheme="https://xinoassasssin.github.io/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>杂（二）</title>
    <link href="https://xinoassasssin.github.io/2017/12/something-1/"/>
    <id>https://xinoassasssin.github.io/2017/12/something-1/</id>
    <published>2017-12-17T09:02:06.000Z</published>
    <updated>2017-12-24T11:45:19.993Z</updated>
    
    <content type="html"><![CDATA[<p>前略，快考试了。</p><p>今天一时兴起去听贾鹏芳老师的曲子。<br>自己当初还拉二胡的时候没听说过其人，直到后来接触了和平之月之后才了解到，原来还有这么一位当代二胡演奏、作曲、艺术家。当今二胡界，她应当就是那个站在顶端的人了。可惜了，这么杰出的人物却要跑到日本才能获得更好的发展。<br>翻了一眼网易云下面的评论，称赞的，喷她的，叫人安心听曲子别废话的，什么都有，却没人思考为什么这么好的艺术家要跑到日本去才有今天的成就。</p><p>结合一下昨晚 steamcommunity 突然被墙之后今天贴吧让人去举报那几个政治敏感组想让 Valve 关闭掉那几个组从而让国内用户能够重新访问社区的事情，可笑。</p><p>大家都以一句“你懂的”略过对于体制本身问题的探讨，问起为什么的时候都无奈地表达出“‘说了反正也会被删’、‘我说了也没用’”这样的意思。这已经是相当多已经麻木的国人自我阉割的状态了，在一次次的尝试争取宪法中规定公民应当享有的权利中，越来越多的人放弃了。这其中不少人转而把枪口对准另外一批还在努力为所有人争取权利的“斗争者”，他们中有的认为，是另一批人持续不断的斗争行为导致了自己享有不到应该有的权利，而他们的目的，是干扰这帮给他们争取着权利的人们，甚至不择手段。</p><p>思想是自由的，讨论思想也应当是自由的。对于某种思想的评价是每个人自己做出的评判，不应当根据自己对于这种思想的理解而去干扰别人对于这种思想的看法。我们应该做的是讨论，而不是闭口不言甚至去把那些敢于讨论的人的嘴巴给捂上。你去把那些敢于讨论的人的嘴巴捂上，那么你是不是跟那些不让你开口说话的人是一样的呢？</p><p>鲁迅先生的文章中的那些道理，在这个年代仍然适用着。或者说，对中国这块大地上生活着的人们，只要有一天封建思想还扎根在人们的心中，那么将一直适用下去。</p><hr><p>明天还有场考试，这周就写这么多。</p>]]></content>
    
    <summary type="html">
    
      大家都以一句“你懂的”略过对于体制本身问题的探讨，问起为什么的时候都无奈地表达出“‘说了反正也会被删’、‘我说了也没用’”这样的意思。这已经是相当多已经麻木的国人自我阉割的状态了，在一次次的尝试争取宪法中规定公民应当享有的权利中，越来越多的人放弃了。
    
    </summary>
    
    
      <category term="Everything" scheme="https://xinoassasssin.github.io/tags/Everything/"/>
    
      <category term="杂" scheme="https://xinoassasssin.github.io/tags/%E6%9D%82/"/>
    
  </entry>
  
  <entry>
    <title>Just Because 与暗恋与青春</title>
    <link href="https://xinoassasssin.github.io/2017/12/just-because/"/>
    <id>https://xinoassasssin.github.io/2017/12/just-because/</id>
    <published>2017-12-08T08:37:23.000Z</published>
    <updated>2017-12-08T12:47:12.939Z</updated>
    
    <content type="html"><![CDATA[<p>最早是今年五月末的时候，之前鸭志田一和比村老贼合作的那部原创新番的信息第一次公布。看到第一张宣传图<del>好他妈像月曜日のたわわ的女主啊</del>，人设感觉还不错，剧本是鸭志田一，感觉不会太差。那行先纳入想看的列表里，毕竟十月番嘛，不急。</p><p>现在=&gt;“没有 Just Because 看我要死了”</p><p>当时也没想到，这么一部剧情上“没什么亮点”的作品会如此的触动我的心弦。简简单单的暗恋，简简单单的青春，却又有着如此的魅力。也许是 nagi 那首 over and over 的歌词，也许是男主常年累月默默地付出，也许是小宫那单纯到极致的喜欢，也许是美绪那对恋爱淡淡的态度。</p><p>谁没暗恋过呢？不知道何时就在意起某个人来了。“Ta 的事情我都想要了解”、“想要接近 Ta 和 Ta 说话”，不自觉地，这些想法就会跑到脑子里，你甩了甩脑袋清了清思路，以为把这些想法都抛干净了，却一不当心，还是按照这些想法行动了起来。慢慢地，你在意起对方的想法来，“Ta 对我是什么看法”，然后像个小学生一样去套话，从 Ta 朋友嘴里或是大胆一点地直接去问对方。</p><p>暗恋是什么？是青春啊，大学前的学生时代清纯的情愫。错过了，就不会再来。</p><p>最后送上 over and over 的歌词，仅以此，纪念已经逝去的青春，和那些记忆中的点点滴滴。</p><blockquote><p>記憶の君に告ぐさよなら</p><p>隣に座ってた　恥ずかしがり屋<br>ありがとうって言う度に頬を染めてた<br>ふたりで考えた秘密の合図<br>離れても　きっとすぐ分かるはず</p><p>新しい日々に巻かれるまま<br>届いたささやかな手紙を<br>ああ　どうして<br>読みもしないで置き去ったんだろう</p><p>記憶の君に告ぐさよなら<br>長い髪が頬を隠すから<br>うまく調子が合わないんだ<br>君を誰より深く知っていたのに<br>隣の席の君は　いない</p><p>まばらに継ぎ合わす　遠い思い出<br>一部だけ抜け落ちて　どこか欠けてた<br>あの時口にした言葉はきっと<br>忘れてはいけなかった<br>それなのに</p><p>大人びた視線に透かされて<br>焦る心が浮き出しそう<br>ああ　こんなに<br>子供染みてる自分が嫌だ</p><p>面影の残る横顔で<br>知らない笑顔を見せる君は<br>まるで平行世界の人<br>ぼんやりしてる間に<br>ずっと先まで　歩いていってしまう</p><p>背中追う足音<br>一度足を止めて<br>わずかに見せる唇のかたち<br>瞬く間に時間繋ぐ橋をかけた</p><p>隣の席の君はいない<br>大人になった君がひとり</p><p>記憶の君に告ぐさよなら<br>長い髪がとても似合うから<br>少し照れくさくなるけれど<br>君を誰より深く知っていくため<br>隣に座ってもいいかい</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最早是今年五月末的时候，之前鸭志田一和比村老贼合作的那部原创新番的信息第一次公布。看到第一张宣传图&lt;del&gt;好他妈像月曜日のたわわ的女主啊&lt;/del&gt;，人设感觉还不错，剧本是鸭志田一，感觉不会太差。那行先纳入想看的列表里，毕竟十月番嘛，不急。&lt;/p&gt;
&lt;p&gt;现在=&amp;gt;“
      
    
    </summary>
    
    
      <category term="Everything" scheme="https://xinoassasssin.github.io/tags/Everything/"/>
    
  </entry>
  
</feed>
