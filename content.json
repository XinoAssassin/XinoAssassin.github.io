{"meta":{"title":"随写 - XinoAssassin's Blog","subtitle":"Write Everything","description":null,"author":"XinoAssassin Ni","url":"https://xinoassasssin.github.io"},"pages":[],"posts":[{"title":"我的单相思","slug":"boy-loves-girl","date":"2018-03-28T12:47:37.411Z","updated":"2018-03-28T17:36:30.886Z","comments":true,"path":"2018/03/boy-loves-girl/","link":"","permalink":"https://xinoassasssin.github.io/2018/03/boy-loves-girl/","excerpt":"","text":"今天，我来写一个男孩的恋爱故事：—男孩遇到女孩是在他十二岁的时候那是初一刚开学他带着被不公划分的愤懑来报了到一眼望去，除了几个小学同班的，别的都不认识就这样，他开始了他的初中生涯，一晃，到了初一下男孩发育的晚，个子在那时的班上显得特别矮，于是便一直占据着第一排的座位有一天，他注意到左边隔了一条“走廊”的女孩“啊你是我小学隔壁班的那谁”，男孩想起来了女孩很好奇，“我很出名吗”“没，只是听过你的名字”，男孩解释道有时他们就这样有一句没一句的聊着—男孩被家里管得紧，心思却野的很在班上干了不少被人唾弃的事情那个学期末，他考了个很次很次的排名，被骂的很惨从此，他过上了周末补课的生活整个初二，他都在跟成绩斗争着—一晃眼，初三了男孩挺拼的，终于把成绩搞回去了但心思野是没办法治的荷尔蒙作祟下，他对一直都留意着的女孩产生了兴趣他开始频繁的找女孩聊天，就像无数个人生活中发生的那样，他们开始慢慢互相了解男孩突然发现自己早就喜欢上了女孩他拙劣地表演着自己简单的喜欢十一月一次考试之后，班主任要调整座位男孩略施小计就提前看到了班主任留在班级电脑上的新座位表他看到班主任把他和女孩分在了一起他高兴的差点晚上差点没睡着第二天中午，换完座位的他，坐到了整个教室最左侧第三排靠窗的位置，旁边就是他喜欢的女孩有那么一瞬间，他觉得自己是幸福的成为同桌之后，说话更方便了，再加上男孩朋友们的“助攻”，感情增进的很快在一个温暖冬日，即将放学的时候，男孩的告白不当心脱口而出了“我喜欢你啊”男孩眼中映着的女孩的脸，是窗外即将落山的夕阳的颜色男孩也不知道发生了什么，日子一切照旧，嬉笑打闹，哭啼皆有男孩是幸运的，从十一月之后，班主任再也没有调整过座位直到第二个学期开始即将分离的气氛开始浓重，中考也成了生活的绝对重心男孩和女孩不知道怎么了，拌嘴的频率越来越高两次模拟考之后，保送高中的名单确定了下来男孩离县上最好高中的保送资格一步之遥虽然他早就预感到了这个事实，但不禁还是有些受到打击于是，班上走掉了许多人，座位又要调整了这次，女孩坐到了男孩的左前方，男孩的同桌成了他当时最好的朋友W男孩发现，女孩和W的关系好的不行他们经常煲电话粥，上课还疯狂传纸条男孩心里有些酸，终于有天发作了，一生气就一直不理会那两人他们觉得很莫名奇妙，让男孩生了几天闷气，最后自然的消气了清明节，女孩的爷爷去世了，第二天她来上课的时候，眼眶红的很又一次模拟考，男孩的成绩出现了大幅下滑老师开始找他，家长也在施加压力即使是这样，最后男孩还是买了两分才进那所最好的高中而女孩，则是考去了另一所学校于是，男孩彻底与女孩分开了，物理距离上考完之后，男孩和女孩一起在学校帮忙的时候班主任和数学老师开他们玩笑“我发现男孩上课不认真的原因是一直在看女孩”，数学老师笑嘻嘻的男孩脸一红，瞟了一眼女孩，发现女孩也在看他“要是一直都能在一起多好啊”，男孩在心中叹了口气突然他想起来，女孩的QQ都还没加上在他们还是同桌的时候，女孩把自己的密码给了男孩，虽然她说很多人都已经有她的密码了男孩偷偷的把自己的密码跟女孩改成一样的，一直用到现在半夜，男孩登上女孩的QQ，把自己加了进去第二天，学校又要开班会，结束之后，女孩突然就问男孩“你是不是登我Q了”“是啊，我加了我自己”“那你为什么不把分组给改了？”“忘了”，男孩摸了摸头女孩生气了，她把拳头砸在男孩肩上男孩突然被重击了一下，吃痛，无名火也冒上心头但他转念一想，还是他错在先，于是就离开了正巧，下着雨，他搭了同学的车回家一路上，车载音响都在放着信乐团的《离歌》“真是切合今天呢”，男孩心想就这样，一个暑假，双方谁也没理谁男孩一直都想找机会道歉，但那句“对不起”却始终出不了口—马上，高中也要正式开学了剩不了几天的时候，女孩突然联系了男孩“今晚我要翘家找一个网友”，女孩说网友是她很久之前就认识的一个大男孩于是男孩陪她聊到很晚很晚突然间，那几天，他们又迅速地熟络了起来男孩也趁机把自己最好的朋友G介绍给了她她看起来对G非常感兴趣那几天，即使是在军训期间，他们三个也经常聊到很晚G比男孩女孩都小上一级，因为父亲跟男孩父亲是发小，于是也就认识了很快男孩发现自己和G有许多共同话题可以聊开学了，男孩的手机被缴了但男孩还是成功地约出了女孩，虽然地点是在G的家里女孩和G第一次见了面—接下去的发展，简直是一个疯了的剧本家写出来的女孩和她班上的一个男孩恋爱了，这不是她的初恋男孩很迟才知道这件事男孩像疯了一样地往女孩的空间留言他终于真的受不了了男孩把事情扩散的很大，连不在一个学校的友人W都打电话过来问男孩是不是真的要放弃了“我累了，想休息”，男孩认真地回答快要到女孩生日了，男孩认真的准备了她提到过想要的书然后写了将近三十页A4纸的文字一起寄给了女孩根据女孩的空间留言板记录看，她那几天一直在哭男孩心也痛，自己为什么这么爱吃醋呢，他想他也没想到自己会如此伤害到女孩“唉，要不道个歉态度软下来继续做朋友吧”，他内心的一半这么想“不行，她谈了恋爱还不告诉我，我接受不了当备胎的感觉，要惩罚她”，另外一半这么想于是，就在每天的纠结中，迎来了寒假男孩认识G后不久就被安利了不少动画片高中刚开始那个国庆，他开始了萌二生涯于是，整个寒假都几乎用来补番快要开学的一天，女孩发了一条煽情说说，不知道求了多少人来转发好让男孩看见男孩气早就消了，心也软的差不多了他只是想再撑一撑给自己留存一些脸皮然后开学前一晚，女孩和她的男朋友同时找到男孩来抱怨，他们即将分手男孩哭笑不得因为新一届实行的高一第一学期结束就分班的制度男孩又一次来到了新的班级“哦，原来你就是那个谁啊”，男孩发现不少人都听过他的名字以他最意想不到的方式进入高中之后男孩的心思没有放在学习上太多而是一天到晚不务正业他从高中进校开始就被打上了“问题学生”的标签什么高中第一学期开学第二周搞错周一到校时间晨会的时候，自己班级正巧站在正对着校门的台阶上目送他进校门什么第二学期上课玩touch被收被赶出晚自修作为惩罚总而言之，读书劲大不如前了男孩稀里糊涂的混着日子终于快放暑假了，因为课程改革的关系，学校安排了两天的实践课程男孩选择了一门在机房上的课，然后把整个机房改造成了网吧几乎所有人都在打游戏第二天的时候，女孩来给男孩送外卖男孩直接脱下自己的校服，女孩混了进来，就这么坐在男孩身旁看着他打了一下午的游戏暑假快到男孩的生日了，女孩很上心的叫了一些朋友，大家在大热天吃火锅钱都是女孩付的，还送了一个男孩喜欢的角色的手办因为不方便带进家里，男孩把礼物转交给了G保管吃完火锅，一群人进了黑网吧打游戏，女孩却和G在那儿看动画聊天男孩笑笑，也不在意直到几个礼拜之后，他得知G一直在约女孩一起图书馆有一天中午，女孩跟男孩说图书馆没位置了去G家里了男孩终于急了G把女孩称作自己的女仆有一天，G发了一份女仆宣言给了男孩男孩没明白啥意思，G也就没多说G也进了男孩的高中，男孩有事没事就找G一起吃饭男孩把自己的午饭钱全花在各式各样的杂志上了，只好蹭饭卡但高二第一学期快结束的时候，男孩突然迷上了翘课去网吧于是几乎整个高二第二学期的晚自修，男孩都是在网吧度过的整个高二，男孩都没怎么和女孩说过话，女孩倒是寄过两封信男孩嫌麻烦，一直都没写回信很快的，高三了最开始的一个月，男孩用尽了所有心思把《冰与火之歌》给看完了顺带着在家长会上被狠批了一顿男孩被调到了讲台旁边，他终于开始收心班主任看着他有点起色的成绩放了点心，一个月后把他给下放了于是他又开始散心一天，他在书店里发现了一本之前从来没见过的杂志，叫做《新知》其文章晦涩难懂，不少涉及到哲学内容，让男孩沉迷其中，直到晚自修班主任站在他面前班主任一把夺过这杂志，走到在班级后面的水桶旁，三下五除二的，把书撕了，教室安静极了“下了课来我办公室”，班主任说不出意外的，男孩又被流放了不能告诉家里，图书馆又每晚八点多就关门了，那去哪里好呢男孩选择了网吧寒冷的冬夜里，男孩拖着中饭晚饭几乎一点都没吃的身体，在那条长达五公里多的回家路上踩着单车回家的路有一段和女孩回家的路是重合的一天，他在回来的路上看到了熟悉的影子是她，追上她，男孩用尽全力的踩脚踏奈何，他所剩不多的力气在两座桥面前无能为力连叫住她的声音都发不出，生怕喊住的，不是她男孩就这么又开始混着日子就是在这段日子里，他发现女孩的微博更新了，转发了好多情感类的鸡汤他意识到肯定有些什么事情发生了他在中午的时候拦到了G“你跟她发生了什么？”，他质问道G隐晦的表达出了他A了上去然后打出GG的故事男孩又一次哭笑不得，他最不想发生的事情发生了G又告诉他，一年前发给他的女仆宣言就是说他喜欢上了女孩男孩再次无言G还告诉他，G也写了很多很多文字，附上了礼物放在家门口看着女孩来取走男孩已经不知道能怎么表达自己的情感了他回到教室，开始写信信的内容只字不提她和G发生了些什么，只是写些日常女孩的回信也是如此仿佛他们回到了最早的时候三四次通信之后，又是新学期一天男孩的家里没做早饭男孩选择去女孩家门口的早餐店买刚给完钱接过东西，他的余光看到一辆电动车从小区驶出直觉告诉男孩就是她他飞奔上车，像那个冬夜里那样用尽全力去追赶可惜，最终还是差那么点距离男孩还是没能喊出她的名字离高考就只剩几天了男孩最后一次翘课去网吧，似乎是一种告别仪式他没等到自己学校的放学时间离开，而是在女孩放学时候去了她的校门口等她他真的等到了她，可能是有史以来第一次，他们一起回家路上，他也只能嘘寒问暖提些无关紧要的话题他还能提些什么呢？太快了，就像高中三年的速度一样，他们分别了—男孩考去了遥远的C市，而女孩则是在就近的H市就读暑假的最后一段时间，因为一些变故，男孩痛不欲生事情解决之后，男孩家不得不安排一顿大学酒男孩邀请了她，还有G是不得不邀请的男孩知道会很尴尬她来了，一身白裙，很漂亮G自己坐在一旁，玩着手机男孩酒量不行，几杯红酒下肚已经进入了半倒的状态，连同学什么时候走的都不知晓那时最后一次和她见面进入九月，那天就要出发前男孩想起还有一些材料要复印于是约了友人H载他路上，H提到要不要把她再叫出来见个面男孩想了想，“没时间算了吧”H摇了摇头，也没再多说什么，最后他们拍了拍肩告别—大学刚开始的时候，男孩还会给她打电话聊天几次一聊就是半小时男孩发现自己还是放不下女孩放不下意味着不可能开始新的感情光棍节，趁着酒意，他找到女孩“不要异地”，女孩明确的拒绝了他他笑了笑年末的时候，又因为一些变故，男孩的心理压力大到承受不了了他终于再次打了女孩的电话断断续续地倾诉到手机欠费这是他最后一次听到她的声音从此，男孩再也没联系过女孩女孩也没联系过男孩直到一年半后—大二的寒假，男孩约G一起去上海玩途中，男孩提起女孩“你和她怎么样了”“啊，加回好友了”也没聊更多五月末，G突然找到男孩，问他暑假要不要一起去某站的演唱会男孩算了算手头的钱，“手头有点紧，还是算了吧”，他回复说暑假男孩找G一起去J市修手机，归途，无意间男孩看到G的淘宝记录，两张票“你和谁一起去啊”，男孩好奇的问“哦，没告诉你吗，你不去我就找了她啊”，G很坦然“你们和好了？什么时候”“不是告诉过你了吗？她加回我好友了啊”男孩心中开始充满不安但他强装出一副镇定的模样“你们酒店要押金你钱够吗”，男孩递出一张信用卡，“这里面还有点钱，你拿着用以后还我”“记得带套”，他最后叮嘱了一句原本他以为他已经放下的感情，又开始在他心中冲撞他坐卧不安临行前几天，他终于忍不住了，在女孩的留言板留下了两年后的第一句话没想到女孩迅速找到了他，“你想说什么，赶紧说我看着的”他有些慌，打了字又删掉“你想说什么发出来吧，我明天还要早起先睡了”，女孩似乎很忙男孩呼出一口气，扔给对方一个99+却两天没收到女孩的回复终于，他等到了回复可那几乎是陌生人的感觉，不是他想要的回复有总归比没有强吧，男孩心想男孩早就反思过自己的过错，但已经是既成事实了，没有后悔药行程第二天早上，他看到G很早就在线了“她一回酒店就睡着了”，G这么说“这酒店服务太好了还给加了床”，G还抱怨男孩笑笑，再也没跟G提起过她他准备好了去旅行—又是一个寒假，照例，G会来男孩家一趟交换点资料什么的男孩旁敲侧击提起女孩“啊，她，我女朋友啊”，G云淡风轻男孩还是只能笑笑，转移了话题他不信，他不愿相信—男孩又开始找女孩说话，只是只敢以留言板的形式他们似乎回到了最早的时候，在对方的留言板上你一句我一句的不同的是，男孩的留言板上，没有别人的留言今天，男孩终于感受到了一丝异样女孩和G在用同样的聊天习惯说话男孩笑笑，既成事实，不想承认也是摆在那里的—男孩和女孩的故事，还在继续。","categories":[],"tags":[{"name":"Everything","slug":"Everything","permalink":"https://xinoassasssin.github.io/tags/Everything/"},{"name":"Memories","slug":"Memories","permalink":"https://xinoassasssin.github.io/tags/Memories/"},{"name":"杂","slug":"杂","permalink":"https://xinoassasssin.github.io/tags/杂/"}]},{"title":"关于抗锯齿","slug":"about-AA","date":"2018-03-11T09:51:47.000Z","updated":"2018-03-25T14:23:46.495Z","comments":true,"path":"2018/03/about-AA/","link":"","permalink":"https://xinoassasssin.github.io/2018/03/about-AA/","excerpt":"","text":"今天听 Gadio News 的时候，最末尾一段提到了希望有人能来讲讲抗锯齿技术。才疏学浅，但是前几年看 MC 的文章还是知道一点相关内容，所以就来看着维基写写看，如有不正之处劳请指出。 锯齿与抗锯齿首先，什么是锯齿，以及为什么会出现锯齿。 我们的屏幕，是以一个个正方形的像素点组成的，而正方形的特性导致了在倾斜的线上，边缘必定会出现一个个突起的阶梯状“毛刺”，比如图上这种 这种阶梯状的“毛刺”就是典型的锯齿。而有了锯齿也就有了抗锯齿(Anti-Aliasing). 抗锯齿的一般过程就是将这个毛刺的边缘柔化，使图像边缘看起来更平滑。如图： 各种算法简单介绍抗锯齿算法种类非常多，下面的介绍顺序基本上是各种抗锯齿算法出现的时间顺序。 SSAA超级采样抗锯齿(Super-Sampling Anti-Aliasing, 也可叫做 Supersampling 超采样)是最早也最简单粗暴的抗锯齿手法，它的原理非常简单，就是在渲染时将要输出的分辨率提升 x 倍，比如要输出 1920x1080 的分辨率到屏幕上，开启 SSAA 2x, 那么内部渲染时的分辨率就是 3840x2160, 然后 Downsampling 到 1920x1080 上，自然在许多纹理边缘上就显得平滑许多。但是这种方式太太太吃资源了，所以又开发出了新的算法。 在 Nvidia 发布二代 Maxwell 架构的时候，同时发布的 DSR 技术中就有 SSAA 的影子，技术思路同样是以更高分辨率渲染的原始画面输出到显示器分辨率上来得到更加精细平滑的画面。 MSAASSAA 太吃资源了，我们的硬件暂时还跟不上，怎么办？于是就有了多重采样抗锯齿(Multi-Sampling Anti-Aliasing), 它跟 SSAA 的区别就是，MSAA 只对于多边形的边缘进行抗锯齿处理。比如一个红色的圆，只对圆周作抗锯齿多重采样计算，但是圆周以内的部分则不会处理。这种方式下的画面锯齿得到了一定的抑制，而抗锯齿需要的资源也大幅下降到可接受的范围中。所以 MSAA 也逐渐成为目前被使用的最多的抗锯齿技术。 但是 MSAA 也有其局限之处，比如对于半透明物件、边缘不明确或者非常复杂的物件比如密集草丛、铁丝网这类的抗锯齿处理就比较力不从心。 CSAA &amp; CFAA历史进入 Direct 10 时代，NV 方先声夺人发布了 G80 系列，同时带来了覆盖采样抗锯齿(Coverage-Sampling Anti-Aliasing)技术，主要改进了取样类型从而使得抗锯齿效率提升，资源占用量也得到减少。举例来说，如果使用 16x MSAA，需要在周围取得 16 个采样点的色彩值和 Z 轴值，然后保存这些数值进行计算。而 16x CSAA，则全部在被采样的像素点中心取得色彩之和Z轴值，然后对比并去掉同样的数据。一般来说，16x CSAA 后只需要保存 4 份色彩值和 Z 轴值即可。换句话来说，4x MSAA 耗费的资源和 16x CSAA 是相同的，但是，16x CSAA的画面效果相比 4x MSAA 更好。 同期 ATI 在发布 R600 系列时也带来了可编程过滤抗锯齿(Custom Filter Anti-Aliasing)技术。简单的来说 CFAA 就是扩大取样面积的 MSAA，比方说之前的 MSAA 是严格选取物体边缘像素进行缩放的，而 CFAA 则可以通过驱动判断对影响锯齿效果较大的像素进行缩放，以较少的性能牺牲换取平滑效果。 但是由于种种原因，CSAA 被接受程度更高一些，不少游戏就直接加入了 CSAA 选项。而 CFAA 由于需要在显卡驱动面板中进行调试而渐渐被用户所遗忘。 MLAA &amp; FXAA在 CFAA 被遗忘之后，AMD-ATI 带来了形态抗锯齿(Morphological Anti-Aliasing). 不同于上面几种需要对多边形边缘进行分析计算的算法，MLAA 是一种后处理技术，发生在整个 3D 计算完成即将输出画面到屏幕上前，打个比方就是你拍完照用 Photoshop 处理的过程。 MLAA 的实际效果还是非常不错的，但是资源耗用还是有点厉害的。它的最大优势就是不需要游戏来支持它，因为是后处理技术所以在显卡驱动面板中打开就能用而且兼容性非常好。但是由于其仅仅使用颜色数据来判断抗锯齿边缘，因此 MLAA 的应用可能导致无法辨识到底哪些边缘需要进行抗锯齿计算。特别是一些不需要抗锯齿的地方，如文字，表格等，可能都由于不当抗锯齿而显得圆滑甚至怪异。 这边 A 家出了新抗锯齿技术，老冤家 NV 当然也不甘落后，在 Fermi 上推出了快速近似抗锯齿(Fast Approximate Anti-Aliasing)。 FXAA 和 MLAA 一样，也是一种后处理抗锯齿，两种 AA 在原理上相似，但是由于 FXAA 可以在 AN 两家的卡上都可以用而 MLAA 则由于部分计算处理依赖于硬件所以只能在 A 卡上用，最后导致 FXAA 被广泛的采用了。而且同时期 FXAA 的性能损失比 MLAA 更小，而效果上基本能接近 4x MSAA 的画面，虽然同样还是会出现“字体破坏”的情况。 TXAA在抗锯齿这条路上，众多程序员以及各种“家”的探索是不会停下来的。在 Kepler 架构发布的同时，NV 也带来了新的 TXAA(Temporal Anti-Aliasing 可称为“时间性抗锯齿”)技术，据 NV 自家的介绍，这项技术集时间性过滤器、硬件抗锯齿以及定制的 CG 电影式抗锯齿解算法于一身。 原有的抗锯齿技术在解决静态画面的锯齿上可以说已经达到了瓶颈了，但是在动态画面上，有锯齿的部位很容易出现闪烁。如同其名字中的“时间性”，TXAA 旨在解决“时间性抗锯齿”，也就是动态画面中的锯齿闪烁等问题。而其同时提供着不输于 8x MSAA 的静态画面抗锯齿效果。 TXAA 可以说是目前被采用的较多的抗锯齿算法中最厉害的一种了，但是它一是需要硬件电路配合，二是吃资源，以性能换画面，所以也基本上是中高端 N 卡用户用的。 结语目前主流的一些抗锯齿技术大概就是这么多了，本文很多内容都是参考中文互联网上的一些文章写成的。第一次在机核发文，存在的许多不足之处也请多多包涵。","categories":[],"tags":[{"name":"Everything","slug":"Everything","permalink":"https://xinoassasssin.github.io/tags/Everything/"},{"name":"Game","slug":"Game","permalink":"https://xinoassasssin.github.io/tags/Game/"},{"name":"Hardware","slug":"Hardware","permalink":"https://xinoassasssin.github.io/tags/Hardware/"}]},{"title":"Arch Linux 小折腾记","slug":"install-an-archlinux","date":"2018-02-13T07:46:21.000Z","updated":"2018-03-25T14:31:46.431Z","comments":true,"path":"2018/02/install-an-archlinux/","link":"","permalink":"https://xinoassasssin.github.io/2018/02/install-an-archlinux/","excerpt":"","text":"久闻 Arch Linux (下文简称 Arch )大名，在虚拟机上多次完成过了整个系统的安装与图形界面的配置，也试过了 KDE 和 GNOME 这两个大名鼎鼎的图形环境，深切体会到了 Arch Linux 的四大原则： Simplicity Modernity Pragmatism User Centrality Pacman 是最好的包管理器 我分别在自己的台机上和一台 ThinkPad S1 Yoga 2014 上安装 Arch. 具体过程跟着官方 Installation Guide 走就行了，Wiki 中的注意事项也是比较全面了，本文写几个小注意点。 Btrfs不知道 Btrfs 的我建议你马上查 Wikipedia. Arch 的安装 ISO 环境中是自带了 Btrfs 的工具包和支持的，但是在 base 软件包中不包含这些，所以你需要手动安装 btrfs-progs 这个包，然后在 /etc/mkinitcpio.conf (注意是在 arch-chroot 这一步之后)中的 HOOK 一行中添加 btrfs, 之后跑一遍 mkinitcpio -p linux, 看到输出中有 btrfs 即可。 关于 btrfs 的配置问题，参见官方 Wiki, 也可以参考 egara/arch-btrfs-installation. Boot Loader在 Boot Loader 的选择中，我个人还是比较倾向于直接使用 systemd 集成的 systemd-boot, 懒得再装个 GRUB. 虽然 systemd-boot 局限性非常大，比如它只能加载 EFI 可执行文件比如 bootmgfw.efi, vmlinuz-linux. 如果选择了 systemd-boot 作为 Boot Loader, 那么就需要在 arch-chroot 后手动运行一次 bootctl --path=$ESP install 来把引导程序安装进 EFI 分区中并向 UEFI 界面注册这个引导器，之后你在启动时按 F12 就可以看到一个 Linux Boot Loader. 但是如果只是将 Boot Loader 安装到了 EFI 分区还不足以让它引导我们进 Arch, 仍然需要在 /boot/loader/entries/ 这个目录下建立新的 conf 文件，里面的内容如下 1234title Arch Linuxlinux /vmlinuz-linuxinitrd /initramfs-linux.imgoptions root=(PARTUUID|PARTLABEL)=xxxxxxxxxxxxxxxxxxxxxxxx rw 如果使用的是 Intel 的 CPU 并且有安装 intel-ucode 包，那么在第3行之前再加一行 initrd /intel-ucode.img 启用它。 建立完了引导所需的系统 config, 需要在 /boot/loader/loader.conf 中的 default 一行中指定刚才建立的 config 文件名，然后使用 Linux Boot Loader 引导器就会默认进入 Arch Linux. 双系统与时钟感谢 UEFI 标准，现在我们可以非常方便地组建双系统 (Windows + Linux) 环境。 如果使用的 Boot Loader 是 systemd-boot, 那么它会自动检测 Windows 的存在，并且在选择菜单自动提供一个 Windows 的选项，这个选项的配置名为 auto-windows, 选择它会运行 /boot/Microsoft/Boot/bootmgfw.efi 然后就是 Windows 的流程了。 双系统有一个很大的问题，就是时钟。Windows 默认往 BIOS 写入本地时间，而不是 Linux 标准的 UTC, 这就会导致你从 Windows 切换过去后时间会+8, 也就是按你的时区调整然后又写回到 BIOS 中。从 Linux 切换过去，Windows 认为是本地时间，于是显示给你的实际上是 UTC. 所以为了解决这个问题，在安装 Arch 时，使用 hwclock --hctosys -l (将硬件时间作为本地时间读入系统), 而不是 Guide 上所用的 hwclock --systohc(将系统时间写入 BIOS 并且是 UTC). 之后启动到 Windows, 注册表定位到 HKLM\\SYSTEM\\CurrentControlSet\\Control\\TimeZoneInformation 添加一个 DWORD, 名为 RealTimeIsUniversal 值为 1, 即可实现 Windows 往硬件中写入的时间是以 UTC 为标准而不是本地时间。 systemctl enable由于 Arch Linux 的哲学，大部分软件包在安装之后也并不会自动启用，需要你手动 systemctl enable|start xxxx. 尤其要留意的是，还在 ISO 环境下安装系统的时候就要把 dhcpcd 这个服务给 enable 了，解决你进系统之后发现连不上网络想半天不知道问题出在哪里的问题。当然这是针对有线网卡，而大部分无线网卡，我推荐直接使用 Network Manager 搞定。当然使用无线网卡的首次联网你还是需要如下步骤： 123ip link set dev interface upiw interface scanwpa_supplicant -B -i interface -c &lt;(wpa_passphrase SSID Password) 还有一点需要注意的是，Arch 的 Shadowsocks-libev 默认读取的配置目录在 /etc/shadowsocks/, 与 Python 版相同的目录而不是传统的 /etc/shadowsocks-libev/ 下，启用它的命令为 systemctl enable shadowsocks-libev@配置文件名.service . Intel 有线网卡的坑当你机器上使用的网卡的是 Intel Ethernet Connection I21x 的时候，你要小心了，在安装 Arch 之前，在 Windows 中安装 Intel 的官方驱动，然后在网卡的硬件配置面板中将所有的网络唤醒选项给关闭，这可以有效防止你进入 Arch 环境之后获取不到任何的网络信息导致连不上网。 &gt;&gt; endl;","categories":[],"tags":[{"name":"Everything","slug":"Everything","permalink":"https://xinoassasssin.github.io/tags/Everything/"}]},{"title":"故人","slug":"old-friends","date":"2018-02-13T06:21:11.000Z","updated":"2018-02-13T06:21:11.116Z","comments":true,"path":"2018/02/old-friends/","link":"","permalink":"https://xinoassasssin.github.io/2018/02/old-friends/","excerpt":"","text":"故人，泛指以前认识的人。 你活了二十年了，认识过了多少人呢？ 从亲戚到学校再到社会，故人所指代的人越来越多。曾经那些与你关系不错的“朋友”们，不联系了也就进故人堆中了，你的故人堆越来越高。 没办法的人总在变化的你不可能一辈子只认识这么点人不跟更多的人打交道。但是每当由以前的“朋友”进入故人堆中，你感到过自己情绪的变化吗？惋惜，痛心？亦或是经历的多了根本就无动于衷？ 这个小县城，是全中国千千万万个县城中普通的一个，坐落于传统的富庶之地。千百年来，此地的士绅文化根深蒂固，不像是更南方的人们更喜欢经商。在外读书的学子们，学成之后也更偏向于归家，而不是留在求学之地。 这个小县城，只要你的故人多，那你上街随便走两步都能碰到他们，就连坐在这小小图书馆的一个自习室里，你一眼扫去，都能找到好几个疑似你认识的人。 中国是个“人情社会”。 人情，在我的定义中，就是“我帮了你一个忙，你就欠了我一份情”中的“情”，用劳动报酬来解释或许更好一些。 人情社会，就是以人情编织成的网络为基础的社会。举个例子，你爹喝酒上头了，跟你说，儿子，你想不想回来工作，爹帮你去跟局长说一说。 这个“说一说”中，又包含了多少背后的含义呢？ 我讨厌人情。 故人来找你帮忙。 你正好闲着没事干，帮了。 故人一句谢谢，结束了这几年中你们为数不多可能是仅有的交流，你甚至找不到一句你们能聊的共同话题。 你还能指望更多的报酬吗？你的时间成本就值那么两个字了？ 当然不是，这份我最厌恶的人情，就是委托方亏欠的你仅有的报酬，虚无而飘渺。 小县城是一个小型的人情社会。走两步都能碰到故人的情况下，你被迫地，要去帮故人的忙。 你不帮，是你不念旧情太过高冷不会做人。你帮了，又是白费自己时间获得一句空头的“谢谢”。 这只是整个中国这个大型人情社会的一个小缩影，有人的地方，总会有人情。","categories":[],"tags":[{"name":"Everything","slug":"Everything","permalink":"https://xinoassasssin.github.io/tags/Everything/"},{"name":"Memories","slug":"Memories","permalink":"https://xinoassasssin.github.io/tags/Memories/"}]},{"title":"泄露的 iBoot 源代码中都有些什么","slug":"what-iboot-source-code-contains","date":"2018-02-09T09:05:33.000Z","updated":"2018-03-28T14:05:28.139Z","comments":true,"path":"2018/02/what-iboot-source-code-contains/","link":"","permalink":"https://xinoassasssin.github.io/2018/02/what-iboot-source-code-contains/","excerpt":"","text":"近日，一份疑似 iOS 9.3.x 的 iBoot 及其他部分 BootLoader 的源代码被匿名人士 push 上了 Github, 粗略地查看了一下里面的文件之后，大家都惊讶地发现这份源代码的爆点实在是太多了。 项目的 README 中是这么写的：iBoot_BootROM_iBSS_iBSS_iLLB_Source_Code 其中 iBSS 是 iBoot Single Stage 的缩写，而 LLB 是 Low Level Bootloader 的缩写。 我们先来看一下 iOS Devices 的启动流程： 在 Apple 定制的一系列 A 系列 SoC 中有一块存储区域专门存放了一部分最初的启动代码，也就是俗称的 BootROM, 这部分被 Apple 称之为 SecureROM, 它是在电源键被按下，设备上电之后最初加载的代码。SecureROM 检查下一级 BootLoader, 也就是 LLB, 如果签名没有问题，那么就加载并初始化 LLB, 此时设备的 Apple Logo 就出现了。然后 LLB 检查并初始化 iBoot, 同样是通过 Apple Root CA Public 证书验证签名，通过就会把设备带给 iBoot, 而 iBoot 会映射 Device Tree, 然后验证内核签名并加载，最终初始化内核并运行，这时候可以说 iOS 系统已经启动了。 通过简述的启动流程，我们可以看到，BootROM, LLB, iBoot 这三个无论哪一个都是在整个启动流程中充当关键角色的。所以这次源代码的泄露，非常劲爆。 在基于证书链的安全体系下，私钥的泄露可以说是直接把安全性掉到0去了，而这份代码中，在位于 /lib/pki 和其中的 tests 目录下，可以看到有一份 Fake CA 和一些私钥，还有一份中间证书和私钥，如果后续版本也是沿用这些东西的话，整个启动验证链的加密体系，就真的可以说安全性为0了。 因为这份代码是 9.3 时代的，也就是在 iPhone 7 那代发布前的版本，所以我们能看到有许多 T8010 相关的文件（T8010 是 Apple 对于 A10 芯片平台的代号）。而有趣的是，在 /target 目录下出现了 iphone8 这个文件夹，难不成 Apple 内部在 2016 年就开始对 iPhone 8 进行内部测试了？但是点进去看，目录下的文件清晰的指向了另一款产品——iPhone 6s. 往上推，iPhone 7 文件夹对应着 iPhone 6, iPhone 6 文件夹对应着 iPhone 5s, 如果按照这个内部排序，iPhone Ⅹ 这个 Ⅹ的由来，可能更好解释一点。而 iPhone 8, 则更像后来上马的 iPhone 7 Reversion. 除了主引导程序的代码外，泄露的代码中还包含了许多驱动，在 /drivers 目录下，可以清晰地认出 iOS 平台所使用的一些硬件，其中甚至包括了 Thunderbolt 驱动。 内容还有很多，笔者水平有限，也解读不出更多的东西了。 &gt;&gt; endl;","categories":[],"tags":[{"name":"Everything","slug":"Everything","permalink":"https://xinoassasssin.github.io/tags/Everything/"},{"name":"杂","slug":"杂","permalink":"https://xinoassasssin.github.io/tags/杂/"}]},{"title":"悼念 AcFun","slug":"mourn-for-acfun","date":"2018-02-02T08:08:02.000Z","updated":"2018-02-02T08:08:02.339Z","comments":true,"path":"2018/02/mourn-for-acfun/","link":"","permalink":"https://xinoassasssin.github.io/2018/02/mourn-for-acfun/","excerpt":"","text":"2018年2月2日，AC 又又又倒闭了。 前两天深夜刷微博时，碰巧瞥见一条“新闻”，上书「AcFun 团队缺乏资金，欠薪几个月，已经无力维持网站运营，关站在即。」第不知道多少次看到 AC 要关站新闻的我，也不以为意，不过就是第不知道多少次关站而已，我也早就不是 A 站用户了，对这个网站没什么怀念或者留恋的东西。 然后今天早上醒过来，一刷微博，铺天盖地的，又是一堆“AC 亡了”的消息。有打趣的有悼念的有分析的有写背后故事的，甚至还有缺德的。娱乐至死的年代中，这个消息也只能成为一些人的热点，一些人的谈资，一些人的一条悼念微博，而更多的人，则是好奇：“AcFun 是啥？” A 站走到今天这个地步，绝非偶然。 一次又一次，他们错过了从 2012 年说起。 2012年，是我接触更宽广的互联网的第一年。也是在那年，AcFun 举办了第一届宅学会。当时刚刚了解到 A 站是啥的我，在 A 站看了直播——后来的 A 站直播区，叫做“斗鱼”，斗鱼的早期用户中不少都是以 AcFun 账号注册登录的，包括我——然而这样的宅学会，是第一次，也是最后一次像样的，第二届的宅学会就已经朝着“主题漫展”的错误方向去了，而且影响力远没有第一次那么大。第一届的宅学会上，A 站请到了著名配音演员葛平，还有GoHank、性感玉米、林熊猫这三位来主持。 而这时候的 B 站，已经开始逐步用力发展他们的移动客户端业务了。早期的 AB 两站移动客户端体验，B 站的 App 无论在界面设计还是播放体验上，都是比 A 站的要高出一条街的存在。 本文主旨不在于两站对比，故以引用形式略提一句同时期的 B 站发展概况。 搞笑的是，在第一届宅学会过去恰好一年之际，GoHank, 这个对 A 站贡献不少的 UP 后来进入管理层的“猴子”出走了 B 站。当时 A 站不少运营以及用户的理念，在这个帖子中，能够瞥见一番。狗Hank+葛平+ACFUN事件 那hank确实不适合这里了，因为我觉得ac就像是猴王的微博的简介“只交朋友，不混圈”走好不送。 还是那句话，只交朋友，不混圈，混圈的话，隔壁欢迎你。当然这里也欢迎你，不过&gt;这里欢迎的是朋友，不是圈子。谢谢。 然后就是赛门出走这一重大事件。 2014年4月末，时任“站长”的赛门和投资者闹翻，离开 A 站。 一句话足矣，想要了解详情的，我建议通过知乎查询。 赛门走后，AcFun 的管理层可能是失去了一个大的方向，也可能是陷入了融资后高层权力斗争的漩涡中，网站运营没有起色。 2015年3月，因为版权问题，AcFun 三名高层被刑拘，其中包括业余创作“空之文库”的尼窝猴。而事件解决期间不断有前猴子出走，原来的武汉团队几乎没剩几个老员工。 当时的空之文库在轻小说阅读的体验上可以说是秒天秒地秒空气 2016年2月，匿名版之争，光驱猴投奔 B 站。 …… 之后的事情，仿佛 AcFun 已经被大家都淡忘了，不时的传出点消息跟世人说：“我还活着”。 它曾经拥有过很多次机会来扩大自身，但却因为各种各样的变故，都错过了，也许是他们缺少一个如陈睿般的有经验的运营决策者，也许是他们根本不想扩大，小众一点也没什么不好。而从 A 站早中期脱离出来的 MikuFans, 已经成了中国“二次元文化的代表”，甚至已经在准备上市了。 也许，再过几年，大家都会想起，曾经有个网站叫做 AcFun, 是它最早在大陆开始传播隔壁邻居的一些亚文化，是它最早推动了国内的二次创作，是它培养了国内一代亚文化人才。 也许，它会撑过这次危机，如官博所说的那样，“我想再活五百年！ ”。就算小众，但也能给众多喜欢 A 站的“漫友”们提供一个温暖的家，就像它一直以来挂着的那句“天下漫友是一家”那样。 再见，AcFun但愿这一次，A 站别再活过来了。 就让 AcFun 这个名词进入中国互联网的历史故土堆里，安心地为后来者提供它那一份“历史经验教训”和代表着老一代日本亚文化推广者和受众们的，美好回忆吧。","categories":[],"tags":[{"name":"Everything","slug":"Everything","permalink":"https://xinoassasssin.github.io/tags/Everything/"},{"name":"杂","slug":"杂","permalink":"https://xinoassasssin.github.io/tags/杂/"}]},{"title":"折腾记-0","slug":"doityourself-0","date":"2018-01-30T06:13:57.000Z","updated":"2018-02-02T07:47:18.623Z","comments":true,"path":"2018/01/doityourself-0/","link":"","permalink":"https://xinoassasssin.github.io/2018/01/doityourself-0/","excerpt":"","text":"为了把 RaidFinder 给实现出来，我决定直接自己手动实现一个 Filtered Stream API 的调用，来检查到底是需要什么 Track 关键词才能达到目的。 这里真的要吐槽一下新的 Twitter Developer 页面，以前大量的 API Reference 页面都已经404了，包括一些非常重要有用的 API 文档都能 404, 再看看那个“切换到夜间模式再切换回来之后主题色丢失”的前端 bug 修了几个月才修完，可以说 Twitter 真的药丸。 构造 OAuth 验证查阅了文档得知，Stream API 需要进行在请求的 HTTP Header 中包含完整的用户验证，也就是走完整的 OAuth 验证流程，由于手上已经拥有了完整的用户和应用的 Key : Secret 对，所以直接进行构造。 一个完整的验证字段中必须包括如下内容： Consumer Key Nonce Signature Signature Method Twitter 只支持 HAMC-SHA1 的签名方法 Timestamp Access Token OAuth Version 而 Signature 字段又是根据其他6个字段以及 HTTP 请求的 URL 和参数（包括 POST 方法的 Request Body）来产生的，格式如下： 请求方法&amp;请求URL&amp;其他6个字段&amp;请求参数 HMAC-SHA1 签名的产生还需要一个 Key, 这个 Key 是由用户的 Consumer Secret 和 Access Token Secret 来构建的。 抓包写了半个下午的 OAuth, 写完运行之后还是返回一个 401 给我，仔细检查代码也没有发现哪里出错了。没有办法之下，我想到了抓原版的请求包来看它到底用了什么关键词。于是立即安装 sbt 和 JDK. 其实 Windows 上的 sbt 也就是提供一个 jar 包和 sbt.bat 这个运行脚本来设定 sbt 所需要的运行环境而已。 安装完了，sbt run 先跑一记看看，然后让我没想到的是，在性能比 VPS 强了几倍的情况下，这玩意儿还是跑的稀慢，也可能是 Windows 的问题，总之，构建初始运行环境就花了大概一个半小时，不容易等到开始编译 scala 资源了，开始疯狂报错了。 首先是一个 Python 脚本报错导致后续脚本无法继续，查询项目文档后得知 Windows 上需要 Python 2.X, 而我安装的是 3.6, 没想到在这里会第一次碰到 Python 的版本问题，没办法，下 2.7 改 Path, 好通过了，然后继续报错。 之后报错都是因为 Java 运行环境的限制，主要问题出在内存的设定上，Google 之，然后在 Java 控制面板中添加全局参数，sbt run 之后开任务管理器看到参数起效了，遂继续运行下去，然而还是会报内存不够的错误，不解，好在每次都能按部就班的往下跑一点，几次重启之后也搞定了。把 twitter4j.properties 放到根目录下，sbt run 之后发现貌似请求没走代理，Twitter 请求撞墙超时。这时想到用 Proxifier 将 java.exe 的请求重定向到本地代理去，重定向之后就跑起来了，程序启动的一瞬间有两个 Search API 的请求和一个 Stream API 的请求，然后全是访问 pic.twitter.com 的请求，下图片的。 既然 Proxifier 能够重定向流量，那么我把 java.exe 的请求重定向到 Fiddler 的端口去不就能看到包内容了。但是切过去却发现，所有请求都不通了。期初以为是 Fiddler 没走代理，根据别人的经验添加了转发规则之后仍然出错，百思不得其解中，突然看到程序的出错信息不再是访问 Twitter 超时了，而是 SSL 证书出错。 怎么会呢？我明明把 Fiddler 的证书添加到系统中去了。Google 之，发现 Windows 上的 JRE 自己实现了一套证书环境，我去你大爷的垃圾 Oracle, 放着系统自己的轮子不用非要用自己那套垃圾轮子给人麻烦，前面的网络请求也是自己造的轮子直接跳过系统代理。 没办法，寄人篱下。于是 Google 到添加 SSL 证书的办法，添加完之后发现还需要自定义的命令行让 JRE 读证书，同样使用 Java 控制面板添加参数，然而这次发现参数并没有起效。 切记 keytool 这玩意儿要用管理员身份来跑，添加完之后 keytool 会生成一个 keystore 文件，建议将它移动在自己 Home 文件夹中并重命名为 .keystore 既然 \\$JAVA_OPTS 这个环境变量看上去对 sbt 没用，那我改 $SBT_OPTS, 利用 Everything 这玩意儿强大的搜索功能找到了存在于 sbt 安装目录\\config 下面的 sbtopts 文件，好就是你了，添加自定义命令行，sbt run, 然并卵，一点作用都没起。一头雾水中我打开 sbt.bat 这个 Windows 版 sbt 的实际起效文件，发现了这行： 1set FN=%SBT_HOME%\\..\\conf\\sbtconfig.txt 我去你妈的，也是个不喜欢用一套轮子的。 把原本写进 sbtopts 文件的自定义命令行改写到 sbtconfig.txt 中，Java 命令行的前缀 -J 并不用添加，最后如下： 12345-DproxySet=true -DproxyHost=127.0.0.1-DproxyPort=8888 &apos;Fiddler 的代理端口-Djavax.net.ssl.trustStore=&lt;path\\to\\FiddlerKeystore&gt; &apos;刚刚生成的 keystore 文件的位置，如果移动到了 $Home 下面并重命名为 .keystore 的话这行就不用加-Djavax.net.ssl.trustStorePassword=&lt;Keystore Password&gt; &apos;刚刚 keytool 让你敲的密码 sbt run 终于，我在 Fiddler 中看到了 java.exe 的请求，并且正确地解密了出来。我花了半天时间探寻的内容终于呈现在我眼前： count=0&amp;track=%E5%8F%82%E5%8A%A0%E8%80%85%E5%8B%9F%E9%9B%86%EF%BC%81%2C%3A%E5%8F%82%E6%88%A6ID%2CI%20need%20backup%21%2C%3ABattle%20ID&amp;stall_warnings=true URL Decode 之后就是： count=0&amp;track=参加者募集！,:参戦ID,I need backup!,:Battle ID&amp;stall_warnings=true 我看到这个之后差点吐血，原来他妈就是简单的用, 这玩意儿来分隔开 Track 关键词就能实现日语推的实时 filter??? 还要继续实验。 外网访问前文有讲，家里网络“重做”之后我就把主路由的 DMZ 主机挂在二级路由上，二级路由的 DMZ 挂在自己机器上，这样外网的请求就直接能到自己机器上。 然而从外部使用 DDNS 域名+端口号的方式不能直接访问到 RaidFinder. 哦好像是要配上一个 HTTP Server, 那简单，跑一个 http.server 80 不就行了。 是行了，能访问到所有的静态资源，但是看着 Console 中不断提示的 ws/raids?keepAlive=true 404, 我突然想起来前不久看到的 WebSockets 简介中提到的，要建立一个 WebSockets 连接是需要从 HTTP 请求“转发升级”过去的。于是想到用 NGINX, 下载，这玩意儿才 1MB+ 的大小，真他妈绿色环保。 把自己服务器上的 nginx.conf 拖出来抄配置，终于理解了之前搜到的配置的用处： 1234proxy_pass http://127.0.0.1:$port;proxy_http_version 1.1;proxy_set_header Upgrade $http_upgrade;proxy_set_header Connection \"upgrade\"; 配置中最后两句就是为 WebSockets 而服务的，是一个 HTTP 请求转为 WebSockets 连接的关键点。 那么一切设定好，开始跑，问题又来了：外网无法访问，内网 80 转发正常。 &gt;&gt; endl;最后这篇折腾记的终点就在这里了，不知道为何，访问就是无限转圈，但是起初寻找关键词的目的还是完成了。","categories":[],"tags":[{"name":"Everything","slug":"Everything","permalink":"https://xinoassasssin.github.io/tags/Everything/"},{"name":"Programming","slug":"Programming","permalink":"https://xinoassasssin.github.io/tags/Programming/"}]},{"title":"家庭网络和路由","slug":"router","date":"2018-01-21T06:14:05.000Z","updated":"2018-03-28T14:08:12.834Z","comments":true,"path":"2018/01/router/","link":"","permalink":"https://xinoassasssin.github.io/2018/01/router/","excerpt":"","text":"在上一篇文章中，我提到回家要干的一件事情就是更换路由。把新买的二手 Nepgear Netgear R6250 替换掉用了两年多的洋垃圾 RT-N16. 更换到现在已经过去一天半左右的时间了，遇到了几个问题。 拿快递开箱换上配置好一共花了不到半小时就搞定了，然后问题开始浮现：我的 ThinkPad S1 Yoga 连接不到 R6250 提供的 2.4G 无线网络。开始认为是笔记本上那块单频 Intel 7260 的锅，然后把 R6250 的 2.4G 网的频宽从 40MHz 降到了 20MHz, 结果仍然有时断时续的情况出现，认为还是 7260 这张网卡的问题，准备更换网卡。但北美良心想在 BIOS 中做了限制，更换起来很麻烦，所以一筹莫展。结果今晚日常拿起手柄 V 的时候突发奇想连一下无线，发现根本找不到 2.4G 网的 SSID, 就算不容易刷出来了也是连接不上的状态，遂开始感觉是 R6250 的问题。Google 之，发现使用第三方固件的 R6250 大多都存在这种问题，比如 2.4G 网不稳定，2.4G 根本连不上什么的。但是我又不想用回官方那个烂的很的固件，于是掏出从学校快递回家，原本准备用来替换掉配电箱中的主路由的那只被改装过的 TP-Link WR720N, 本就刷好了 LEDE, 稍微改了几个配置就当 2.4G 的 AP 来用了，连接非常稳定。 把 DMZ 主机指定到自己的机器之后，直接通过 DDNS 域名进行内网访问，速度非常快，延迟非常低，爽。 然后用着用着，无心看到 IPv6 的地址头不对，而且怎么本地 DNS 域也变成了 LEDE 了？一看果然是小的 AP 在作怪，上面的 DHCP 服务器没关，也就是一个网段中有两个设备在 DHCP 广播。遂关闭之，顺带着把 Lan 口设置中的网关确定为 2.1, 并把 Dnsmasq 的服务一起关了，问题消失。","categories":[],"tags":[{"name":"Everything","slug":"Everything","permalink":"https://xinoassasssin.github.io/tags/Everything/"}]},{"title":"假期——于飞机上","slug":"holiday-0","date":"2018-01-18T08:29:28.000Z","updated":"2018-03-28T14:09:04.368Z","comments":true,"path":"2018/01/holiday-0/","link":"","permalink":"https://xinoassasssin.github.io/2018/01/holiday-0/","excerpt":"","text":"在成都磨蹭掉一个礼拜之后，我终于飞回家准备开始假期了。本来以为这寒假够短的，正月十五不到就要返校上课结果今天出发前一看国航 App, 离回程航班还有三十六天，还是有点吃惊的。 虽然 Bitcoin 带着众多币种在昨天一起跳了一次崖，但在短时间内显卡的价格还是下不来的，不过本就打算在过一段时间直接买一块 GV10x 算了，那么估计是要继续用 940M 凑合着了。也就是说还是打不成去年前年发售的那些最新最炫酷的大型游戏，还是打打 R6, 农农 GBF 好了。 前几天从微博上收了一台网件 R6250, 与两年半前收那台 RT-N16 一样的价格，但是性能强了太多。同样的五口全千兆最在意的点，802.11AC 和 5GHz 的支持，可以用多种开源系统网件的原厂固件一直被人喷是屎。从 11 号晚上搬到中舒那边之后才发现，在嘈杂的 2.4 GHz 环境下，无线网络延迟的增加可以很明显的感知到。当年 RT-N16 发布时，802.11N 也还只是草案阶段，仅支持 150Mbps 的传输速率实际上是支持到 300Mbps 的但不知道怎么回事，我用的时候实际连接速率最高都是144Mbps，在今天确实远远不能满足我的需求了。不过一台 2010 年发布的路由器，能用到现在而且华硕时不时还会给它出个固件更新可以说是非常良心了，退役给家里当主路由用吧。 前不久国家出台快速推进 IPv6 普及的政策，据说东部部分地区的电信已经支持了 IPv6 的接入（事实上在两年半前 RT-N16 刚到手的时候就试过，貌似确实有）, 那么换了主路由干脆把 IPv6 也配置好，跟上潮流嘛。 那么回家干的事情第一点就是搞网络，你说我一个非网络运维专业出身的天天跟各种网络节点设备打交道也是。。。 也是挺奇怪的，自从打完空の軌跡 FC 之后把 SC 开了一个头就一直不想打下去，本来打算飞机上把序章完成掉的结果也变成了码字而不是拿着手柄 V, 不过 A330 确实比较稳的，果然还是宽体飞机好。寒假看看有没有心情打吧，毕竟机器和卡带都是别人的自己一直拿着也不太好，SC 完了还有 3rd 也是头疼了说到底还是传统 JRPG 的错。 过完年就要回去读大三后半学期了，离成为一个社畜就只剩半年不到的事件了。考研是不会去考的，这辈子的不会去的。从去年夏天开始投的简历都已经石沉大海了，那我也没好的办法，只能继续学习。连一个不给钱只管饭的银行打杂的实习机会都不考虑我 虽然我感觉是因为时间问题 那我还是只能考虑考虑当前端/后端/全栈了，当务之急还是多学点东西，如果寒假能克服障碍把那个 RaidFinder 写完，之前文章中给定的三个目标给实现，那我觉得我的全栈起码是，入门级了吧。 还一个小时降落，看了眼字数已经水了将近一千字了，但一点收尾的感觉都没有，那就，继续水下去好了。 今年年内 Granblue Fantasy Re-Link 可能就会发布，但是目前为止购买 PS4 Pro 的钱是一点都没有，白条和信用卡还欠着一堆，只能靠四月头上的保险钱看看能不能减轻一点压力，氪金还是少氪一点吧。 哦对，还有跟她说的可能有的生日礼物。这个“可能”应该是“肯定”才对，计划是在一个杯子里放条生日石项链。转眼间就是三年，只能感叹一句，物是人非，当初自己铸下的错误，可能这辈子，都没有办法再挽回了。 突然发现，一写到她，我就写不下去了，马上就要收电子设备了，再扯点别的。 今年的旅游计划大概是去趟武汉和重庆吧，去年夏天感受过了粤国和鹭岛，今年感受下在中部但文化上偏西南地区的都市和离成都最近的大都市的另一种感受，有机会的话还会去趟苏州感受苏南三市的发展。 也就这样了吧，保存睡眠了。","categories":[],"tags":[{"name":"Everything","slug":"Everything","permalink":"https://xinoassasssin.github.io/tags/Everything/"}]},{"title":"RaidFinder 开发记——1","slug":"rf-developing-0","date":"2018-01-13T09:57:36.000Z","updated":"2018-01-13T11:57:02.096Z","comments":true,"path":"2018/01/rf-developing-0/","link":"","permalink":"https://xinoassasssin.github.io/2018/01/rf-developing-0/","excerpt":"","text":"上篇文章给自己写了一个开发计划，这两天已经开始动手了，结果刚开头就非常不顺，来写篇文章吐槽一下。 从原版的描述和一些代码中，我发现原作者使用了 Twitter4j 这个看起来在 Java 平台非常强大的库来进行 Twitter Stream 的获取。而在 NPM 上不难找到类似的 Twitter 库，也不难使用，填好两组 Key &amp; Secret 之后简单的调用 API 就可以输出源源不断的 Tweets 来。 Twitter 官方提供的 Stream API 中自带了对自定义关键词的 Filter, 那么我们就来调用它。然后就碰到了目前为止第一个也是最主要最棘手的问题。 最主要的问题问题就是：Twitter Stream Track 的关键词设置不支持 CJK 字符，而 GBF 的玩家则大部分使用日语，他们的救援推的关键词都是&quot;参加者募集！&quot;。 于是我在 Twitter Deck 中新建了一栏，使用&quot;参加者募集！&quot; OR &quot;I need backup!&quot;的搜索条件进行搜索并观察官方用的是什么办法支持 CJK 字符的。结果大失所望，官方的搜索也只是用 Search API 而不是 Stream API, 然后定时获取一次假装出 Stream 的感觉来“糊弄”用户。那么我想，目前找到的库对于 CJK 都没有支持的情况下应该作者是用了一些手段来支持 CJK 字符的。 那么也只有继续读源码了。 经过大概一小时的思考，我决定暂时先将实现平台放到 .NET 上，目前 .NET Core 在跨平台上面已经比较稳定了，用 C# 写也更顺手一些。先拿这套把实现思路和一些算法给摸清楚，以后再重新用 Node.js 来实现。","categories":[],"tags":[{"name":"Everything","slug":"Everything","permalink":"https://xinoassasssin.github.io/tags/Everything/"},{"name":"Programming","slug":"Programming","permalink":"https://xinoassasssin.github.io/tags/Programming/"}]},{"title":"计划：用 Node.js 重写 GBF-RaidFinder","slug":"gbf-raidfinder","date":"2018-01-08T15:11:06.000Z","updated":"2018-01-08T15:11:06.912Z","comments":true,"path":"2018/01/gbf-raidfinder/","link":"","permalink":"https://xinoassasssin.github.io/2018/01/gbf-raidfinder/","excerpt":"","text":"最近产生了一个“大胆”的想法，就是用 Node.js 来重写 walfie/gbf-raidfinder 这个被许多骑空士使用着的项目。 为什么想要重写？因为原项目是用 Scala 写的，运行在 JVM 上，虽然 JVM 跨平台的能力比较强，但它相对比较“臃肿”，而且构建、更新起来比较慢。可以是可以用作者提供的 Docker 镜像直接部署，但是之前因为 Docker 不兼容于 4.9 以上的内核，而我又比较依赖于 bbr 这玩意儿所以就没用 Docker 而是直接跑在系统的 JVM 上。 那么为什么想用 Node.js 重写，Node.js 相比较于 JVM, 保证了一定的跨平台能力的同时更为轻量化，版本迭代的代价也更低一些。最主要的是，我想通过这次重写来学习 Node.js 和 Javascript, 因为这个项目是 C/S 架构的，也能学习一定的全栈能力。 重写方案在重新简要查看了原作者的实现之后，我得出了“这不是我短时间就能重写出来”的结论，原因如下： 原作者使用了 WebSockets 这项技术来实现列表的实时更新 原作者使用的许多库不知道在 npm 有没有类似的替代品 原作者写的 Boss 列表自更新是一大难点 我在 JS 和 Node.js 上都只是一个初学者 那么就一步一步地来，先写出一个 Twitter 的搜索模块，再学 WebSockets 然后把实时更新给实现了，然后把自更新实现了，最后把几个部分整合到一起，差不多重写就完成了。我给这个坑留半年到一年的时间，希望明年的现在我已经填完这个坑了。","categories":[],"tags":[{"name":"Everything","slug":"Everything","permalink":"https://xinoassasssin.github.io/tags/Everything/"},{"name":"Programming","slug":"Programming","permalink":"https://xinoassasssin.github.io/tags/Programming/"}]},{"title":"国内的一些 Progressive Web App","slug":"pwa","date":"2018-01-01T14:26:21.000Z","updated":"2018-01-01T14:26:21.159Z","comments":true,"path":"2018/01/pwa/","link":"","permalink":"https://xinoassasssin.github.io/2018/01/pwa/","excerpt":"","text":"什么是 PWA前不久了解到 Progressive Web App 这个在2015年就已经由 Chrome 项目组提出来的概念，A selection of Progressive Web Apps 这个站点上收录了许多支持 PWA 的网站，不乏有可用性非常高的 Telegram Web 和知名的 Flipboard 应用的网页版。 PWA 是什么？直译过来就是渐进式网络应用。特性有很多，想要了解具体的直接看 Progressive Web App, 这里只举我最看重的几点： 轻量 &amp; 离线可用 跟普通的网页没啥区别，加载快。而且不像 Hybrid App 那样还是依赖于一个本地的 App 壳子，需要你去 App Store 安装 PWA 在 Android 上保存到 Home Screen 之后就会自动编译生成一个 APK 安装进系统中，也就意味着，它不止是一个网页，而已经成为了一个本地应用，离线状态下也是可用的（当然依赖于网络的东西就不行了）。而这一过程相当快，所要耗费的网络流量也远远小于 Native/Hybrid App 本地通知支持 在添加在本地之后，PWA 就拥有了本地通知能力，因为在 Android 上是通过 GCM 实现的，所以国内这点并不好用，微博 PWA 就干脆没有写通知的功能 All in Browser 其实这点就是第一点的补充，一个浏览器干所有的活，不用装那么多又大更新还要开 App Store 的应用。而这一点也包括在所有平台上都有同样的用户体验，虽然目前的 PWA 界面多是为移动设备而设计，但是至少我在 PC 上能一样很方便的用到它，而不是通过虚拟机或者其他手段。 我记得在早期 iPhone 刚发布的时候，Apple 的想推广的就是 Web App, 让用户可以用一个 Safari 干所有的活（可笑的是现在 iOS 还没支持 PWA），可惜当时的前端远远没有今天那么多好用新颖的技术，那时的移动设备性能也满足不了使用非原生代码的开销，所以最后 Apple 妥协了，推出了 App Store 直到今天。而现在 PWA 的推出，多了一个“渐进式”的前缀形容词，没有前几年强推 Web App 的那种势头，更加务实的风格更能被人们接受。 目前比较有用的 PWA 站点 微博 Lite Bilibili Web 版 饿了么 Twitter Lite 其他的可以上 A selection of Progressive Web Apps 看，虽然好像都是国外的而且好久没有更新了。 怎么安装非常简单，用你的 PC 版 Chrome 或者 Chrome Android 打开上一节的随意一个站点，等待一会儿就会有一条提示你可以添加到主界面的横幅在下方出现，点击即可。或者你可以手动使用“添加到主界面”的功能来实现。 &gt;&gt;&gt; endl;","categories":[],"tags":[{"name":"Everything","slug":"Everything","permalink":"https://xinoassasssin.github.io/tags/Everything/"}]},{"title":"杂（三）","slug":"something-2","date":"2017-12-24T12:22:24.000Z","updated":"2017-12-24T15:09:59.238Z","comments":true,"path":"2017/12/something-2/","link":"","permalink":"https://xinoassasssin.github.io/2017/12/something-2/","excerpt":"","text":"又是一个礼拜过去了，成都今年的严重雾霾晚来了一会儿，但是终究没有缺席。看着每天天气报告中那令人窒息的空气指数数字、全球领先的排位，感叹一句，国际化大都市不过如此。 被冬日的温度以及那浑浊的空气困在室内，也就只能每日流连在各种垃圾手游和几个大型在线射击游戏里。 今天还是想来写一下对于字体的一些感想，源起是看到烧饼的 Blog 字体设置上比较“怀旧”的采用了全局衬线字体、思源宋体优先的设定。我也是一个对思源系字体情有独钟的爱好者，能自定义的场合和自己输出的 PDF 等文档打印件中必然会采用思源系字体，比如本 Blog 就使用了思源宋体和黑体的组合，当然你系统里没有这两款字体就会回退，在 Windows 上回退了就很难看，除非你的浏览器里面把 sans-serif 和 serif 通过一些手段自定义了。 然后烧饼跟我说，Typekit 是有免费版的，一查，还真有，那肯定要用上啊。比较搞笑的是，我用的这个主题的作者原本在 head.ejs 中，是有调用 Typekit 的，但被我直接就去掉了。现在加回来之后，在没有思源系字体的桌面浏览器上，字体的显示是正常了，但是在移动端上，字体显示还是会被系统默认给覆盖掉，接下来需要想办法解决的，就是这点了。 题外话，这个主题已经被我修改的跟原版差距有点大了。包括一系列增大中间内容呈现框的宽度和图片大小设定等修改，在 Blog 内容显示上可以说已经完全是我个人喜好的体现了。有空把分类目录写了，再把 About 页面写了，这个 Blog 的总体就算是完成了。&gt;&gt;&gt; endl;","categories":[],"tags":[{"name":"Everything","slug":"Everything","permalink":"https://xinoassasssin.github.io/tags/Everything/"},{"name":"Blog","slug":"Blog","permalink":"https://xinoassasssin.github.io/tags/Blog/"},{"name":"杂","slug":"杂","permalink":"https://xinoassasssin.github.io/tags/杂/"}]},{"title":"玩家用脚投票","slug":"gamers-choice","date":"2017-12-17T14:31:22.000Z","updated":"2018-03-28T14:14:09.052Z","comments":true,"path":"2017/12/gamers-choice/","link":"","permalink":"https://xinoassasssin.github.io/2017/12/gamers-choice/","excerpt":"","text":"写这篇文章的源起，是2017年的 TGA, Best Ongoing Game 和 Best eSport Game 都给了 Overwatch, 无论是国内外玩家都不太能接受这个奖的归属，因为两个奖项的提名中都有比 Overwatch 更合理的选项。TGA 虽然说是由玩家投票选出的获奖归属，但是由于投票页面根本就没公布实时的投票结果自然也就给了很多操作空间。 那么在这个 Best Ongoing Game 的奖项上面，我们来看看，是不是其他游戏更有资格呢？ 我就说说 R6。 R6 可以说在第二年中，完成了一个全面重生。从刚发售时候的 bug 太多、服务器太不稳定等许许多多问题被玩家诟病，到如今玩家总数已经突破2500万，每日的在线玩家也稳定在25万左右的一个情况，育碧蒙特利尔的持续更新是功不可没的。如此的一个硬核倾向的游戏，需要你背地图，每张地图还都是复杂的起码三层甚至四层的立体结构，玩家数能够不断的增加，本身已经说明了游戏的魅力在吸引着玩家。作为一款“战术射击游戏”，它没有绚丽的技能，没有用来吸引眼球的女性模型，也没有强到变态的武器，有的只是双方的战术布置以及最重要的，枪法。 再说平衡，R6 的平衡，只能说是相对平衡，因为最重要的还是枪法，在这点上它骨子里就是硬核射击游戏的血脉延续，干员技能的平衡，是影响到整个游戏体验的关键所在。蒙特利尔不是那种“教你玩游戏”的，在出新干员时，一定会注意到不破坏原有的战术体系。反观 OW, 一个天使改了又改，就是改不好，重点针对竞技比赛的调整非常影响休闲玩家的游戏体验。有些反对者说 OW 出新英雄的速度太慢了，这点我觉得倒是没啥所谓，看看隔壁 Dota 的出新英雄速度。但是当看到新英雄的出场率达不到设计师心中应该有的程度的时候，你不应该为了这个出场率而去大幅度加强/削弱它，而是像冰蛙那样，更注重整体的平衡性，设计师需要反思自己的设计出了什么问题使得这个英雄的出场率不如自己意，或者要更深刻理解目前游戏中的平衡到底如何，再来进行调整。我们经常可以看到 Dota 的更新日志中一个英雄的技能伤害被平衡了，怎么平衡的？削弱低等级伤害增加高等级伤害或者是增加一点点蓝耗/CD, 这就叫 Banlance, 而不是单纯的增强/削弱。 R6 的平衡还体现在非正式赛和排位赛是有一定的区别的。在排位中，进攻方可以选择自己出生的位置，防守方也可以选择自己的防守位置，这就使得正式比赛中围绕自己阵容来选择合适的地点来进攻/防守。而在非正式赛中，这两个位置都是随机的，这也给非正式赛带来了些许随机性，你选的干员在那个位置可能没啥用处，意思就是你就剩下两块板子和一把枪是有用的，你的技能帮不上太大忙。这种情况在非正式赛里还挺多见的，比如防守方拿了 Mira 却发现旁边没啥能封的墙，镜子也就不知道往哪里放了；进攻方拿了 Fuze 却发现对手守地下室而且他们头上全是“不可破坏的表面”。而 OW 自从把快速比赛模式改的和竞技一样不能拿重复的英雄之后就失去了很大的乐趣性，就算有人说原来的快速模式就放在街机里面随时都可以玩，但是一个二级菜单中的模式和首页上谁的点击率更高就不用多说了吧。 一个有意思的现象就是 Overwatch 在 metacritic 上的用户评分已经低于 R6S 了(PC平台)，虽然只有0.3的分差，但是 OW 的用户评论有足足4699条，而 R6S 则是884条，就拿最近的100条用户评论来说，我一路拉下去，OW 是一连串的0分，看来 BLZ 的运营在全球范围内都不能算是成功呢。 回到本文标题上面来，玩家用脚投票。游戏到底好不好玩，一个很简单的问题，每个人都有自己的看法。但是当多数人在喊着不好玩的时候，那些即使忍受着糟糕的游戏体验也要高喊“这游戏好玩”的玩家们，是不是应该重新审视一下，为什么多数人喊不好玩我却觉得好玩呢？偶尔，你也应该听听别人的看法。","categories":[],"tags":[{"name":"Everything","slug":"Everything","permalink":"https://xinoassasssin.github.io/tags/Everything/"},{"name":"Game","slug":"Game","permalink":"https://xinoassasssin.github.io/tags/Game/"}]},{"title":"杂（二）","slug":"something-1","date":"2017-12-17T09:02:06.000Z","updated":"2017-12-24T11:45:19.993Z","comments":true,"path":"2017/12/something-1/","link":"","permalink":"https://xinoassasssin.github.io/2017/12/something-1/","excerpt":"","text":"前略，快考试了。 今天一时兴起去听贾鹏芳老师的曲子。自己当初还拉二胡的时候没听说过其人，直到后来接触了和平之月之后才了解到，原来还有这么一位当代二胡演奏、作曲、艺术家。当今二胡界，她应当就是那个站在顶端的人了。可惜了，这么杰出的人物却要跑到日本才能获得更好的发展。翻了一眼网易云下面的评论，称赞的，喷她的，叫人安心听曲子别废话的，什么都有，却没人思考为什么这么好的艺术家要跑到日本去才有今天的成就。 结合一下昨晚 steamcommunity 突然被墙之后今天贴吧让人去举报那几个政治敏感组想让 Valve 关闭掉那几个组从而让国内用户能够重新访问社区的事情，可笑。 大家都以一句“你懂的”略过对于体制本身问题的探讨，问起为什么的时候都无奈地表达出“‘说了反正也会被删’、‘我说了也没用’”这样的意思。这已经是相当多已经麻木的国人自我阉割的状态了，在一次次的尝试争取宪法中规定公民应当享有的权利中，越来越多的人放弃了。这其中不少人转而把枪口对准另外一批还在努力为所有人争取权利的“斗争者”，他们中有的认为，是另一批人持续不断的斗争行为导致了自己享有不到应该有的权利，而他们的目的，是干扰这帮给他们争取着权利的人们，甚至不择手段。 思想是自由的，讨论思想也应当是自由的。对于某种思想的评价是每个人自己做出的评判，不应当根据自己对于这种思想的理解而去干扰别人对于这种思想的看法。我们应该做的是讨论，而不是闭口不言甚至去把那些敢于讨论的人的嘴巴给捂上。你去把那些敢于讨论的人的嘴巴捂上，那么你是不是跟那些不让你开口说话的人是一样的呢？ 鲁迅先生的文章中的那些道理，在这个年代仍然适用着。或者说，对中国这块大地上生活着的人们，只要有一天封建思想还扎根在人们的心中，那么将一直适用下去。 明天还有场考试，这周就写这么多。","categories":[],"tags":[{"name":"Everything","slug":"Everything","permalink":"https://xinoassasssin.github.io/tags/Everything/"},{"name":"杂","slug":"杂","permalink":"https://xinoassasssin.github.io/tags/杂/"}]},{"title":"Just Because 与暗恋与青春","slug":"just-because","date":"2017-12-08T08:37:23.000Z","updated":"2017-12-08T12:47:12.939Z","comments":true,"path":"2017/12/just-because/","link":"","permalink":"https://xinoassasssin.github.io/2017/12/just-because/","excerpt":"","text":"最早是今年五月末的时候，之前鸭志田一和比村老贼合作的那部原创新番的信息第一次公布。看到第一张宣传图好他妈像月曜日のたわわ的女主啊，人设感觉还不错，剧本是鸭志田一，感觉不会太差。那行先纳入想看的列表里，毕竟十月番嘛，不急。 现在=&gt;“没有 Just Because 看我要死了” 当时也没想到，这么一部剧情上“没什么亮点”的作品会如此的触动我的心弦。简简单单的暗恋，简简单单的青春，却又有着如此的魅力。也许是 nagi 那首 over and over 的歌词，也许是男主常年累月默默地付出，也许是小宫那单纯到极致的喜欢，也许是美绪那对恋爱淡淡的态度。 谁没暗恋过呢？不知道何时就在意起某个人来了。“Ta 的事情我都想要了解”、“想要接近 Ta 和 Ta 说话”，不自觉地，这些想法就会跑到脑子里，你甩了甩脑袋清了清思路，以为把这些想法都抛干净了，却一不当心，还是按照这些想法行动了起来。慢慢地，你在意起对方的想法来，“Ta 对我是什么看法”，然后像个小学生一样去套话，从 Ta 朋友嘴里或是大胆一点地直接去问对方。 暗恋是什么？是青春啊，大学前的学生时代清纯的情愫。错过了，就不会再来。 最后送上 over and over 的歌词，仅以此，纪念已经逝去的青春，和那些记忆中的点点滴滴。 記憶の君に告ぐさよなら 隣に座ってた 恥ずかしがり屋ありがとうって言う度に頬を染めてたふたりで考えた秘密の合図離れても きっとすぐ分かるはず 新しい日々に巻かれるまま届いたささやかな手紙をああ どうして読みもしないで置き去ったんだろう 記憶の君に告ぐさよなら長い髪が頬を隠すからうまく調子が合わないんだ君を誰より深く知っていたのに隣の席の君は いない まばらに継ぎ合わす 遠い思い出一部だけ抜け落ちて どこか欠けてたあの時口にした言葉はきっと忘れてはいけなかったそれなのに 大人びた視線に透かされて焦る心が浮き出しそうああ こんなに子供染みてる自分が嫌だ 面影の残る横顔で知らない笑顔を見せる君はまるで平行世界の人ぼんやりしてる間にずっと先まで 歩いていってしまう 背中追う足音一度足を止めてわずかに見せる唇のかたち瞬く間に時間繋ぐ橋をかけた 隣の席の君はいない大人になった君がひとり 記憶の君に告ぐさよなら長い髪がとても似合うから少し照れくさくなるけれど君を誰より深く知っていくため隣に座ってもいいかい","categories":[],"tags":[{"name":"Everything","slug":"Everything","permalink":"https://xinoassasssin.github.io/tags/Everything/"}]},{"title":"杂（一）","slug":"something-0","date":"2017-12-03T08:01:33.000Z","updated":"2017-12-24T11:45:32.709Z","comments":true,"path":"2017/12/something-0/","link":"","permalink":"https://xinoassasssin.github.io/2017/12/something-0/","excerpt":"","text":"又是有段日子没写文章了，说实话，脑子里有墨水但是倒不出来的感觉挺痛苦的，有时又是懒得打字，过了几小时之后也就把刚榨出来的脑汁吸收进去了，又不想写啥了。 还是写点东西吧。 前段日子几乎天天会梦见她，毕竟又是一个十一月末。仍然记得，六年前的那个十一月，月头我看到新的座位表的那种兴奋，和到第二学期中期为止的沉浸在那种单恋之中的“幸福”——确实是挺幸福的，对一个初三的小男生来说。每天做做卷子下了课还有一帮哥们儿能吵闹，旁边又坐着自己喜欢的女孩，有时候还能“打情骂俏”一下，多美好的日子啊。现在，也就只能在梦里面见到你了。 那时候还能看得进去一点有点营养的野书，还是个小小的福迷，时不时会模仿老福的那个经典姿势，甚至对郭敬明着迷——那个年纪确实比较容易着迷——整个初三看了不少最世的书。 可是没有办法，应试教育，形势急转而下。 距离产生美，可我不喜欢距离。 十二月头的成都，一个礼拜出一次太阳，经过了之前的突然降温接近冰点，这几天气温似乎稳定在十度上下。来这第三年了，不用太厚的衣服不用太厚的被子不用把寝室的门窗关紧以防西北风入侵，可能是这个城市冬天中的一丝温情，可是少见的阳光和每日早晨的大雾还是给这座城市的冬天写上了深刻的标题。 开口是困难的，已经是不可能回到以前那样了，干脆自暴自弃，可是深夜里却不住的想。 记忆这东西真的很神奇，每当你觉得自己忘记的差不多的时候，它就突然托个梦给你，梦里全是你以为自己忘记的东西，然后突然那么呈现在你面前告诉你你一点没忘记。醒来梦里的东西马上就不清晰了然而被重新调用起的记忆却在海马体浅层在那里在现实里告诉你你一点都没忘记你不可能忘记的事实时，伤痛感就来了。 后悔吗？悔。有用吗？没用。无力吗？无力。 人，不是健忘的。 当肚子上的肥肉越来越厚以前的裤子也都穿不上提醒我该运动的时候，我也不想。懒吗？不。 只是因为，这座城市，没有你。","categories":[],"tags":[{"name":"Everything","slug":"Everything","permalink":"https://xinoassasssin.github.io/tags/Everything/"},{"name":"Memories","slug":"Memories","permalink":"https://xinoassasssin.github.io/tags/Memories/"},{"name":"杂","slug":"杂","permalink":"https://xinoassasssin.github.io/tags/杂/"}]},{"title":"AC 十周年","slug":"AC-10-year","date":"2017-11-26T14:21:43.000Z","updated":"2017-12-17T08:17:30.910Z","comments":true,"path":"2017/11/AC-10-year/","link":"","permalink":"https://xinoassasssin.github.io/2017/11/AC-10-year/","excerpt":"","text":"十年大家——对于关注游戏界的大家——应该都知道，今年是 Assassin’s Creed 系列的十周年。从2007年11月13日初代发售，到今年10月27日的 Origin 发售，已经整整过去了十年。期间系列一共发布了正好十部正作，两部外传以及各种手游甚至 Facebook 的页游也有涉及。2016年系列电影的上映也代表着 Ubi 将其影视化的探索——尽管有些失败——和其他媒体端如小说、漫画甚至有消息称，AC系列将搬上电视机。 起初见第一次看到“刺客信条”这个名字，应该是在《微型计算机》这杂志上，初代 PC 版发售时正好赶上 DX10.1 更新，而这游戏也就成了首批支持 DX10.1 的游戏。 这里有个轶闻，就是初代在1.02版本之后移除了对于 DX10.1 的支持，后来再也没有加回来过，而当时正值 ATI 支持 DX10.1 的 RV600/700 系列与 NV 家不支持 DX10.1 的 G8x/G9x 系列竞争，DX10.1 对于 A 家有很大的加成。 当然了，当年的我自然是玩不上这类大作的，当时家里的机器还是 ATI 690G 上集成的 X1250, 当时也就是停留在这游戏好像不错的印象上，并没有深入地去了解。 时至今日，我也并没有回头去补这部开山之作。但不可否认，初代给整个系列开了一个不错的头，打下了一定的口碑基础，虽然初代被人诟病比较多的主线任务重复度较高等问题确实一定程度上影响到了玩家体验，但从另一个角度看，这作是当年育碧对于开放世界游戏的一个较为成功的探索，也影响到了后续作品，尤其是二代三部曲的游戏世界构成。 上手AC2 是09年11月在主机平台发售的，登陆 PC 平台是10年3月份的事情。巧得很，09年小学毕业之后我就拥有了一部在当年播放能力很不错的 MP4——蓝魔 T10RK, 当时正值国内几大网络视频平台爆发式增加期，我也接触到了T仔这位魔兽解说同时也是主机游戏视频攻略作者，他当时正好在做 AC2 的游戏攻略视频。“咦，这游戏出2了呀？”我疑惑的同时点开了视频，不得不承认，2代的起头非常能抓住玩家，我就一下子被这游戏抓住了。当时只玩过 COD 124 的我对于这种没接触过的游戏类型产生了浓厚的兴趣。主角 Ezio 流畅的爬墙跑酷和打斗动作，帅气的刺杀动画，都让我非常痴迷。看完整个系列攻略视频之后我就一个想法，我要玩。 这里提一句，AC2 是 DX9 做的，但是各种因素综合起来使它的画面看上去甚至要比 DX10 模式下的初代更好一些。 时间到了10年暑假，家里添购了新的笔记本，虽然显卡是很弱的 GeForce 310M, 但是好歹能玩了。各种原因一直拖到11年的寒假，新年里我终于玩上了刺客信条2, 在 360p 画面里见到的和从 1366x768 的画面里见到的，完全是两个级别的世界虽然只有二十帧不到，只有自己上手玩过了才会懂得游戏的魅力。总而言之，我沉迷于 Ubi 构造出来的这个虚拟世界中，沉迷于扮演 Ezio 进行他的复仇。 刚开学不久后我得知最新作的兄弟会刚发布，于是找机会偷偷地给电脑挂上了下载，在一个家长会的晚上安装完了兄弟会并领略了一番最新剧情。 游戏还是得一点点玩的，先是花了一个月时间每周玩一点玩一点的把二代给通关了，然后兄弟会却一直拖着，原因是帧数不够玩着真的吃力。 2011年的11月份是一个值得写入历史的月份，当然主要原因是 COD8 的发售，伟大的现代战争系列终于完结，IW 在动视的最后遗产好歹给这个系列画上了也许看上去不太完美但足够给粉丝们一个交代的那个句号。而就在这个11月，启示录也上市了，作为 Ezio 三部曲的终结之作，大家都翘首以待 Ubi 这次会写一个怎么样的故事，打造怎么样的一个城市供人游玩。剧情上这作的完成度相当不错，但从游戏性来看，启示录无疑是有赶工的嫌疑的，部分系统甚至较兄弟会退化了或者说可玩度差了，而新加入的塔防元素因为强制进行、拖沓节奏的原因被人诟病。 承有人说 Ezio 三部曲之后再无刺客信条，其实作为二代入坑反复玩了这三部曲的我来说，曾经我也是带有一点这种观点的，直到我玩上了后续作品。 比较惨的是，陪我一起玩 AC 系列的笔记本在我升上高中开学后不久就被我妈一杯水给消灭了最可气的是她当时水浇上面了还强行当没事把表面水擦干净了继续开机用着，导致最后南桥烧了带着我的 500GB 硬盘一起没了，家里只剩一台我爹二手收来的 ThinkPad X61t, 没办法，不玩就不玩吧也不会死人，我也只能从别的渠道来了解游戏相关的消息。幸好高中的书店一直有 UGC 和各种杂七杂八的杂志出售，没让我陷入信息的荒野。 回到正题，下面我们从三代讲起。 Goodbye Desmond时间来到2012年，曾经预言中的世界末日的年份。 十月末，AC3 在无数粉丝的翘首以待中终于面市，因为新的改良版引擎的关系，刚上市的三代 bug 不少，但也没到 Unity 那种程度。 三代是存有一定争议的一作，列举一下这作发生了什么： 开头给你扮演了很久的圣殿骑士但是行事方式跟刺客几乎一致要不是不断的小细节给你提醒这是圣殿骑士可能有玩家直到宣誓那里才吓一跳：“我艹这他妈我玩了几个章节的圣殿骑士” 戴斯蒙为了拯救地球以及人类自愿牺牲了主角死了！！！这他妈现代主角死了故事怎么写下去？？？ 杀了爹 对于一些历史人物消极化塑造不我们的国父不是这样的育碧你骗人！ 但是三代确实是非常棒的一部作品，不论是剧情上还是游戏性上。剧情自不用多说了，虽然后期故事有一些赶但完整性还是比较强的比某大革命强几倍；而在游戏性上，三代保留了前作大部分受到好评的元素，去掉了饱受批评的东西，还加入了新的元素，也就是在后作中占“主要地位”的海战元素，而战斗则爽快不少，更是有一定的 RPG 收集升级系统。这些让三代的可玩性相比于 Ezio 三部曲提升不少。 AC 系列做到主线第五部，所有现代剧情的目的是什么？我们来回顾一下。 第一部中戴斯蒙被抓捕强行拉进 Animus 里去进行记忆探索，而当时圣殿手中已经拿到了二太爷的那枚 Apple(当时已经被毁), 如果是想从戴斯蒙的 DNA 记忆中获得更多的关于 Apple 的信息，那为什么不直接从 Ezio 开始呢？同步率不够直接从 Ezio 开始的？而在二代结尾处，育碧给出了新的信息：世界末日要到来了，这给主人公进行 DNA 记忆探索增加了新的理由：“拯救世界”。在兄弟会最后拿到 Ezio 的 Apple 并杀掉了间谍 Lucy 之后，戴斯蒙被引导去找出大圣殿的位置。来到三代，众人来到大圣殿之后发现在“拯救地球装置”前有一道锁，需要钥匙，在提示下戴斯蒙开始体验肯威家族的记忆，这也就是三代的古代线剧情。 也就是说，这五部以来，目的已经从寻找 Apple 变成了拯救世界，戴斯蒙一直在扮演着那个第一文明信息的接收者。而他却在最后面临着第一文明没有提前告知的巨大的选择——是牺牲自己拯救人类并释放 Juno, 还是让人类文明再次毁灭自己扮演领导者的角色来重建文明。我们的戴斯蒙不愿意让人类因为他的选择而重蹈覆辙，所以最终，他牺牲自己拯救了世界。所以花了五部的现代线就是要把戴斯蒙写死的？！ 盗亦有道紧接着三代，黑旗 海盗信条 描述了康纳的爷爷——爱德华·肯威，曾经是一名海盗的故事。爱德华凭自己的本事 捡了个刺客的尸体然后开始冒充之旅 横行于加勒比地区的海域，并最终加入了刺客组织（虽然说是最不像刺客的）。这代打造了一个巨大的开放世界，虽然很大部分都是海洋，但是因为强化之后的海战系统和 RPG 元素还比较耐玩的，所以大家也就习惯了当海盗的感觉。这作的开放世界算得上是 AC 系列开放世界的一个小成，有足够多的收藏元素和探索空间，即使你不怎么打主线也有非常大的自由探索空间，虽然主线进度对船和人物产生一些影响但是没有前几作那么大的限制。 本作的发售也正巧赶上世代更替，作为上世代末的最后一批 3A, 本作的口碑还是相当不错的。当然，接下来的 Unity, 就出事了。 转大革命说到这个折，当然是 Unity 这作公认的刺客信条的滑铁卢，也是我继兄弟会之后第三部通关的刺客信条没想到吧！ 因为 ACU 的 Unity 一词跟“大革命”完全不搭边所以本文用其英文原名 那一年的 Ubisoft Montreal, 年内连着发售了 Watch Dogs, Assassin’s Creed Unity 和 Far Cry 4 还有别的一些作品。显然 Montreal 没有这么大的力量同时开发这么多作品，导致了那年的 ACU 成了工作室多开的最大牺牲品。截至现在，metacritic 上 ACU 三平台的评分分别为70, 70, 72, 而 AC 系列前作的评分均在80以上。 那一年的11月，当时已经高三的我在发售那几天回家了就频繁地犯着对于 ACU 的评价。几乎是一边倒的嘲笑与批评，bug 多、剧情差、大量需要联机的支线以及氪金开箱子，ACU 与人们心中所设想的那个游戏相差太远。 还好，育碧不是某些两耳不听玩家所言的厂，他们迅速的出补丁修 bug 顺便将季票内容免费开放还补偿季票买家其他 3A 游戏，补救措施挽救了育碧的口碑。 我并没有第一时间体验到那充满着各种问题的游戏世界，而是在一年多之后的冬天，我尽力地去玩了这部让我难以评价的作品。 当时我刚玩过黑旗不久，Unity 的操作与前作相比，发生了一些变化——可能是引擎的进化——在高处跑酷时有了向上和向下的方向选择。而一下地，育碧宣称的千人同屏真不是虚言，ACU 有着整个系列最高的同屏人数，可能超越第二几倍之多，整个巴黎都是人。当然太多的人也是 ACU 性能表现差的一大元凶，玩 ACU 时，虽然是已经一年之后的版本，已经经过了补丁优化，但我的 E3-1231v3 基本上还是一直处于约80%的占用率，可想而知发售初期其在主机平台的表现是有多差。第三点就是整个地图进屋子和大地图是不能再白屏等读取切换场景了，在街上跑酷时能直接穿各种店铺，这点真的是非常好评。再来说本作的画质，我在玩了 ACS 之后回过头来看 ACU 的画面，居然感觉比 ACS 要强不少，事实上不少玩家都有我这种感觉。 再来说剧情，ACU 的剧情一定程度上继承了从三代开始的一些东西，比如男主的生父是刺客而男主却从小生活在一个圣殿骑士家里，比如女主是圣殿骑士。法国人的罗曼蒂克在这作中体现的淋漓尽致——所以最后的半悲剧结局也就可想而知了——他们喜欢悲剧结局胜过大团圆。很多人都不能接受这种悲剧结局，甚至有人喷剧情是屎。虽然剧情确实在某些方面铺垫不够展开太快，但是这作拥有系列历史上第一条比较完整的爱情线，男女主的故事穿插在整个主线中。而相比于前作参与到美国独立内战的历史中同时推动历史的进程，本作虽然在法国大革命的背景下，但剧情对于大革命这个背景并没有很好的利用，除了主线偶尔要求刺杀一个历史人物和与历史人物往来之外，似乎就再没有别的什么利用了。但现在想来，Arno 确实是最贴近普通人的一位刺客，他没什么大的目标，他可能只是想和 Alice 安安静静地度过一生，但没有办法，被命运捉弄，自己莫名成了刺客而爱人却是圣殿骑士的后代。 当时看到过一个帖子，声称最后我们玩到的 ACU 是被推倒重来的然后赶工出来的半成品，发帖者说，育碧早期放出的预告片中的剧情和我们玩到的剧情完全不相符合。而从游戏文件和游戏中种种线索来看，ACU 剧情对于游戏场景并没有利用干净，甚至部分区域根本没涉及到。 在 ACU 中玩了大概有二十多个小时的时间，DLC 没有去玩，现在也没有机会再去重回巴黎看看了，但是 ACU 在我心目中并没有那种差得一塌糊涂的感觉，而且现在动不动就半价的本作，还是很值得一玩的。 最后以通关之后 Arno 的独白来结束这段 ACU 的回忆： 刺客兄弟会的教条教导我们诸行皆可，我曾以为这表示我们可以自由地去做想做的事，为了追求理想而不计任何代价。现在我懂了，诸行并非都得到允许，而是教条本身即为一种警告。理想太容易跟教义妥协，而教条则让人变得狂热。没有任何权利高过我们自己的判断。也没有至高的主宰在监视可以惩罚我们的罪。到了最后，只有我们自己可以避免过度执着，也只有我们自己可以决定前进的路是否要付出太高的代价。我们总以为自己是救赎者、复仇者、或救星。我们向反对我们的人发动战争，然后他们再反过来向我们发动战争。我们总梦想着在世界上留下我们的印记……但我们却只在史书不会记载的战争中白白牺牲自己的性命。我们的所作所为、我们现在拥有的一切，都将随我们自己一起消逝。 伦敦与工业革命与小步慢走早在大革命发售后不久，就有消息传出，育碧在做一部地点背景是伦敦，而时间背景是工业革命后不久的刺客信条系列新作。经过 Unity 的“惨剧”之后，育碧谨慎了非常多。本作的主要制作工作室是 Ubisoft Quebec, 而这也是第一次 Ubi 将 AC 系列的主力作品交给 Montreal 之外的工作室 (Rogue 算是外传性质吧毕竟和 Unity 一起出来的) 。而这次，ACS 挽回了一部分被 Unity 的表现伤透了心的拥趸。还记得当时我对于 ACS 的发售根本不上心，以为与 Unity 一样，ACS 的表现会相当糟糕，结果当天晚上看到群里有人说 ACS 在几大游戏评测媒体那边拿到的分数都还可以，算是中规中矩。本来对 Ubi 不抱希望的我一下子就精神了，AC 没亡啊！ 本作开头就是老朋友——瑞贝卡和肖恩的无厘头回归，这俩活宝还是延续着之前的搞笑艺人风范，但都已经是独当一面的角色了。作为一部伦敦旅游向导游戏，本作基本达到了良好的水平线，包括新的战斗系统——连击系统的引入、比起 Unity 更进一步的技能系统，还有双主角切换的新玩法，都收到了玩家们不错的反馈。 而从这作上也能看到 Ubi 对于从3代开始的系列作品进行了深刻的反思总结，所谓“步子拉大了会扯着蛋”。吸取了 Unity “惨败”的经验的 ACS 虽然销量不佳，早早地开始了打折，但是它挽回了一定的口碑，并为正处于收购危机中的育碧及粉丝们打了一针镇静剂——你看我们还是能做好一款游戏的。2016年，Ubi 将本系列雪藏起来，年初就宣布本年度没有 AC, 也没有放它上 E3, 将本系列逐渐沦为“年货”的脚步慢了下来。只有在年中的时候 4chan 上传出来的一点消息告诉我们本作舞台在埃及以及时间回到埃及王朝时期等一些零碎信息。 它，以及他们，需要冷静下来思考系列的出路。 然后他们成功了。它，又被注入了新的热血。 合Back to Origin在我看来，某些媒体称 ACO 是一次系列重启是不对的，只是古代线的剧情回到了兄弟会出现之前的古埃及，而现代线的剧情继续延续了下去，没有所谓的“重启”。 本作的成功一定程度上建立在之前几部作品在许多方面的试水，一些系统经过几代的进化之后终于开花结果，综合起来呈现出了一个目前为止最棒的刺客信条世界。 画面水平终于不再缩水，Unity 开始使用的 AnvilNext 2.0 终于在几年的更新之后展现了它真正的实力，再加上 Ubi 强大的美术水平的加持，很多玩家大呼“这古埃及真漂亮”。 而大刀阔斧改革的战斗系统也赢得了不错的评价，终于不再是砍砍砍，而是需要许多操作的战斗，当然从 ACU 开始引入的等级系统使得越太多级数打人的困难程度完全是噩梦级别的，但是类似于 ARPG 的战斗手感让还真的是非常好的改进方向，不是无双，不是防反，不是蹲逼，而是寻找战斗的竞技乐趣，这才是战斗系统应该有的水准。 制作人直言借鉴了猎魔人3的支线系统，本作的支线经过前几作的不断进化，终于不再是无聊的收集和一些没啥关联的小任务，而是有了一点工艺品的感觉。虽然不少玩家诟病不打支线完全没法推主线也反映了本作等级经验系统上有一些瑕疵，但是比起前几部那可有可无的支线任务，本作的无疑是给整部作品添了一些光。 没体验过的我真的吹不下去了总之 ACO 真的很屌玩过的都说好大家快点去玩啊 为什么是 ACAC 系列为什么能够吸引我，它的魅力何在，我想了两点，罗列出来： 真实的虚幻 刺客信条系列独特的在真实历史事件中虚构出一整套阴谋论出来，而且还基本没啥大的漏洞，这点我是非常钦佩系列的写手的。从史前文明开始，他们虚构出一整套第一文明与人类的历史来，又从几大宗教的经典中下手，将亚当与夏娃写成最早的 Assassin, 将圣殿骑士与刺客的斗争史完全的编入到现实历史中，所谓真实的虚幻，就是当你看过他们编写的历史，会觉得，我靠，太真实合理了吧。而且 Ubi 运用游戏中谜题的水平相当之高，2代和兄弟会的真相和裂缝谜题都蕴藏了大量的历史知识，甚至还有凯撒加密需要破解。当年贴吧有人把2代真相题目的背景信息都发了出来，看过之后也是受益匪浅。 旅行的意义 刺客信条系列向来都有着“旅游介绍片”的名号，究其原因，是其团队对于游戏还原度的终极追求。就算是最缺乏各种古典建筑的黑旗，都高度还原了当时的加勒比海附近几大港口城市的风貌，更别说其他几作了。虽然是缩小过的建筑，但是精细程度之高，让人感觉就是看到了实景一般。ACU 当年风评那么差，有一点却是被人所津津乐道的，就是它忠实的还原了当时巴黎的建筑物和风景，这可以说是 AC 团队的一大执念了——“我游戏可能做的不好，但是我的建筑一定是高度还原”。甚至今年的起源直接给了个旅游模式，更是这种理念的体现了 十年一轮回回到文章开头的主题，AC 系列十周年了。我也一路从初中升到大学，很高兴成长路上接触了这个系列，很高兴我没有把它当成快餐游戏去玩，而是喜欢去深挖现代剧情还有刺客信条的内涵。就如那句经典的“万事皆虚万事皆允”影响了不少中二青年一样，我初中的时候也特爱把这句话挂在嘴边显得特有逼格。我把 Assassin 当成 ID 来用，也把这个系列安利给了不少身边的人。在高中毕业的那次变故导致的不得不纹身的时候，选择把 AC logo 纹在手臂上。我相信 Ubi 能将这个系列做的更棒，但我更想看到 AC 系列现代主线完结的那一天，想看到普通的人是如何打败第一文明的那一天。 &gt;&gt;endl; 后记不知不觉，本来是受到 A9VG 官博发的十周年纪念文的影响想喷它一番，但不知道怎么的，就不当心写成这篇六千五百字的文章了。 Nothing is ture, Everything is permitted. ?","categories":[],"tags":[{"name":"Everything","slug":"Everything","permalink":"https://xinoassasssin.github.io/tags/Everything/"},{"name":"Game","slug":"Game","permalink":"https://xinoassasssin.github.io/tags/Game/"}]},{"title":"一场因为使用 Git Submodule 引发的血案","slug":"hexo-with-submodule","date":"2017-11-14T07:45:59.000Z","updated":"2017-11-14T14:38:33.642Z","comments":true,"path":"2017/11/hexo-with-submodule/","link":"","permalink":"https://xinoassasssin.github.io/2017/11/hexo-with-submodule/","excerpt":"","text":"前略今天继续对 Blog 进行一些更新，上午先是将目前暂挂于 Github Page 的本博客链接上了自定义域名，但是这样一来就不能强制启用 HTTPS 让我略感不爽，有空解决之。中午的时候突然冒出来的念头：把 Blog 的主题用 Git Submodule 来进行管理，原因也是用这种形式管理非常适合 Hexo 的结构，遂动手。 我的 _config.yml 中是将 public_dir 挂在 Hexo 目录之外，所以不用动它。而原本就在的 themes/hexo-theme-typescript 已经是一个 Git Repo 了，先将它之中的改动 push 上去，然后删了它。 将原本 themes 文件夹中的内容清空后，我同时删除了该文件夹，这也是之后二十分钟让我不知道错在何处的原因。 删去 themes 文件夹之后我们来添加 submodule, 命令很简单，一句 git submodule add就可以搞定，然后会自动帮你 clone 下来并且在根目录下生成 .gitmodules 保存 submodule 信息。 搞定之后尝试跑跑看有没有问题，hexo g 之后发现警告信息：”No Layout: index.html”. 我心想，不对啊，文件没缺啊，你怎么就找不到 Index 的 Layout 信息了呢？首先想到的是，Git 的 Submodule 是不是用了某种 link, 以至于 hexo 读不到这个文件夹的内容，于是用 ls 查看之，ls 告诉我 theme 和 hexo-theme-typescript 都是实打实的文件夹而不是软链接，百思不得其解，Google 之，发现这个警告代表的文件百分之百是由于文件缺失。然而我的文件都在啊，没缺啊，就认为是 submodule 的问题，参考了别人的 hexo 用 submodule 方式管理的文章之后，我突然想到，会不会是原本文件目录是 “themes” 而我建 submodule 时候用的是 “theme”, 缺了个 ‘s’ 导致的文件缺失呢？于是我新建了一个文件夹跑了一下 hexo init 看看文件目录结构，果不其然，用的确实是 “themes”, 重新把 submodule 建好，用对文件夹名字，运行 hexo s, 打开本地页面，熟悉的主页终于回来了。 &gt;&gt;endl;","categories":[],"tags":[{"name":"Everything","slug":"Everything","permalink":"https://xinoassasssin.github.io/tags/Everything/"},{"name":"Blog","slug":"Blog","permalink":"https://xinoassasssin.github.io/tags/Blog/"}]},{"title":"GBF2Weibo 开发记","slug":"GBF2Weibo","date":"2017-11-11T09:01:14.000Z","updated":"2017-11-14T07:53:15.022Z","comments":true,"path":"2017/11/GBF2Weibo/","link":"","permalink":"https://xinoassasssin.github.io/2017/11/GBF2Weibo/","excerpt":"","text":"上周末和这周头上都一直在写那个 GBF 自动发 PO 到微博的工具(github)，到目前为止也就实现了一半，后半部分自动发 PO 的功能因为新浪的限制，已经没办法做到以前 FaWave 那种形式的发送微博了。我的想法是绕路，通过在 weibo.com, 也就是网页版微博中插脚本，实现将文本插入到发送框，同时图片也插入进去，然后模拟点击发送按钮。上周日下午研究了一小时的微博首页，文本插入到发送框和模拟点击发送是能够做到的，但是就是不知道如何插入图片。在这里我又产生了一种绕路想法，就是模拟 Ctrl + C/V 的键盘操作来进行复制粘贴工作，然后，坑了。 写这玩意儿的过程中，因为需要自己获取当前的 RaidCode, 也就是那个八位参战码。GBF 页面加载完存在一个 “stage” object, 其中 .pJsnData.twitter.battle_id 就是我需要的码。那么就需要将这个码传递出来，而 Chrome 对于 Extension 是有非常严格的限制的，Extension 的 Content Script 和 Extension 本体是处于不同的沙盒之内的，所以就不能直接用 var raidCode = stage.pJsnData.twitter.battle_id 这种形式，而是要通过 Chrome 的 Message Passing API 来传递信息。苦学了好几天的消息传递都不能达到目的的时候，我想起来 Viramate 提供了外部获取数据的 API, 那我直接调用 API 来得到整理过的信息不是更方便吗？说是这么说，看了半天源码之后发现它没提供现成的 RaidCode 直接返回，发邮件询问作者之后得知，原来有提供战场数据的返回，但没有直接的 RaidCode 返回，不过已经能满足我的需求了。 其实作者在说明文档中有写这个 API, 但他写返回内容的时候写了”a bunch of shit”，所以我当时看文档的时候也就忽视掉了这个 API. 有了现成的数据源，我只需要将其解析就行了。随后遇到了一些奇奇怪怪的小问题，大部分都是新手常见问题，值得一提的是，JS 的执行时间点与其在页面里的加载位置有关系，比如说，放在&lt;head&gt;里的要比&lt;body&gt;中的早执行（表意可能有问题）。 文本生成成功了，那么就是 Boss 图片的问题了。这里又出现了新的问题，GBF 这么多 Boss, 我一个个去下图片写信息要花太多时间。于是想到 GBF RaidFinder 有提供 Boss 数据导出的 json, 那么我写一个从这个 json 中获取信息并自动下载图片的程序来自动化不就行了。请出我们的 Visual Studio 和 C#. 自动化程序的大体思路是这样的：读 json 产生对象数组 -&gt; 数组排序去重 -&gt; 将原数组数据根据自己需求导入自己定义的对象数组中 -&gt; 读自己定义的对象数组中的图片 URL 并进行下载。 在写排序的时候发现自己把以前学过的排序算法都忘记了，使劲回忆了不少时间才写出了一个冒泡排序。然后是去重的问题，我并没有学习过去重算法，Google 之，众说纷纭，我选择了一个使用 List 的方案，最后以一句精简的 Lambda: if (list.Exists(x=&gt;x.Name_EN==_mb.Name_EN) == false){ list.Add(_mb); }搞定之。现在想来原理很简单，一个条件判断——“如果 List 中不存在同名（对象属性）对象，则添加之。 对了，C# 中还有个设计就是对象数组申明之后需要进行每个数组元素的初始化即创建对象，不然会运行时报错。 感叹一句，C# 是真的方便实用，MS 已经几乎给好了你所有需要的轮子，你只需要将这些东西拼起来，自己写点胶水就可以了。对于一个 Windows 平台上的小工具来说，C# 是特别方便的。 大体上这整一套开始有实用的代码写入是周日下午，最后写完半成品是在周一晚上，第一次写一个“能用”的小玩意儿还是很开心的。 &gt;&gt; endl;","categories":[],"tags":[{"name":"Game","slug":"Game","permalink":"https://xinoassasssin.github.io/tags/Game/"},{"name":"Programming","slug":"Programming","permalink":"https://xinoassasssin.github.io/tags/Programming/"}]},{"title":"Hello,World.\\n","slug":"Hello-World-n","date":"2017-11-11T08:38:26.000Z","updated":"2017-11-14T07:53:19.109Z","comments":true,"path":"2017/11/Hello-World-n/","link":"","permalink":"https://xinoassasssin.github.io/2017/11/Hello-World-n/","excerpt":"","text":"想自己架个 Blog 好几个月了，开始用了 Jekyll，在 Windows 上做本地生成不太方便，扔远程机器上有时候自己会忘记目录结构也很麻烦。 很早就听说过几个著名的博客框架，什么 WordPress, Ghost, Hexo, Jekyll. 最后我还是选择了 Hexo, 原因有几个： 我需要静态文件 我得看得懂 可以在 Windows 平台上进行静态文件生成 简洁 那么最后试用了一下 Hexo, 感觉不错，Windows 上跑的挺欢快，主题也挺多，修改起来自己也看得懂点。 还是要感谢 Node.js 这玩意儿 那么架好了，写些什么呢？ 上上礼拜刚 Uninstall 了 PUBG, 给自己的理由是挂太多了不想玩，其实主要的一点是一开游戏一晚上就没了，大学时间已经不多了，还是多留给学各种各样的东西。 所以上礼拜写了 GBF2Weibo 这个半成品，学了点 JavaScript. 同时因为需要，写了个 C# 小工具来进行 Boss 数据的转化，具体过程写在之后的文章。 想了想，开篇文确实没什么能多说的，我就只能鞭策自己以后把玩游戏的时间多用来学习，没事的时候多写点文字随便记录一下，大概这也是我把 Blog 的 Title 设置为“随写”的原因吧。 &gt;&gt; endl;","categories":[],"tags":[{"name":"Everything","slug":"Everything","permalink":"https://xinoassasssin.github.io/tags/Everything/"},{"name":"Blog","slug":"Blog","permalink":"https://xinoassasssin.github.io/tags/Blog/"}]}]}